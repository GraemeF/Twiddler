<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TweetSharp.Twitter</name>
    </assembly>
    <members>
        <member name="T:TweetSharp.Twitter.Model.ITwitterEntity">
            <summary>
            Interface for a twitter object that contans an ID and CreatedDate
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.ITwitterModel">
            <summary>
            Inteface for classes that are part of the twitter data model
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.ITwitterEntity.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.ITwitterEntity.CreatedDate">
            <summary>
            Gets the created date.
            </summary>
            <value>The created date.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.TextHtml">
            <summary>
            Calculates the HTML value of the <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/>
            by parsing URLs, mentions, and hashtags into anchors.
            </summary>
            <value>The HTML text.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.TextLinks">
            <summary>
            Returns the URLs embedded in the <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/> value.
            </summary>
            <value>The <see cref="T:System.Uri"/> values embedded in <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.TextMentions">
            <summary>
            Returns the <see cref="P:TweetSharp.Twitter.Model.TwitterUser.ScreenName"/> values mentioned in the <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/> value.
            </summary>
            <value>The <see cref="P:TweetSharp.Twitter.Model.TwitterUser.ScreenName"/> values mentioned in <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.TextHashtags">
            <summary>
            Returns the hashtag values used in the <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/> value.
            </summary>
            <value>The hashtag values used in <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/>.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterNode">
            <summary>
            The interface describing a Twitter node in the fluent expression tree.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNode">
            <summary>
            The interface describing a Twitter leaf node in the fluent expression tree.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUserFollowers">
            <summary>
            Fluent twitter node for the followers endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeXmlJson">
            <summary>
            Represents a node that returns its results as XML or JSON
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeXml">
            <summary>
            Interface for nodes that can return results as XML
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNodeXml.AsXml">
            <summary>
            Gets the results formatted as XML
            </summary>
            <returns>the xml formatted results</returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeJson">
            <summary>
            Interface for nodes that return results formatted as JSON
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNodeJson.AsJson">
            <summary>
            Gets the results formatted as JSON
            </summary>
            <returns>the JSON formatted results </returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterTrendsAvailable">
            <summary>
            Fluent twitter node for the available trends endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListTimeline">
            <summary>
            Fluent twitter node for the list timeline endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterHomeTimeline">
            <summary>
            Node in the fluent expression tree for accessing the home timeline
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeXmlJsonAtom">
            <summary>
            Represents a node that returns its results as XML, JSON, or Atom.
            These appeared in September 2009 API announcements.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeAtom">
            <summary>
            Abstract leaf node that can return results as Atom
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNodeAtom.AsAtom">
            <summary>
            Formats the results as Atom
            </summary>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds">
            <summary>
            interface for nodes that deal with social graph ids
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.Extensions">
            <summary>
            Extension methods for Authentication
            </summary>
            <summary>
            Extention Methods for Messages
            </summary>
            <summary>
            Extension methods for search parameters.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpPost(TweetSharp.Twitter.Fluent.ITwitterSavedSearchesDestroy)">
            <summary>
            Uses the HTTP POST verb to perform the action
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpDelete(TweetSharp.Twitter.Fluent.ITwitterSavedSearchesDestroy)">
            <summary>
            Uses the HTTP DELETE verb to perform the action
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserFriends,System.String)">
            <summary>
            Gets the friends of the specified user
            </summary>
            <param name="instance"></param>
            <param name="screenName">Screen name of the user for whom to get the list of friends</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserFriends,System.Int32)">
            <summary>
            Gets the friends of the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">Id name of the user for whom to get the list of friends</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserFriends,System.Int64)">
            <summary>
            Gets the friends of the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">Id name of the user for whom to get the list of friends</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterUserFriends)">
            <summary>
            Gets the default cursor used to return the first page of friends
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterUserFriends,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of friends 
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of friend/follower ids to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.OrderBy(TweetSharp.Twitter.Fluent.ITwitterTrendsAvailable,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Sets the order location for the query
            </summary>
            <param name="instance"></param>
            <param name="location">the location to use</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.DelimitedBy(TweetSharp.Twitter.Fluent.ITwitterStreamingSample,System.Int32)">
            <summary>
            Indicates that statuses should be delimited in the stream. 
            Statuses are represented by a length in bytes, a newline, and the status text that is exactly 'length' bytes.
            </summary>
            <param name="instance"></param>
            <param name="length">length in bytes</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterStatusMentions,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterStatusMentions,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterStatusMentions,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterStatusMentions,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterStatusMentions,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterStatusMentions,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterHomeTimeline,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterHomeTimeline,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterHomeTimeline,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterHomeTimeline,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterHomeTimeline,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterHomeTimeline,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterListsMembers)">
            <summary>
            Gets the default cursor used to return the first page of results
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterListsMembers,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of results
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of results to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterListsGet)">
            <summary>
            Gets the default cursor used to return the first page of user lists.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterListsGet,System.Int64)">
            <summary>
            Gets the cursor used to return the corresponding page of user lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of friend/follower ids to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterFavoritesGet,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterFavoritesGet,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetRequestToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String)">
            <summary>
            Gets the request token.
            </summary>
            <param name="instance">The instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="callbackUrl">The callback URL, which overrides the URL set via Twitter.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetRequestToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String)">
            <summary>
            Gets the request token.
            </summary>
            <param name="instance">The instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetRequestToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication)">
            <summary>
            Gets the request token.
            </summary>
            <param name="instance">The fluent twitter instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthorizeDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The fluent twitter instance.</param>
            <param name="token">The token.</param>
            <returns>The fluent twitter instance.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthorizeDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String)">
            <summary>
            Performs the step of authorizing a desktop application. Launches the default browser which will prompt the user
            to authorize your app on the provider's site. 
            </summary>
            <param name="instance"></param>
            <param name="token">the request token</param>
            <param name="callback">the url to redirect the user's browser to once authorization is complete</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthorizeDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The fluent twitter instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="token">The token.</param>
            <returns>The fluent twitter instance.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthorizeDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="token">The token.</param>
            <param name="callback">The callback url.</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthenticateDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The token.</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthenticateDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The token.</param>
            <param name="callback">the callback url</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthenticateDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The token.</param>
            <param name="consumerKey">your application's consumer key</param>
            <param name="consumerSecret">the secret associated with the <see cref="!:consumerKey"/></param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthenticateDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The token.</param>
            <param name="consumerKey">your application's consumer key</param>
            <param name="consumerSecret">the secret associated with the <see cref="!:consumerKey"/></param>
            <param name="callback">the callback url</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAccessToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String)">
            <summary>
            Requests the access token.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="token">The request token.</param>
            <returns>The FluentTwitter instance.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAccessToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String,System.String)">
            <summary>
            Requests the access token.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="token">The request token.</param>
            <param name="verifier">The PIN.</param>
            <returns>The FluentTwitter instance.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAccessToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String)">
            <summary>
            Gets the access token.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The request token.</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAccessToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String)">
            <summary>
            Gets the access token.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The request token.</param>
            <param name="verifier">The verifier (PIN).</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetClientAuthAccessToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String,System.String)">
            <summary>
            Requests the access token using client authentication, which does not require
            a browser.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>The FluentTwitter instance.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetClientAuthAccessToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String)">
            <summary>
            Requests the access token using client authentication, which does not require
            a browser.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>The FluentTwitter instance.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAuthorizationUrl(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String)">
            <summary>
            Gets the authorization URL used in the OAuth process.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The request token.</param>
            <returns>The authorization url</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAuthenticationUrl(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String)">
            <summary>
            Gets the authorization URL used in the OAuth process.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The request token.</param>
            <returns>the authorization url</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.SetVerifier(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String)">
            <summary>
            Sets the OAuth verifier (PIN) provided by the service to the user to enter manually.
            This method is used during desktop authentication, to set the verifier after the fact,
            since it cannot be guessed and is never provided by Twitter.
            </summary>
            <param name="instance">The fluent twitter instance.</param>
            <param name="verifier">The PIN obtained from the user who authorized the application.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFriends(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds)">
            <summary>
            Gets IDs of the friends of the authenticated user
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFriendsOf(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.Int32)">
            <summary>
            Gets IDs of the friends of the specified user
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The id of the user to get the friends of.</param>
            <returns>The Instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFriendsOf(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.Int64)">
            <summary>
            Gets IDs of the friends of the specified user
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The id of the user to get the friends of.</param>
            <returns>The Instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFriendsOf(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.String)">
            <summary>
            Gets IDs of the friends of the specified user
            </summary>
            <param name="instance">The instance.</param>
            <param name="screenName">Screen name of user to get the friends of.</param>
            <returns>the Instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFollowers(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds)">
            <summary>
            Gets the IDs of the followers of the authenticated user
            </summary>
            <param name="instance">The instance.</param>
            <returns>The Instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFollowersOf(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.Int32)">
            <summary>
            Gets the IDs of the followers of the specified user
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The id of the user whos followers to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFollowersOf(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.Int64)">
            <summary>
            Gets the IDs of the followers of the specified user
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The id of the user whos followers to get.</param>
            <returns>the instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFollowersOf(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.String)">
            <summary>
            Gets the IDs of the followers of the specified user
            </summary>
            <param name="instance">The instance.</param>
            <param name="screenName">The screen name of the user whos followers to get</param>
            <returns>the instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Containing(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets containing the given phrase.
            </summary>
            <param name="instance"></param>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.NotContaining(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets that do not contain the given phrase.
            </summary>
            <param name="instance"></param>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.FromUser(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets from the given user.
            </summary>
            <param name="instance"></param>
            <param name="screenName"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ToUser(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets to the given user.
            </summary>
            <param name="instance"></param>
            <param name="screenName"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ContainingHashTag(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets containing the given hashtag.
            </summary>
            <param name="instance"></param>
            <param name="hashTag"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ReferencingUser(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets in reference to the given user.
            </summary>
            <param name="instance"></param>
            <param name="screenName"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithNegativity(TweetSharp.Twitter.Fluent.ITwitterSearchQuery)">
            <summary>
            Searches for tweets with negative wording.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithPositivity(TweetSharp.Twitter.Fluent.ITwitterSearchQuery)">
            <summary>
            Searches for tweets with positive wording.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithNeutrality(TweetSharp.Twitter.Fluent.ITwitterSearchQuery)">
            <summary>
            Searches for tweets with neutral wording. Used as a way to
            reset previous sentiment selections on an existing query.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithQuestion(TweetSharp.Twitter.Fluent.ITwitterSearchQuery)">
            <summary>
            Searches for tweets containing a question
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ContainingLinks(TweetSharp.Twitter.Fluent.ITwitterSearchQuery)">
            <summary>
            Searches for tweets that contain embedded links.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseUpdateTruncation(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration)">
            <summary>
            When this configuration option is called, any status updates that are longer than the
            140 character option are truncated prior to sending. By default, updates longer than
            140 characters will throw a <see cref="T:TweetSharp.TweetSharpException"/>
            </summary>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseUrlShortening(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration)">
            <summary>
            When this configuration option is called, any valid URLs found in user status text
            are sent out of band to the default URL shortening service provider, with the shortened
            URL replacing the longer one.
            </summary>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseUrlShortening(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,TweetSharp.Twitter.Fluent.ShortenUrlServiceProvider)">
            <summary>
            When this configuration option is called, any valid URLs found in user status text
            are sent out of band to the specificed URL shortening service provider, with the shortened
            URL replacing the longer one.
            </summary>
            <param name="type">The URL service provider to use</param>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseUrlShortening(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,TweetSharp.Twitter.Fluent.ShortenUrlServiceProvider,System.String,System.String)">
            <summary>
            When this configuration option is called, any valid URLs found in user status text
            are sent out of band to the specificed URL shortening service provider, with the shortened
            URL replacing the longer one.</summary>
            <param name="type">The URL service provider to use</param>
            <param name="username">The username to pass to the URL service provider</param>
            <param name="password">The password to pass to the URL service provider</param>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseUrlShortening(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,TweetSharp.Twitter.Fluent.ShortenUrlServiceProvider,System.String)">
            When this configuration option is called, any valid URLs found in user status text
            are sent out of band to the specificed URL shortening service provider, with the shortened
            URL replacing the longer one.
            <param name="type">The URL service provider to use</param>
            <param name="apiKey">The API key to pass to the URL service provider</param>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CacheWith(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,Hammock.Caching.ICache)">
            <summary>
            When this configuration option is called, the specified cache provider is used for any subsequent
            caching on the request. The default caching strategy is this method is not used, is <see cref="T:Hammock.Caching.AspNetCache"/>.
            </summary>
            <param name="cache">The caching strategy to use</param>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CacheUntil(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.DateTime)">
            <summary>
            When this configuration option is called, any request made inside the specified absolute expiration date,
            is served from the client cache rather than from a request made to Twitter.
            </summary>
            <param name="absoluteExpiration">The specified local time that the cache for the request as defined will expire</param>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CacheForInactivityOf(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.TimeSpan)">
            <summary>
            When this configuration option is called, any request made inside the specified sliding expiratino date,
            is served from the client cache rather than from a request made to Twitter. Sliding expiration countdown begins
            from the last time a request for the same URL was executed.
            </summary>
            <param name="slidingExpiration">The specified amount of inactivity that may elapse before expiring the cache</param>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseRateLimiting(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.Predicate{Hammock.Tasks.IRateLimitStatus},System.Func{Hammock.Tasks.IRateLimitStatus})">
            <summary>
            Throttles recurring task using a calculation, using the return value from the predicate to determine if the task should run
            </summary>
            <param name="instance">The instance.</param>
            <param name="predicate">Predicate - will not run query if false is returned.</param>
            <param name="getRateLimitFunction">User provided function to get the RateLimit status</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseRateLimiting(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.Double)">
            <summary>
            Throttles recurring task using a calculation, limiting it to a percentage of the periodic total rate limit
            </summary>
            <param name="instance">The instance.</param>
            <param name="percentOfTotalLimit">Percentage of the user's total rate limit to allocate for this recurring request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseRateLimiting(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.Double,System.Func{Hammock.Tasks.IRateLimitStatus})">
            <summary>
            Throttles recurring task using a calculation, limiting it to a percentage of the periodic total rate limit
            </summary>
            <param name="instance">The instance.</param>
            <param name="percentOfTotalLimit">Percentage of the user's total rate limit to allocate for this recurring request</param>
            <param name="getRateLimitFunction">User provided function to get the rate limit status</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseProxy(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.String)">
            <summary>
            When this configuration option is called, the query request is sent via the specified proxy URL,
            rather than directly to Twitter.
            <remarks>
            Currently, the .NET default of using the Internet Explorer defined proxy as a default for all
            outgoing requests is in place, but may change before the version 1.0 release.
            </remarks>
            </summary>
            <param name="url">The URL of a proxy to use</param>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseTransparentProxy(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.String)">
            <summary>
            Uses the transparent proxy instead of calling twitter directly
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="url">The transparent proxy URL.</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseGzipCompression(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration)">
            <summary>
            When this configuration option is called, the query request is sent as GZIP encoded content,
            and automatically decompressed when received. This is useful for requests that retrieve a large
            number of results, but will increase bandwidth on smaller requests.
            </summary>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseAutomaticRetries(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,TweetSharp.Twitter.Fluent.RetryOn,System.Int32)">
            <summary>
            Sets up automatic retries for the error conditions indicated in 'retryPolicies'
            </summary>
            <param name="instance">The intance</param>
            <param name="retryOn">The error condition(s) that trigger a retry</param>
            <param name="maximumRetries">Max number of times to retry.  If exhausted, the last error will be returned</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseHttps(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration)">
            <summary>
            Configures TweetSharp to use https endpoints when connecting to twitter. Has no effect 
            if the <see cref="M:TweetSharp.Twitter.Fluent.Extensions.UseTransparentProxy(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.String)">UseTransparentProxy</see> sets a proxy server to
            use instead of calling the twitter endpoints directly. 
            </summary>
            <param name="instance">The intance</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterStreamingFirehose,System.TimeSpan)">
            <summary>
            Sets the amount of time to listen to the firehose stream for
            </summary>
            <param name="instance"></param>
            <param name="duration">The duration of the streaming operation</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterStreamingFirehose,System.Int32)">
            <summary>
            Sets the number of statuses to wait for from the stream before invoking the callback method
            </summary>
            <param name="instance"></param>
            <param name="resultsPerCallback">The number of results to acquire from the stream between callback invocations</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterListsStatuses,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterListsStatuses,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterListsStatuses,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterListsStatuses,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterListsStatuses,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterListsStatuses,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpPost(TweetSharp.Twitter.Fluent.ITwitterFriendshipsDestroy)">
            <summary>
            Use the POST verb to perform this action
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpDelete(TweetSharp.Twitter.Fluent.ITwitterFriendshipsDestroy)">
            <summary>
            Use the DELETE verb to perform this action
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.DelimitedBy(TweetSharp.Twitter.Fluent.ITwitterStreamingRetweet,System.Int32)">
            <summary>
            Indicates that statuses should be delimited in the stream. 
            Statuses are represented by a length in bytes, a newline, and the status text that is exactly 'length' bytes.
            </summary>
            <param name="instance"></param>
            <param name="length">length in bytes</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds)">
            <summary>
            Gets the default cursor used to return the first page of friend or follower ids
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of friend or follower ids
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of friend/follower ids to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.IsFriendsWith(TweetSharp.Twitter.Fluent.ITwitterFriendshipsExists,System.Int32)">
            <summary>
            Requests verification that the authenticated user follows the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">the id of the user whose followee status is being queried</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.IsFriendsWith(TweetSharp.Twitter.Fluent.ITwitterFriendshipsExists,System.Int64)">
            <summary>
            Requests verification that the authenticated user follows the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">the id of the user whose followee status is being queried</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.IsFriendsWith(TweetSharp.Twitter.Fluent.ITwitterFriendshipsExists,System.String)">
            <summary>
            Requests verification that the authenticated user follows the specified user
            </summary>
            <param name="instance"></param>
            <param name="screenName">the screen name of the user whose followee status is being queried</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterFriendshipsIncoming)">
            <summary>
            Gets the default cursor used to return the first page of pending follower ids
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterFriendshipsIncoming,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of pending follower ids
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of pending follower ids to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithBacklog(TweetSharp.Twitter.Fluent.ITwitterStreamingFirehose,System.Int32)">
            <summary>
            Requests a backlog of tweets before streaming live.
            Use a value between -150,000 and 150,000.
            If a negative value is passed, the stream will close after the backlog is sent.
            Note: You must have elevated access (greater than "default") to use this parameter.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Streaming-API-Documentation#count"/>
            <param name="instance">The query chain.</param>
            <param name="count">The number of previous statuses to backlog.</param>
            <returns>The query chain.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithBacklog(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,System.Int32)">
            <summary>
            Requests a backlog of tweets before streaming live.
            Use a value between -150,000 and 150,000.
            If a negative value is passed, the stream will close after the backlog is sent.
            Note: You must have elevated access (greater than "default") to use this parameter.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Streaming-API-Documentation#count"/>
            <param name="instance">The query chain.</param>
            <param name="count">The number of previous statuses to backlog.</param>
            <returns>The query chain.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InReplyToStatus(TweetSharp.Twitter.Fluent.ITwitterStatusUpdate,System.Int32)">
            <summary>
            Sets the ID of the tweet that this status is in reply to
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The id of the tweet that this status is in reply to.</param>
            <returns>the instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InReplyToStatus(TweetSharp.Twitter.Fluent.ITwitterStatusUpdate,System.Int64)">
            <summary>
            Sets the ID of the tweet that this status is in reply to
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The id of the tweet that this status is in reply to.</param>
            <returns>the instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InReplyToStatus(TweetSharp.Twitter.Fluent.ITwitterStatusUpdate,TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Sets the ID of the tweet that this status is in reply to
            </summary>
            <param name="instance">The instance.</param>
            <param name="status">The tweet that this status is in reply to.</param>
            <returns>the instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.PostPhoto(TweetSharp.Twitter.Fluent.ITwitterPhotos,System.String)">
            <summary>
            Posts a photo inline to TwitPic during a request before making an API call to Twitter.
            This method should only be used with updating status, retweeting, or sending direct messages,
            as the new photo's URL is injected in the outgoing message; otherwise, the photo is posted but 
            the URL is lost.
            </summary>
            <param name="instance">The current query expression</param>
            <param name="path">A path to the image</param>
            <returns>The current query expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.PostPhoto(TweetSharp.Twitter.Fluent.ITwitterPhotos,System.String,TweetSharp.Twitter.Fluent.SendPhotoServiceProvider)">
            <summary>
            Posts a photo inline during a request to a given provider, before making an API call to Twitter.
            This method should only be used with updating status, retweeting, or sending direct messages,
            as the new photo's URL is injected in the outgoing message; otherwise, the photo is posted but 
            the URL is lost.
            </summary>
            <param name="instance">The current query expression</param>
            <param name="path">A path to the image</param>
            <param name="provider">A photo posting service provider</param>
            <returns>The current query expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterStreamingRetweet,System.TimeSpan)">
            <summary>
            Sets the amount of time to listen to the retweet stream for
            </summary>
            <param name="instance"></param>
            <param name="duration">The duration of the streaming operation</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterStreamingRetweet,System.Int32)">
            <summary>
            Sets the number of statuses to wait for from the stream before invoking the callback method
            </summary>
            <param name="instance"></param>
            <param name="resultsPerCallback">The number of results to acquire from the stream between callback invocations</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweets,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweets,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweets,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweets,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the high-water mark for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterRetweets,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterRetweets,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">the number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,System.TimeSpan)">
            <summary>
            Sets the amount of time to listen to the filter stream for
            </summary>
            <param name="instance"></param>
            <param name="duration">The duration of the streaming operation</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,System.Int32)">
            <summary>
            Sets the number of statuses to wait for from the stream before invoking the callback method
            </summary>
            <param name="instance"></param>
            <param name="resultsPerCallback">The number of results to acquire from the stream between callback invocations</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InLanguage(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets in a given language.
            Uses the two-letter ISO code, i.e. "en" to represent the language.
            </summary>
            <param name="instance"></param>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InLanguage(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Globalization.CultureInfo)">
            <summary>
            Searches for tweets in a given language. 
            Uses the two-letter ISO code, i.e. "en" to represent the language.
            Uses the given CultureInfo to locate a two-letter ISO code for the language.
            </summary>
            <param name="instance"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InLocale(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets from a given language. For client searches.
            Uses the two-letter ISO code, i.e. "en" to represent the language.
            Currently only "ja" is effective.
            </summary>
            <param name="instance"></param>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InLocale(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Globalization.CultureInfo)">
            <summary>
            Indicates the search query phrase itself is in a given language.
            Uses the two-letter ISO code, i.e. "en" to represent the language.
            Currently only "ja" is effective.
            </summary>
            <param name="instance"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Int32)">
            <summary>
            Specifies the number of tweets to return per page result.
            </summary>
            <param name="instance"></param>
            <param name="tweetsPerPage"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Int32)">
            <summary>
            Specifies the page of tweets to return. Omitting this expression is equivalent to
            requesting the first page. The number of tweets per page is either a Twitter default,
            or the value provided using <seealso cref="!:Take(TweetSharp.Fluent.ITwitterSearchQuery,int)"/>.
            </summary>
            <param name="instance"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Int32)">
            <summary>
            Returns only tweets since the last status ID.
            </summary>
            <param name="instance"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Int64)">
            <summary>
            Returns only tweets since the last status ID.
            </summary>
            <param name="instance"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Within(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Double)">
            <summary>
            Searches tweets within a given mile radius. This method must be used with the
            <seealso cref="M:TweetSharp.Twitter.Fluent.Extensions.Of(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Double,System.Double)"/> expression to provide a complete
            command. This will likely change with evolution of the Twitter API.
            </summary>
            <param name="instance"></param>
            <param name="miles"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.DateTime)">
            <summary>
            Returns only tweets that fall on or after the given date. Use the convenient
            extension methods provided for spanning time, i.e.
            <example>
                .Since(10.Days.Ago())
            </example>
            </summary>
            <param name="instance"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.SinceUntil(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.DateTime)">
            <summary>
            Returns only tweets that fall on or before a given date. Use the convenient
            extension methods provided for spanning time, i.e.
            <example>
                .SinceUntil(30.Minutes.Ago())
            </example>
            </summary>
            <param name="instance"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Of(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Double,System.Double)">
            <summary>
            Use this method combined with <code>Within(double miles)</code> to search areas around geo locations
            </summary>
            <param name="instance"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Of(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Use this method combined with <code>Within(double miles)</code> to search areas around geo locations
            </summary>
            <param name="instance"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithResultType(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,TweetSharp.Twitter.Fluent.SearchResultType)">
            <summary>
            Use this method to designate what type of search results are desired with a query.
            </summary>
            <param name="instance"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterUsersSearch,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="pageNumber">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Page(TweetSharp.Twitter.Fluent.ITwitterUsersSearch,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="pageNumber">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterUsersSearch,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="pageCount">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Count(TweetSharp.Twitter.Fluent.ITwitterUsersSearch,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="pageCount">the number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterListsSubscriptions)">
            <summary>
            Gets the default cursor used to return the first page of results
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterListsSubscriptions,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of results
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of results to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserFollowers,System.String)">
            <summary>
            Gets the followers for the specified user 
            </summary>
            <param name="instance"></param>
            <param name="screenName">Screen name of the user for whom to get followers</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserFollowers,System.Int32)">
            <summary>
            Gets the followers for the specified user 
            </summary>
            <param name="instance"></param>
            <param name="id">Id of the user for whom to get followers</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserFollowers,System.Int64)">
            <summary>
            Gets the followers for the specified user 
            </summary>
            <param name="instance"></param>
            <param name="id">Id of the user for whom to get followers</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterBlocksList,System.Int32)">
            <summary>
            Requests a specific page of ids when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterFriendshipsOutgoing)">
            <summary>
            Gets the default cursor used to return the first page of pending friend ids
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterFriendshipsOutgoing,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of pending friend ids
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of pending friend ids to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterListsMemberships)">
            <summary>
            Gets the default cursor used to return the first page of results
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterListsMemberships,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of results
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of results to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithNotifications(TweetSharp.Twitter.Fluent.ITwitterFriendshipsCreate)">
            <summary>
            Newly followed user should be added to the notifications list as well
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithoutNotifications(TweetSharp.Twitter.Fluent.ITwitterFriendshipsCreate)">
            <summary>
            Newly followed user should not be added to the notifications list as well
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpPost(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesDestroy)">
            <summary>
            Uses the HTTP POST verb to perform the action
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpDelete(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesDestroy)">
            <summary>
            Uses the HTTP DELETE verb to perform the action
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterUserFollowers)">
            <summary>
            Gets the default cursor used to return the first page of followers
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterUserFollowers,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of followers 
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of friend/follower ids to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpPost(TweetSharp.Twitter.Fluent.ITwitterStatusDestroy)">
            <summary>
            Specifies that the expression query should be sent as an HTTP POST.
            </summary>
            <param name="instance">The current expression node</param>
            <returns>The current expression node</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpDelete(TweetSharp.Twitter.Fluent.ITwitterStatusDestroy)">
            <summary>
            Specifies that the expression query should be sent as an HTTP DELETE.
            </summary>
            <param name="instance">The current expression node</param>
            <returns>The current expression node</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterListsSubscribers)">
            <summary>
            Gets the default cursor used to return the first page of results
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterListsSubscribers,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of results
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of results to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterStreamingSample,System.TimeSpan)">
            <summary>
            Sets the amount of time to listen to the sampling stream for
            </summary>
            <param name="instance"></param>
            <param name="duration">The duration of the streaming operation</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterStreamingSample,System.Int32)">
            <summary>
            Sets the number of statuses to wait for from the stream before invoking the callback method
            </summary>
            <param name="instance"></param>
            <param name="resultsPerCallback">The number of results to acquire from the stream between callback invocations</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterListTimeline,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterListTimeline,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterListTimeline,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterListTimeline,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">id of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterListTimeline,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterListTimeline,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesDestroy">
            <summary>
            Node in the fluent expression tree for deleting saved searches
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsIsMember">
            <summary>
            Fluent twitter node for the 'is a member of list' endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterHelp">
            <summary>
            Node in the fluent expression tree for accessing Twitter's Help APIs
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterHelpDowntimeSchedule">
            <summary>
            Node in the fluent expression tree for accessing the APIs that provide updates about planned Twitter Downtime
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication">
            <summary>
            Twitter authentication details interface
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountVerifyCredentials">
            <summary>
            Fluent twitter node for the verify credentials endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileBackgroundImage">
            <summary>
            Fluent twitter node for the (account) update profile background image endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsUsers(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterUser"/> collection.
            instance. If this method is not successful, null is returned.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns>An user collection instance, or null if the input cannot cast to a user collection</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsUser(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterUser"/>
            instance. If this method is not successful, null is returned.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns>A user instance, or null if the input cannot cast to a user</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsList(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterList"/>
            instance. If this method is not successful, null is returned.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns>A user instance, or null if the input cannot cast to a list</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsLists(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterList"/> collection
            instance. If this method is not successful, null is returned.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns>A status collection instance, or null if the input cannot cast to a list collection</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsStatuses(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> collection
            instance. If this method is not successful, null is returned.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns>A status collection instance, or null if the input cannot cast to a status collection</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsSavedSearches(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterSavedSearch"/> collection
            instance. If this method is not successful, null is returned.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns>A saved search collection instance, or null if the input cannot cast to a saved search collection</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsError(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterError"/>
            instance. If this method is not successful, null is returned.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns>An error instance, or null if the input cannot cast to an error</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsSearchResult(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterSearchResult"/>
            instance. If this method is not successful, null is returned.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns>A search result instance, or null if the input cannot cast to a search result</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsSearchTrends(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterSearchTrends"/>
            instance. If this method is not successful, null is returned.
            </summary>
            <param name="result">The JSON input to convert</param>
            <returns>A search result instance, or null if the input cannot cast to a search result</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsIds(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="!:List"/>
            instance. If this method is not successful, an empty list is returned.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns>An Id list instance, or an emppty list if the input cannot cast to a list of Ids</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.As``1(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into an arbitrary class instance. 
            If this method is not successful, null is returned.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns>An T instance, or null if the input cannot cast to T</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsToken(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast a string response into an <see cref="T:TweetSharp.Model.OAuthToken"/>.
            If unsuccessful, null is returned.
            </summary>
            <param name="result">The XML or JSON result to convert</param>
            <returns>A token instance, or null if the result cannot cast to a token pair.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsNextCursor(TweetSharp.Twitter.Model.TwitterResult)">
            This method attempts to cast an XML or JSON string into an <see cref="T:System.Int64"/> to be used with the paging of friend/follower ids. 
            If this method is not successful, 0 is returned.
            <param name="result">The XML or JSON input to convert</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsPreviousCursor(TweetSharp.Twitter.Model.TwitterResult)">
            This method attempts to cast an XML or JSON string into an <see cref="T:System.Int64"/> to be used with the paging of friend/follower ids. 
            If this method is not successful, 0 is returned.
            <param name="result">The XML or JSON input to convert</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.IsWithin(TweetSharp.Twitter.Model.TwitterGeoLocation,System.Double,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Determines whether the specified source is within range of another.
            </summary>
            <param name="source">The source.</param>
            <param name="miles">The miles.</param>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if the specified source is within; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TweetSharp.TwitterException">
            <summary>
            An exception raised when an error is received from the Twitter API
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Service.TwitterService">
            <summary>
            This service provides a simple API layer for TweetSharp that hides
            serialization details and uses the most efficient API configuration.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweets(System.String)">
            <summary>
            
            </summary>
            <param name="phrase"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchCurrentTrends">
            <summary>
            Returns the current top 10 trending topics on Twitter.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchDailyTrends">
            <summary>
            Returns the top 20 trending topics for each hour in a given day.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchWeeklyTrends">
            <summary>
            Returns the top 30 trending topics for each day in a given week.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.OnStreamResult(TweetSharp.Twitter.Service.TwitterStreamResultEventArgs)">
            <summary>
            Raises the <see cref="E:TweetSharp.Twitter.Service.TwitterService.StreamResult"/> event.
            </summary>
            <param name="args">The <see cref="T:TweetSharp.Twitter.Service.TwitterStreamResultEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.#ctor(TweetSharp.IClientInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Service.TwitterService"/> class.
            </summary>
            <param name="info">The client info.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Service.TwitterService"/> class.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.CacheWith(Hammock.Caching.ICache)">
            <summary>
            Delegates caching to the provided <see cref="T:Hammock.Caching.ICache"/> instance.
            </summary>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.CacheFor(System.TimeSpan)">
            <summary>
            Caches all following API calls using the current caching scheme
            for a specified length of time. 
            Cache keys are scoped to the authenticating user and the API URI.
            </summary>
            <param name="length">The length of time to cache individual queries for until they are invalid.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.CacheForInactivityOf(System.TimeSpan)">
            <summary>
            Caches all following API calls using the current caching scheme
            for a specified length of inactive time. Inactive time corresponds
            to the amount of time passed without attempts to access or update
            the cache key.
            Cache keys are scoped to the authenticating user and the API URI.
            </summary>
            <param name="length">The length of inactivity required to invalid individual cached queries.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.RetryOn(TweetSharp.Twitter.Fluent.RetryOn,System.Int32)">
            <summary>
            Sets the retry policy for API requests based on 
            <see cref="M:TweetSharp.Twitter.Service.TwitterService.RetryOn(TweetSharp.Twitter.Fluent.RetryOn,System.Int32)"/> condition flags and a maximum number
            of retry attempts.
            </summary>
            <param name="conditions">The conditions.</param>
            <param name="maxRetries">The max retries.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.TimeoutAfter(System.TimeSpan)">
            <summary>
            Sets a duration before timing out an API request
            or Stream API read operation.
            </summary>
            <param name="duration">The duration before timing out.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AuthenticateAs(System.String,System.String)">
            <summary>
            Authenticates the service using a username and password.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AuthenticateWith(System.String,System.String)">
            <summary>
            Authenticates the service using an OAuth token and secret.
            </summary>
            <param name="token">The token.</param>
            <param name="tokenSecret">The token secret.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnPublicTimeline">
            <summary>
            Returns the latest 20 tweets from Twitter's public timeline.
            This method is cached by Twitter for 60 seconds.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-public_timeline"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnHomeTimeline">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnFriendsTimeline">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnUserTimeline">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsMentioningMe">
            <summary>
            Lists the first 20 tweets mentioning the authenticated user.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsMentioningMe(System.Int32)">
            <summary>
            Lists the first page of tweets mentioning the authenticated user.
            Each page has 20 tweets.
            </summary>
            <param name="count">The number of tweets to return, up to 200.</param>
            <returns></returns>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsMentioningMe(System.Int32,System.Int32)">
            <summary>
            Lists the specified page of tweets mentioning the authenticated user.
            Each page has the specified number of tweets, up to 200.
            </summary>
            <param name="page">The page of tweets to return, relative to the tweet count.</param>
            <param name="count">The number of tweets to return, up to 200.</param>
            <returns></returns>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsByMe">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsToMe">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsOfMyTweets">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetTweet(System.Int64)">
            <summary>
            Gets the tweet with the specified ID.
            </summary>
            <param name="id">The tweet ID.</param>
            <returns></returns>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0show"></seealso>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetTweet(System.Int32)">
            <summary>
            Gets the tweet with the specified ID.
            </summary>
            <param name="id">The tweet ID.</param>
            <returns></returns>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0show"></seealso>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendTweet(System.String)">
            <summary>
            Tweets the specified text from the authenticated user.
            A tweet with text identical to the authenticating user's 
            current status will be ignored.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendTweet(System.String,System.Double,System.Double)">
            <summary>
            Tweets the specified text from the authenticated user.
            Includes provided geo-tagging data.
            A tweet with text identical to the authenticating user's 
            current status will be ignored.
            </summary>
            <param name="text">The text.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendTweet(System.String,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Tweets the specified text from the authenticated user.
            Includes the provided <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/> data.
            A tweet with text identical to the authenticating user's 
            current status will be ignored.
            </summary>
            <param name="text">The text.</param>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendTweet(System.String,System.Int64)">
            <summary>
            Tweets the specified text from the authenticated user.
            You must mention a user using @username in your message
            if you intend your tweet to include a reference to <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.InReplyToStatusId"/>.
            A tweet with text identical to the authenticating user's 
            current status will be ignored.
            </summary>
            <param name="text"></param>
            <param name="inReplyToStatusId"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendTweet(System.String,System.Int64,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Tweets the specified text from the authenticated user.
            Includes the provided <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/> data.
            You must mention a user using @username in your message
            if you intend your tweet to include a reference to <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.InReplyToStatusId"/>.
            A tweet with text identical to the authenticating user's
            current status will be ignored.
            </summary>
            <param name="text">The text.</param>
            <param name="inReplyToStatusId">The ID of the tweet this tweet is replying to.</param>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteTweet(TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Deletes a tweet. The tweet must be authored by the authenticated user.
            </summary>
            <param name="status">The tweet to delete.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteTweet(System.Int64)">
            <summary>
            Deletes a tweet. The tweet must be authored by the authenticated user.
            </summary>
            <param name="id">The tweet ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteTweet(System.Int32)">
            <summary>
            Deletes a tweet. The tweet must be authored by the authenticated user.
            </summary>
            <param name="id">The tweet ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendRetweet(System.Int64)">
            <summary>
            
            </summary>
            <param name="statusId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweet"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFriends">
            <summary>
            Gets up to the first 100 friends for the authenticating user.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFriends(System.Int64)">
            <summary>
            Lists the friends of the authenticated user by cursor value.
            This is useful for paging through large numbers of friends.
            </summary>
            <param name="cursor">The cursor.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFollowers">
            <summary>
            Gets up to the first 100 friends for the authenticating user.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFollowers(System.Int64)">
            <summary>
            Lists the friends of the authenticated user by cursor value.
            This is useful for paging through large numbers of friends.
            </summary>
            <param name="cursor">The cursor value for paging.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetUserProfile">
            <summary>
            Gets the authenticated user's profile.
            This is achieved with a call to verify credentials.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0verify_credentials"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetUserProfileFor(System.String)">
            <summary>
            Gets the specified user screen name's profile.
            </summary>
            <param name="screenName">The user's screen name.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users%C2%A0show"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetUserProfileFor(System.Int64)">
            <summary>
            Gets the specified user ID's profile.
            </summary>
            <param name="id">The user ID.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users%C2%A0show"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForUser(System.String)">
            <summary>
            Searches for a Twitter user given a query.
            This search is the same as Twitter's web-based People Search.
            This search yields a maximum of 1000 results in total.
            </summary>
            <param name="query">The search query.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users-search"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForUser(System.String,System.Int32)">
            <summary>
            Searches for a Twitter user given a query.
            This search is the same as Twitter's web-based People Search.
            This search yields a maximum of 1000 results in total.
            </summary>
            <param name="query">The search query.</param>
            <param name="page">The page of user results to get for this query.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForUser(System.String,System.Int32,System.Int32)">
            <summary>
            Searches for a Twitter user given a query.
            This search is the same as Twitter's web-based People Search.
            This search yields a maximum of 1000 results in total.
            </summary>
            <param name="query">The search query.</param>
            <param name="page">The page of user results to get for this query.</param>
            <param name="count">The number of results to return on this page.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetUserProfileFor(System.Int32)">
            <summary>
            Gets the specified user ID's profile.
            </summary>
            <param name="id">The user ID.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users%C2%A0show"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListUserProfilesFor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the user profiles of up to 20 of the specified user screen names.
            </summary>
            <param name="screenNames">The screen names to retrieve.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method:-users-lookup"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListUserProfilesFor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the user profiles of up to 20 of the specified user IDs.
            </summary>
            <param name="userIds">The user IDs to retrieve.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method:-users-lookup"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListUserProfilesFor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the user profiles of up to 20 of the specified user screen names and IDs.
            </summary>
            <param name="screenNames">The screen names to retrieve.</param>
            <param name="userIds">The user IDs to retrieve.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method:-users-lookup"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.CreatePublicList(System.String,System.String)">
            <summary>
            Creates a new list for the authenticated user. Accounts are limited to 20 lists. 
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-lists"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateList(TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-lists-id"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListsFor(System.String)">
            <summary>
            List the lists of the specified user. 
            Private lists are included if the authenticated users is the same as the 
            user whose lists are being returned.
            </summary>
            <param name="listOwnerScreenName">The screen name of the list owner</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-lists"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListsFor(System.String,System.Int64)">
            <summary>
            List the lists of the specified user. 
            Private lists are included if the authenticated users is the same as the 
            user whose lists are being returned.
            </summary>
            <param name="listOwnerScreenName">The screen name of the list owner</param>
            <param name="cursor">The cursor location in the master list</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-lists"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetList(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="listOwnerScreenName"></param>
            <param name="listId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-id"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteList(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="listOwnerScreenName"></param>
            <param name="listId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-DELETE-list-id"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimeline(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="listOwnerScreenName"></param>
            <param name="listId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListMembershipsFor(System.String)">
            <summary>
            List the lists the specified user has been added to.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-memberships"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListSubscriptionsFor(System.String)">
            <summary>
            List the lists the specified user follows.
            </summary>
            <param name="listSubscriberScreenName"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscriptions"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListMembers(System.String,System.Int32)">
            <summary>
            Returns the members of the specified list.
            </summary>
            <param name="listOwnerScreenName"></param>
            <param name="listId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-members"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AddMemberToList(System.String,System.Int64,System.Int32)">
            <summary>
            Add a member to a list. The authenticated user must own the list to add members to it. 
            Lists are limited to 500 members.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-list-members"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.RemoveMemberFromList(System.String,System.Int64,System.Int32)">
            <summary>
            Removes the specified member from the list. 
            The authenticated user must be the list's owner to remove members from the list.
            </summary>
            <param name="listOwnerScreenName"></param>
            <param name="listId"></param>
            <param name="userId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-DELETE-list-members"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyListMember(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="listOwnerScreenName"></param>
            <param name="listId"></param>
            <param name="userId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscribers-id"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListFollowers(System.String,System.Int32)">
            <summary>
            Returns the subscribers of the specified list.
            </summary>
            <param name="listOwnerScreenName"></param>
            <param name="listId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscribers"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FollowList(System.String,System.Int64)">
            <summary>
            Subscribes the authenticated user to the specified list.
            </summary>
            <param name="listOwnerScreenName">The screen name of the list owner.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-list-subscribers"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnfollowList(System.String,System.Int64)">
            <summary>
            Unsubscribes the authenticated user from the specified list.
            </summary>
            <param name="listOwnerScreenName">The screen name of the list owner.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-DELETE-list-subscribers"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyListFollower(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="listOwnerScreenName"></param>
            <param name="listId"></param>
            <param name="userId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscribers-id"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesReceived">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteDirectMessage(System.Int64)">
            <summary>
            Deletes the direct message. The direct message must be authored by the authenticated user.
            </summary>
            <param name="messageId">The message ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteDirectMessage(System.Int32)">
            <summary>
            Deletes the direct message. The direct message must be authored by the authenticated user.
            </summary>
            <param name="messageId">The message ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendDirectMessage(System.Int32,System.String)">
            <summary>
            Sends a direct message from the authenticated user.
            </summary>
            <param name="recipientUserId">The recipient user ID.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendDirectMessage(System.String,System.String)">
            <summary>
            Sends a direct message from the authenticated user.
            </summary>
            <param name="recipientScreenName">Name of the recipient screen.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FollowUser(System.Int32)">
            <summary>
            Follows the specified user by ID.
            </summary>
            <param name="userId">The user's ID.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0create"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetIncomingFriendRequests">
            <summary>
            Gets the list of user IDs for users who have submitted follow requests which have not been acted on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetIncomingFriendRequests(System.Int64)">
            <summary>
            Gets a page of userids for users who have submitted follow requests which have not been acted on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetOutgoingFriendRequests">
            <summary>
            Gets the list of userids to whom the authenticating user has submitted follow requests which have not been acted on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetOutgoingFriendRequests(System.Int64)">
            <summary>
            Gets a page of userids to whom the authenticating user has submitted follow requests which have not been acted on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnfollowUser(System.String)">
            <summary>
            
            </summary>
            <param name="screenName"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0destroy"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyFriendship(System.Int32)">
            <summary>
            Returns an indication whether the authenticating user follows the specified user.
            </summary>
            <param name="followedUserId">The user ID.</param>
            <returns></returns>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-exists"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyFriendship(System.Int32,System.Int32)">
            <summary>
            Returns an indication whether the first specified user follows the other specified user.
            </summary>
            <param name="followingUserId">The following user ID.</param>
            <param name="followedUserId">The followed user ID.</param>
            <returns></returns>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-exists"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetFriendshipInfo(System.String,System.String)">
            <summary>
            Returns detailed information about the relationship between two users.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-show"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetFriendshipInfo(System.Int32,System.Int32)">
            <summary>
            Returns detailed information about the relationship between two users.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-show"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFriendIds">
            <summary>
            Lists the authenticating user's friends' IDs.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFriendIdsFor(System.Int32)">
            <summary>
            Lists the specified user's friends' IDs.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFollowerIds">
            <summary>
            Lists the authenticating user's followers' IDs.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFollowerIdsFor(System.Int32)">
            <summary>
            Lists the specified user's followers' IDs.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyCredentials">
            <summary>
            Verifies the credentials provided with the service call to ensure a user 
            will authenticate against the API.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0verify_credentials"></seealso>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetRateLimitStatus">
            <summary>
            Gets the <see cref="T:TweetSharp.Twitter.Model.TwitterRateLimitStatus"/> for the authenticated user.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0rate_limit_status"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.EndSession">
            <summary>
            Ends the session of the authenticating user, returning a null cookie.  
            Use this method to sign users out of client-facing applications like widgets.
            If this method returns a null <see cref="T:TweetSharp.Twitter.Model.TwitterError"/> instance, 
            the session was located and ended successfully.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0end_session"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateDeliveryDevice(TweetSharp.Twitter.Model.TwitterDeliveryDevice)">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_delivery_device"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateProfileColors(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_colors"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateProfileImage(System.String)">
            <summary>
            Updates the authenticating user's profile image. 
            This method expects raw multipart data, not a URL to an image.
            Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size.  
            Images with width larger than 500 pixels will be scaled down.
            </summary>
            <param name="path"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_image"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateProfileBackgroundImage(System.String)">
            <summary>
            Updates the authenticating user's profile background image.  
            This method expects raw multipart data, not a URL to an image.
            Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size.  
            Images with width larger than 2048 pixels will be scaled down.
            </summary>
            <param name="path"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_background_image"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateProfile(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="email"></param>
            <param name="url"></param>
            <param name="location"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFavoriteTweets">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FavoriteTweet(System.Int64)">
            <summary>
            
            </summary>
            <param name="statusId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites%C2%A0create"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnfavoriteTweet(System.Int64)">
            <summary>
            
            </summary>
            <param name="statusId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites%C2%A0destroy"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FollowUserNotifications(TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Follows the specified user.
            </summary>
            <param name="user">The user.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0follow"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FollowUserNotifications(System.String)">
            <summary>
            Follows the specified user by screen name.
            </summary>
            <param name="screenName">The user's screen name.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0follow"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnfollowUserNotifications(System.Int32)">
            <summary>
            Disables notifications for updates from the specified user to the authenticating user.  
            Returns the specified user when successful.
            </summary>
            <param name="userId">The user ID to stop following notifications for.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0leave"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnblockUser(System.Int32)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks%C2%A0destroy"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyBlocking(System.Int32)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter+REST+API+Method%3A-blocks-exists"/> 
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListBlockedUsers">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter+REST+API+Method%3A-blocks-blocking"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListBlockedUserIds">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking-ids"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ReportSpamFrom(System.String)">
            <summary>
            Reports the screen name as a spammer.
            </summary>
            <param name="userScreenName">The spammer's screen name.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-report_spam"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ReportSpamFrom(System.Int32)">
            <summary>
            Reports the user ID as a spammer.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-report_spam"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListSavedSearches">
            <summary>
            Lists the saved searches for the authenticating user.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetSavedSearch(System.Int32)">
            <summary>
            Gets the saved search.
            </summary> 
            <param name="searchId">The search id.</param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches-show"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.CreateSavedSearch(System.String)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches-create"/> 
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteSavedSearch(System.Int32)">
            <summary>
            
            </summary>
            <param name="searchId"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches-destroy"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetRequestToken">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-request_token"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetRequestToken(System.String,System.String)">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-request_token"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AuthorizeDesktop(TweetSharp.Model.OAuthToken)">
            <summary>
            
            </summary>
            <param name="requestToken"></param>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-authorize"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetAccessToken(TweetSharp.Model.OAuthToken)">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-access_token"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchLocalTrends(System.Int64)">
            <summary>
            
            </summary>
            <param name="woeId"></param>
            <seealso cref="!:http://twitterapi.pbworks.com/Twitter-REST-API-Method%3A-trends-location"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.IsTwitterDown">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-help%C2%A0test"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.IsTwitterUp">
            <summary>
            
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-help%C2%A0test"/>
            <returns></returns>
        </member>
        <member name="E:TweetSharp.Twitter.Service.TwitterService.StreamResult">
            <summary>
            Occurs when a streaming API call received statuses for processing.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterService.RateLimitStatus">
            <summary>
            Gets the <see cref="T:TweetSharp.Twitter.Model.TwitterRateLimitStatus"/> of the last call made to the Twitter API.
            If the rate limit status was indeterminate on the last call, this is null.
            </summary>
            <value>The rate limit status based on the last successful API call.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterService.Result">
            <summary>
            Gets the <see cref="T:TweetSharp.Twitter.Model.TwitterResult"/> of the last call made to the Twitter API.
            </summary>
            <value>The result based on the last API call.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterService.Error">
            <summary>
            Gets the <see cref="T:TweetSharp.Twitter.Model.TwitterError"/> returned from the last service call.
            If the last call was successful, this property is null.
            </summary>
            <value>The error.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterTrendsLocation">
            <summary>
            Node in the fluent expression tree for accessing Twitter Search location-based trends APIs
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStream">
            <summary>
            Fluent twitter node for the streaming api endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUserTimeline">
            <summary>
            Node in the fluent expression tree for accessing another user's timeline
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeAll">
            <summary>
            Inteface for nodes that can return all supported formats
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeSyndicates">
            <summary>
            Interface for nodes that can return either RSS or Atom
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeRss">
            <summary>
            Interface for nodes that return results as RSS
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNodeRss.AsRss">
            <summary>
            Gets the results formatted as RSS
            </summary>
            <returns>the RSS formatted results</returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterPublicTimeline">
            <summary>
            Fluent twitter node for the public timeline endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesList">
            <summary>
            Fluent twitter node for the list saved searches endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterNotifications">
            <summary>
            Fluent twitter node for the notifications endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsSubscribers">
            <summary>
            Node in the fluent expression tree for accessing Twitter APIs to show list subscribers
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsSubscribers.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsSubscribers"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendships">
            <summary>
            Fluent twitter node for the friendships endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsCreate">
            <summary>
            Fluent twitter node for the create frendship endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFavorites">
            <summary>
            Fluent twitter node for the favorites endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountUpdateLocation">
            <summary>
            Fluent twitter node for the (account) update location endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountRateLimitStatus">
            <summary>
            Interface for nodes that query the rate limit status
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions">
            <summary>
            Fluent interface methods for the Account endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.VerifyCredentials(TweetSharp.Twitter.Fluent.ITwitterAccount)">
            <summary>
            Verifies that the provided credentials are valid
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.EndSession(TweetSharp.Twitter.Fluent.ITwitterAccount)">
            <summary>
            Causes Twitter to return a null cookie. Generally not needed for clients. 
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.UpdateDeliveryDeviceTo(TweetSharp.Twitter.Fluent.ITwitterAccount,TweetSharp.Twitter.Model.TwitterDeliveryDevice)">
            <summary>
            Changes the notification delivery device settings for the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="device">A <see cref="T:TweetSharp.Twitter.Model.TwitterDeliveryDevice"/> describing the device</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.UpdateProfileColors(TweetSharp.Twitter.Fluent.ITwitterAccount)">
            <summary>
            Updates the website profile colors for the authenticating user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.UpdateProfileImage(TweetSharp.Twitter.Fluent.ITwitterAccount,System.String)">
            <summary>
            Changes the profile image (avatar) for the authenticating uer
            </summary>
            <param name="instance"></param>
            <param name="path">Path to the new avatar image</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.UpdateProfileBackgroundImage(TweetSharp.Twitter.Fluent.ITwitterAccount,System.String)">
            <summary>
            Changes the website background image for the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="path">Path to the new background image file</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.GetRateLimitStatus(TweetSharp.Twitter.Fluent.ITwitterAccount)">
            <summary>
            Gets the current rate limiting details for the authenticating user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.UpdateProfile(TweetSharp.Twitter.Fluent.ITwitterAccount)">
            <summary>
            Update profile data for the authenticating user. 
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsIncoming">
            <summary>
            Node in the fluent expression tree for accessing the APIs to show pending follower requests
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Service.TwitterCursorList`1">
            <summary>
            A generic collection that also contains any cursor data necessary for paging
            using Twitter's cursor feature.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUserFriends">
            <summary>
            Fluent twitter node for the user's friends endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStreamingFirehose">
            <summary>
            Fluent twitter node for the streaming api firehose endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStreamingFilter">
            <summary>
            Fluent twitter node for the streaming filter endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSocialGraph">
            <summary>
            Inteface for nodes that query the social graph
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.SocialGraph.Extensions">
            <summary>
            Extension methods for the SocialGraph APIs
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesCreate">
            <summary>
            Fluent twitter node for the saved search creation endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsMemberships">
            <summary>
            Fluent twitter node for the list memberships endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsMemberships.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsMemberships"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterHelpTest">
            <summary>
            Fluent twitter node for the api testing endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsShow">
            <summary>
            Node in the fluent expression tree for accessing the APIs to show follower relationships between users
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsDestroy">
            <summary>
            Node in the fluent expression tree for unfollowing users
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocksExists">
            <summary>
            Fluent twitter node for the block existence checking endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterDateTimeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUsersLookup">
            <summary>
            Fluent twitter node for the user lookup endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUsers">
            <summary>
            Node in the fluent expression tree for accessing Twitter's user related APIs
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.TwitterTrendsExtensions">
            <summary>
            Fluent interface methods for the trends endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterTrendsExtensions.GetAvailable(TweetSharp.Twitter.Fluent.ITwitterTrends)">
            <summary>
            Request the availabe trending topics
            </summary>
            <param name="instance">the instance</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterTrendsExtensions.ByLocation(TweetSharp.Twitter.Fluent.ITwitterTrends,System.Int64)">
            <summary>
            Request the trending topics for a specific location
            </summary>
            <param name="instance">the instance</param>
            <param name="woeId">The Yahoo WhereOnEarth id corresponding to the location to request trends for</param>
            <seealso>http://developer.yahoo.com/geo/geoplanet/"</seealso>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStreamingSample">
            <summary>
            Node in the fluent expression tree for accessing the sampling version of the Twitter Streaming API
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStatusUpdate">
            <summary>
            Fluent Twitter node for the status update endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStatusMentions">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs that return statuses that mention the current user
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterNotificationsLeave">
            <summary>
            Fluent twitter node for the stop notifications enpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsShow">
            <summary>
            Fluent twitter node for the list listing endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.RetryOn">
            <summary>
             Conditions that will cause the query to be retried. Can be combined
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.Never">
            <summary>
            The query should not be retried
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.FailWhale">
            <summary>
            The query should be retried when twitter responsds with the FailWhale page
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.ServiceError">
            <summary>
            The query should be retried with the service responds with a non-success status
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.Timeout">
            <summary>
            The query should be retried when it times out
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.Network">
            <summary>
            The query should be retired when it times out or another network error occurs
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.FailWhaleOrNetwork">
            <summary>
            The query should be retried when it times out, returns a failwhale, or another network error occurs
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.ConnectionClosed">
            <summary>
            The query should be retried when the connection is forcibly closed by the server
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocks">
            <summary>
            Node in the fluent expression tree for accessing Twitter APIs to block and unblock other users
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStatuses">
            <summary>
            Fluent twitter node for the statuses endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs to fetch the Friends timeline
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions">
            <summary>
            Fluent interface methods for dealing with friendship endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Befriend(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32)">
            <summary>
            Follows another user from the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="id">The id of the user to follow</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Befriend(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64)">
            <summary>
            Follows another user from the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="id">The id of the user to follow</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Befriend(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String)">
            <summary>
            Follows another user from the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="screenName">The user name of the user to follow</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Destroy(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32)">
            <summary>
            Unfollows another user from the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="id">The id of the user to unfollow</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Destroy(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64)">
            <summary>
            Unfollows another user from the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="id">The id of the user to unfollow</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Destroy(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String)">
            <summary>
            Unfollows another user from the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="screenName">The user name of the user to unfollow</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Verify(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String)">
            <summary>
            Queries whether or not the authenticating user follows another user
            </summary>
            <param name="instance"></param>
            <param name="screenName">The user name of the user to check for a follower relationship</param>
            <seealso cref="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String)"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Verify(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32)">
            <summary>
            Queries whether or not the authenticating user follows another user
            </summary>
            <param name="instance"></param>
            <param name="id">The id of the user to check for a follower relationship</param>
            <seealso cref="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32)"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Verify(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64)">
            <summary>
            Queries whether or not the authenticating user follows another user
            </summary>
            <param name="instance"></param>
            <param name="id">The id of the user to check for a follower relationship</param>
            <seealso cref="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64)"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64)">
            <summary>
            Gets detailed information about the relationship between the authenticated user and another user
            </summary>
            <param name="instance"></param>
            <param name="targetId">Id of the user to get detailed relationship information about</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32)">
            <summary>
            Gets detailed information about the relationship between the authenticated user and another user
            </summary>
            <param name="instance"></param>
            <param name="targetId">Id of the user to get detailed relationship information about</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String)">
            <summary>
            Gets detailed information about the relationship between the authenticated user and another user
            </summary>
            <param name="instance"></param>
            <param name="targetScreenName">User name of the user to get detailed relationship information about</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String,System.String)">
            <summary>
            Gets detailed information about the relationship between two users
            </summary>
            <param name="instance"></param>
            <param name="sourceScreenName">screen name of the subject user</param>
            <param name="targetScreenName">screen name of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32,System.String)">
            <summary>
            Gets detailed information about the relationship between two users
            </summary>
            <param name="instance"></param>
            <param name="sourceId">id of the subject user</param>
            <param name="targetScreenName">screen name of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64,System.String)">
            <summary>
            Gets detailed information about the relationship between two users
            </summary>
            <param name="instance"></param>
            <param name="sourceId">id of the subject user</param>
            <param name="targetScreenName">screen name of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64,System.Int64)">
            <summary>
            Gets detailed information about the relationship between two users
            </summary>
            <param name="instance"></param>
            <param name="sourceId">id of the subject user</param>
            <param name="targetId">id of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32,System.Int32)">
            <summary>
            Gets detailed information about the relationship between two users
            </summary>
            <param name="instance"></param>
            <param name="sourceId">id of the subject user</param>
            <param name="targetId">id of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String,System.Int32)">
            <summary>
            Gets detailed information about the relationship between two users
            </summary>
            <param name="instance"></param>
            <param name="sourceScreenName">name of the subject user</param>
            <param name="targetId">id of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String,System.Int64)">
            <summary>
            Gets detailed information about the relationship between two users
            </summary>
            <param name="instance"></param>
            <param name="sourceScreenName">name of the subject user</param>
            <param name="targetId">id of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Incoming(TweetSharp.Twitter.Fluent.ITwitterFriendships)">
            <summary>
            Gets a list of userids who have submitted requests to follow the protected account of the authenticating user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Outgoing(TweetSharp.Twitter.Fluent.ITwitterFriendships)">
            <summary>
            Gets a list of userids to whom the authenticated user has submitted requests to follow and which are still pending
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterDirect">
            <summary>
            Node in the fluent expression tree for using user-provided endpoints to access the twitter API. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocksListIds">
            <summary>
            Fluent twitter node for the list blocked user ids endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocksDestroy">
            <summary>
            Fluent twitter node for the block deletion endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileImage">
            <summary>
            Fluent twitter node for the update profile image endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountUpdateDeliveryDevice">
            <summary>
            Fluent twitter node for the (account) update notification delivery device endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountEndSession">
            <summary>
            Node in the fluent expression tree for ending the session
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.Converters.TwitterGeoConverter">
            <summary>
            This converter exists to convert geo-spatial coordinates.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterGeoConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterGeoConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterGeoConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TweetSharp.Twitter.Service.TwitterSearchOptions">
            <summary>
            Options for filtering the Twitter API Filter stream.
            </summary>
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterSearchOptions.Location">
            <summary>
            Returns tweets by users located within a given radius of the given latitude/longitude.  
            The location is preferentially taking from the Geotagging API, 
            but will fall back to their Twitter profile. 
            
            You cannot use the near phrase operator via the API to geocode arbitrary locations 
            but you can use this geocode parameter to search near geocodes directly. 
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterSearchOptions.LocationRadiusMiles">
            <summary>
            Returns tweets by users located within a given radius of the given latitude/longitude.  
            The location is preferentially taking from the Geotagging API, 
            but will fall back to their Twitter profile. 
            
            You cannot use the near phrase operator via the API to geocode arbitrary locations 
            but you can use this geocode parameter to search near geocodes directly. 
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterSearchOptions.LocaleIso">
            <summary>
            Specify the language of the query you are sending (only ja is currently effective). 
            This is intended for language-specific clients and the default should work
            in the majority of cases. 
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/ISO_639-1"/>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterSearchOptions.LanguageIso">
            <summary>
            Restricts tweets to the given language, given by an ISO 639-1 code. 
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/ISO_639-1"/>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterRetweets">
            <summary>
            Fluent twitter node for the retweets endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterNotificationsFollow">
            <summary>
            Fluent twitter node for the add notifications endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsUpdate">
            <summary>
            Fluent twitter node for the lists update endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsMembers">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs that add and remove list members
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsMembers.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsMembers"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsIsSubscriber">
            <summary>
            Node in the fluent expression tree for accessing the lists to which the current user subsribes
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters">
            <summary>
            Parameters for the Twitter Search Api
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchPhrase">
            <summary>
            Gets or sets the phrase to search for
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchFromUser">
            <summary>
            Gets or sets the screenname of a user whose tweets you want to search
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchToUser">
            <summary>
            Gets or sets the screenname of a user to whom search results are in reply to
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchHashTag">
            <summary>
            Gets or sets the hash tag to search for
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchReferences">
            <summary>
            Gets or sets the screenname of a user who is mentioned in the search results
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchNear">
            <summary>
            Gets or sets a place name from near where the search results should originate
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchMiles">
            <summary>
            Gets or sets the number of miles to use as a search radius
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchSince">
            <summary>
            Gets or sets a begin-date from which to limit search results
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchSinceUntil">
            <summary>
            Gets or sets an end-date to which to limit search results
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchDate">
            <summary>
            Gets or sets a specific date to which to limit search results 
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchNegativity">
            <summary>
            Gets or sets a value indicating whether or not to limit search results to those that are negative in tone
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchPositivity">
            <summary>
            Gets or sets a value indicating whether or not to limit search results to those that are positive in tone
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchContainingLinks">
            <summary>
            Gets or sets a value indicating whether or not to limit search results to those that contain links
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchShowUser">
            <summary>
            Gets or sets a value indicating whether or not to prepend &lt;user&gt;: to the search results
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchQuestion">
            <summary>
            Gets or sets a value indicating whether or not to limit search results to those containing a question
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchCurrentTrends">
            <summary>
            Gets or sets a value indicating whether or not to fetch current trends
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchExcludesHashtags">
            <summary>
            Gets or sets a value indicating whether or not to exclude hash-tag trends from the requested trends 
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchDailyTrends">
            <summary>
            Gets or sets a value indicating whether or not to get trends for a specific day
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchWeeklyTrends">
            <summary>
            Gets or sets a value indicating whether or not to get trends for a specific week
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchLanguage">
            <summary>
            Gets or sets a the desired language to which to limit search results
            Uses the two-letter ISO code, i.e. "en" to represent the language.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchLocale">
            <summary>
            Gets or sets the language code indicating what language the search query itself is in. 
            Currently only "ja" is effective.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchGeoLatitude">
            <summary>
            Gets or sets the latitude for location-based searches
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchGeoLongitude">
            <summary>
            Gets or sets the longitude for location-based searches
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchWithoutPhrase">
            <summary>
            Gets or sets a phrase which should not be included in search results. 
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchResultType">
            <summary>
            Gets or sets the result type expected in search results.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions">
            <summary>
            Extension methods for the IFluentTwitter Interface
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.Statuses(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Statuses" (aka. Tweets) subset of the REST API
            </summary>
            <param name="instance">The instance.</param>
            <returns>An ITwitterStatuses instance with methods for dealing with Statuses</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.Users(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Users" subset of the REST API
            </summary>
            <param name="instance">The instance.</param>
            <returns>An ITwitterUsers instance with methods for dealing with Users</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.ReportSpam(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Spam" subset of the REST API
            </summary>
            <param name="instance">The instance.</param>
            <returns>An ITwitterSpam instance with methods for dealing with Spam</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.DirectMessages(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Direct Messages" subset of the REST API
            </summary>
            <param name="instance">The instance.</param>
            <returns>An ITwitterDirectMessages instance with methods for dealing with Direct Messages</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.Friendships(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Friendships" subset of the REST API
            </summary>
            <param name="instance">The instance.</param>
            <returns>An ITwitterFriendships instance with methods for dealing with Friendships</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.SocialGraph(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Social Graph" subset of the REST API
            </summary>
            <param name="instance">The instance.</param>
            <returns>An ITwitterSocialGraph instance with methods for dealing with the Social Graph</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.Account(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Account" subset of the REST API
            </summary>
            <param name="instance">The instance.</param>
            <returns>An ITwitterAccount instance with methods for dealing with Accounts</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.Favorites(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Favorites" subset of the REST API
            </summary>
            <param name="instance">The instance.</param>
            <returns>An ITwitterFavoites instance with methods for dealing with Favorites</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.Notifications(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Notifications" subset of the REST API
            </summary>
            <param name="instance">The instance.</param>
            <returns>An ITwitterNotifications instance with methods for dealing with Notifications</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.Blocking(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Blocking" subset of the REST API
            </summary>
            <param name="instance">The instance.</param>
            <returns>An ITwitterBlocks instance with methods for adding/removing Blocks</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.SavedSearches(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Saved Searches" subset of the REST API
            </summary>
            <param name="instance">The instance.</param>
            <returns>An ITwitterSavedSearches instance with methods for querying the twitter service status</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.Help(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Help" subset of the REST API
            </summary>
            <param name="instance">The instance.</param>
            <returns>An ITwitterHelp instance with methods for querying the twitter service status</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.Search(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the Search API
            </summary>
            <param name="instance">The instance.</param>
            <returns>A ITwitterSearch instance with methods for performing searches</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.Photos(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the Photo Posting features
            </summary>
            <param name="instance">The instance.</param>
            <returns>A <see cref="T:TweetSharp.Twitter.Fluent.ITwitterPhotos"/> instance with methods for performing photo posting</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.Direct(TweetSharp.Twitter.Fluent.IFluentTwitter,System.String)">
            <summary>
            Accesses the raw URL path provided, rather than using a fluent interface.
            This method is meant as a safety mechanism when the Twitter API changes, but
            TweetSharp doesn't currently reflect the change.
            </summary>
            <param name="instance">The instance.</param>
            <param name="urlPath">The raw URL path, i.e. "/users/show/bob.xml"</param>
            <returns>A IFluentTwitterDirect instance with methods for performing searches</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.Lists(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the Twitter Lists features
            </summary>
            <param name="instance">The instance.</param>
            <returns>A <see cref="T:TweetSharp.Twitter.Fluent.ITwitterLists"/> instance with methods for performing list handling</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.CallbackTo(TweetSharp.Twitter.Fluent.IFluentTwitter,TweetSharp.Twitter.Fluent.TwitterWebCallback)">
            <summary>
            Calling this method will establish the asynchronous callback used when the request receives a response.
            </summary>
            <param name="instance">The current location in the fluent expression</param>
            <param name="callback">The callback executed when a request completes in the background</param>
            <returns>The current location in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterExtensions.Expect(TweetSharp.Twitter.Fluent.IFluentTwitter,System.Collections.Generic.IEnumerable{TweetSharp.Model.IModel})">
            <summary>
            Calling this method will enable mocking support, and return the Twitter object graph
            specified when the request is executed. 
            </summary>
            <param name="graph">A graph of objects expected in the response</param>
            <returns>The current location in the fluent expression</returns>
            <param name="instance">The current location in the fluent expression</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived">
            <summary>
            Node in the fluent expression tree for accessing the Twitter received direct messages APIs
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterSearchTrends">
            <summary>
             Collection of <see cref="T:TweetSharp.Twitter.Model.TwitterSearchTrend"/> objects
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchTrends.SearchDate">
            <summary>
             Gets or sets the date and time that the trend began trending
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUsersShow">
            <summary>
            Node in the fluent expression tree for accessing Twitter's APIs to fetch user data. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe">
            <summary>
            Node in the fluent expression tree for accessing Twitter APIs to fetch statuses that were retweeted
            by the current user. 
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsShow.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsShow"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsGet">
            <summary>
            Node in the fluent expression tree for accessing Twitter's lists API to get a user's lists. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterTrendsParameters">
            <summary>
            Parameters for the trends endpoints
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterTrendsParameters.OrderLocation">
            <summary>
            Gets or sets the GeoLocation to use as the OrderBy value
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterTrendsParameters.WoeId">
            <summary>
            Gets or set the WhereOnEarth Id to use as the OrderBy value
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.FluentTwitter">
            <summary>
            This is the main fluent class for building expressions
            bound for the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.Request">
            <summary>
            Makes a sequential call to Twitter to get the results of this query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.CreateRequest(TweetSharp.TwitterClientInfo)">
            <summary>
            Creates a new composable query, using a specified client and a default platform.
            </summary>
            <param name="clientInfo">The client making the request</param>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.CreateRequest">
            <summary>
            Creates a new composable query, using the default client and platform.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.ToString">
            <summary>
            Returns the human-readable query to Twitter representing the current expression.
            If you are storing URLs for sending later, you can use <code>AsUrl()</code> to return
            a URL-encoded string instead.
            </summary>
            <returns>A URL-decoded string representing this expression's query to Twitter</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.AsUrl">
            <summary>
            Builds a URL from the specified fluent expression instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.TweetSharp#Twitter#Fluent#IFluentTwitter#get_Method">
            <summary>
            This is the main fluent class for building expressions
            bound for the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.TweetSharp#Twitter#Fluent#IFluentTwitter#set_Method(Hammock.Web.WebMethod)">
            <summary>
            This is the main fluent class for building expressions
            bound for the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.TweetSharp#Twitter#Fluent#IFluentTwitter#get_Format">
            <summary>
            This is the main fluent class for building expressions
            bound for the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.TweetSharp#Twitter#Fluent#IFluentTwitter#set_Format(TweetSharp.Core.WebFormat)">
            <summary>
            This is the main fluent class for building expressions
            bound for the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.TweetSharp#Twitter#Fluent#IFluentTwitter#get_RecurringTask">
            <summary>
            This is the main fluent class for building expressions
            bound for the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.TweetSharp#Twitter#Fluent#IFluentTwitter#get_RepeatInterval">
            <summary>
            This is the main fluent class for building expressions
            bound for the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.TweetSharp#Twitter#Fluent#IFluentTwitter#set_RepeatInterval(System.TimeSpan)">
            <summary>
            This is the main fluent class for building expressions
            bound for the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.TweetSharp#Twitter#Fluent#IFluentTwitter#get_RepeatTimes">
            <summary>
            This is the main fluent class for building expressions
            bound for the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.TweetSharp#Twitter#Fluent#IFluentTwitter#set_RepeatTimes(System.Int32)">
            <summary>
            This is the main fluent class for building expressions
            bound for the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.TweetSharp#Twitter#Fluent#IFluentTwitter#Cancel">
            <summary>
            This is the main fluent class for building expressions
            bound for the Twitter API.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.AuthenticationPair">
            <summary>
            Gets the authentication pair used to authenticate to twitter.
            </summary>
            <value>The authentication pair, typically a username and password or a oauth token and tokensecret.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.SecondaryAuthenticationPair">
            <summary>
            Gets the authentication pair used to authenticate to 3rd party services such as image hosts
            </summary>
            <value>The authentication pair, typically a username and password or a oauth token and tokensecret.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.ExternalAuthentication">
            <summary>
            Gets or sets the secondary authentication.
            </summary>
            <value>The secondary authentication.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.Profile">
            <summary>
            Gets or sets the profile.
            </summary>
            <value>The profile.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.SearchParameters">
            <summary>
            Gets or sets the search parameters.
            </summary>
            <value>The search parameters.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.TweetSharp#Twitter#Fluent#IFluentTwitter#ClientInfo">
            <summary>
            Gets or sets the client info.
            </summary>
            <value>The client info.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions">
            <summary>
            Fluent interface methods for accessing direct message endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Received(TweetSharp.Twitter.Fluent.ITwitterDirectMessages)">
            <summary>
            Gets direct messages receieved by the authenticated user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Sent(TweetSharp.Twitter.Fluent.ITwitterDirectMessages)">
            <summary>
            Gets direct messages sent by the authenticated user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Send(TweetSharp.Twitter.Fluent.ITwitterDirectMessages,System.Int32,System.String)">
            <summary>
            Sends a direct message from the authenticated user to another user
            </summary>
            <param name="instance"></param>
            <param name="id">id of the user to whom the direct message will be sent</param>
            <param name="text">the text of the message</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Send(TweetSharp.Twitter.Fluent.ITwitterDirectMessages,System.Int64,System.String)">
            <summary>
            Sends a direct message from the authenticated user to another user
            </summary>
            <param name="instance"></param>
            <param name="id">id of the user to whom the direct message will be sent</param>
            <param name="text">the text of the message</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Send(TweetSharp.Twitter.Fluent.ITwitterDirectMessages,System.String,System.String)">
            <summary>
            Sends a direct message from the authenticated user to another user
            </summary>
            <param name="instance"></param>
            <param name="screenName">screen name of the user to whom the direct message will be sent</param>
            <param name="text">the text of the message</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Destroy(TweetSharp.Twitter.Fluent.ITwitterDirectMessages,System.Int32)">
            <summary>
            Deletes a direct message
            </summary>
            <param name="instance"></param>
            <param name="id">Id of the message to delete</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Destroy(TweetSharp.Twitter.Fluent.ITwitterDirectMessages,System.Int64)">
            <summary>
            Deletes a direct message
            </summary>
            <param name="instance"></param>
            <param name="id">Id of the message to delete</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Service.TwitterFilterStreamOptions">
            <summary>
            Options for filtering the Twitter API Filter stream.
            </summary>
        </member>
        <member name="T:TweetSharp.TestTwitterClientInfo">
            <summary>
            Client info class for the test runner.
            </summary>
        </member>
        <member name="T:TweetSharp.TwitterClientInfo">
            <summary>
             This class provides meta-data for your specific Twitter application, that is
             used to identify your client to Twitter, store OAuth credentials for all future
             request, and in some cases define a transparent proxy to redirect API calls to.
            </summary>
        </member>
        <member name="P:TweetSharp.TwitterClientInfo.ClientName">
            <summary>
            This is the name of your client application. It is used to
            identify your client when a user updates their status, or when
            your application makes a Twitter Search API request.
            </summary>
        </member>
        <member name="P:TweetSharp.TwitterClientInfo.ClientVersion">
            <summary>
            This is the version of your application. This is meta-data only,
            and not used by Twitter for client processing.
            </summary>
        </member>
        <member name="P:TweetSharp.TwitterClientInfo.ClientUrl">
            <summary>
            This is the URL of your application. This is meta-data only,
            and not used by Twitter for client processing. Your application's URL
            is stored by Twitter when you apply for a 'Source' attribute or register
            your application for OAuth.
            </summary>
        </member>
        <member name="P:TweetSharp.TwitterClientInfo.ConsumerKey">
            <summary>
            If your client is using OAuth authentication, this value should be set
            to the value of your consumer key. This avoids having to provide the key
            in every query.
            </summary>
        </member>
        <member name="P:TweetSharp.TwitterClientInfo.ConsumerSecret">
            <summary>
            If your client is using OAuth authentication, this value should be set
            to the value of your consumer secret. This avoids having to provide the secret
            in every query.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStreamExtensions">
            <summary>
            Fluent interface methods for accessing the streaming api
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterStreamExtensions.FromSample(TweetSharp.Twitter.Fluent.ITwitterStream)">
            <summary>
            Creates a stream from of a random sample of public statuses
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterStreamExtensions.FromFilter(TweetSharp.Twitter.Fluent.ITwitterStream)">
            <summary>
            Creates a stream based on a search filter
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterStreamExtensions.FromFirehose(TweetSharp.Twitter.Fluent.ITwitterStream)">
            <summary>
            Creates a stream from all public statuses
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterStreamExtensions.FromRetweet(TweetSharp.Twitter.Fluent.ITwitterStream)">
            <summary>
            Creates a stream from all public retweets of other statuses
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe">
            <summary>
            Fluent twitter node for the retweets of me endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ShortenUrlServiceProvider">
            <summary>
            A list of supported URL shortening services.
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.ShortenUrlServiceProvider.Tomato">
            <summary>
            http://to.m8.to
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.ShortenUrlServiceProvider.Trim">
            <summary>
            http://tr.im
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.ShortenUrlServiceProvider.Bitly">
            <summary>
            http://bit.ly
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.ShortenUrlServiceProvider.IsGd">
            <summary>
            http://is.gd
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.ShortenUrlServiceProvider.TinyUrl">
            <summary>
            http://tinyurl.com
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSearch">
            <summary>
            Fluent twitter node for the search endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.RetweetMode">
            <summary>
            Determines the possible ways to handle retweeting
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetweetMode.Native">
            <summary>
            Uses Twitter's Retweet API
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetweetMode.Prefix">
            <summary>
            Uses 'RT' at the beginning of an update, performed by TweetSharp
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetweetMode.SymbolPrefix">
            <summary>
            Uses a Unicode character (U2672) at the beginning of an update, performed by TweetSharp
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetweetMode.Suffix">
            <summary>
            Uses 'via (@screen_name)' at the end of an update, performed by TweetSharp
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterReportSpamExtensions">
            <summary>
            Fluent interface methods for the spam reporting endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterReportSpamExtensions.ReportSpammer(TweetSharp.Twitter.Fluent.ITwitterReportSpam,System.String)">
            <summary>
            Reports a user as a spammer and blocks them from following the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="screenName">Screen name of the spammer</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterReportSpamExtensions.ReportSpammer(TweetSharp.Twitter.Fluent.ITwitterReportSpam,System.Int32)">
            <summary>
            Reports a user as a spammer and blocks them from following the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="id">Id name of the spammer</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterReportSpamExtensions.ReportSpammer(TweetSharp.Twitter.Fluent.ITwitterReportSpam,System.Int64)">
            <summary>
            Reports a user as a spammer and blocks them from following the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="id">Id name of the spammer</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterReportSpamExtensions.ReportSpammer(TweetSharp.Twitter.Fluent.ITwitterReportSpam,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Reports a user as a spammer and blocks them from following the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="user"><see cref="T:TweetSharp.Twitter.Model.TwitterUser"/> object representing the spammer</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsSubscribersCreate">
            <summary>
            Fluent twitter node for the lists subscriber creation endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsSubscribersCreate.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsSubscribers"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsStatuses">
            <summary>
            Fluent twitter node for the lists statuses endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsStatuses.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsStatuses"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExists">
            <summary>
            Node in the fluent expression tree for accessing the Twitter API to query 
            for the existence of the friend/follower relationship between users. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFavoritesDestroy">
            <summary>
            Fluent twitter node for the destroy favorites endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterDirectMessages">
            <summary>
            Fluent twitter node for the direct messages endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocksCreate">
            <summary>
            Node in the fluent expression tree for accessing the Twitter API to block other users
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccount">
            <summary>
            Fluent twitter node for the account endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterSearchTrend">
            <summary>
             Describes a trend as received from the search api
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchTrend.Query">
            <summary>
             Gets or sets the search query that can be used to search for this trend
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchTrend.Name">
            <summary>
             Gets or sets the name of the trend
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchTrend.Url">
            <summary>
             gets or sets the url for searching for this trend in a browser
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchTrend.TrendingAsOf">
            <summary>
             Gets or sets the date and time that this trend began trending
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUsersSearch">
            <summary>
            Node in the fluent expression tree for accessing the Twitter search APIs to find other users. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe">
            <summary>
            Fluent twitter node for the retweeted to me endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStatusDestroy">
            <summary>
            Fluent twitter node for the status deletion endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterReportSpamReportSpammer">
            <summary>
            Fluent twitter node for the spam reporting endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsDelete">
            <summary>
            Fluent twitter node for the list deletion endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsDelete.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsDelete"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterParameters">
            <summary>
            Paramters used in Twitter queries
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Activity">
            <summary>
            Gets or sets the activity.
            </summary>
            <value>The activity.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.SinceDate">
            <summary>
            Gets or sets the since date.
            </summary>
            <value>The since date.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.SinceId">
            <summary>
            Gets or sets the since id.
            </summary>
            <value>The since id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.MaxId">
            <summary>
            Gets or sets the max id.
            </summary>
            <value>The max id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Count">
            <summary>
            Gets or sets the count of objects to return.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Page">
            <summary>
            Gets or sets the page of objects to request.
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ReturnPerPage">
            <summary>
            Gets or sets the number if items per page to return
            </summary>
            <value>The return per page.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Id">
            <summary>
            Gets or sets the requested id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ScreenName">
            <summary>
            Gets or sets the requested screenname
            </summary>
            <value>The screenname</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.InReplyToStatusId">
            <summary>
            Gets or sets the "in reply to status id" parameter
            </summary>
            <value>The in reply to status id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Email">
            <summary>
            Gets or sets the email address parameter.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.UserScreenName">
            <summary>
            Gets or sets the user screen name parameter
            </summary>
            <value>The user screen name parameter.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.UserId">
            <summary>
            Gets or sets the user id parameter.
            </summary>
            <value>The user id parameter.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Follow">
            <summary>
            Gets or sets the follow parameter.
            </summary>
            <value>The follow parameter.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.VerifyId">
            <summary>
            Gets or sets the verify id parameter.
            </summary>
            <value>The verify id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.VerifyScreenName">
            <summary>
            Gets or sets the verify screen name parameter.
            </summary>
            <value>The verify screen name parameter.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.PostImagePath">
            <summary>
            Gets or sets the post image path.
            </summary>
            <value>The post image path.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.PostImageProvider">
            <summary>
            Gets or sets the post image provider.
            </summary>
            <value>The post image provider.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.DirectPath">
            <summary>
            Gets or sets a direct URL path to use in place of a fluent query.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.GeoLocation">
            <summary>
            Gets or sets the geospatial location of the query, if applicable.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Cursor">
            <summary>
            Gets or sets the Cursor ID for the query
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.TargetId">
            <summary>
            Gets or sets the target id (for friendships/show).
            </summary>
            <value>The target id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.SourceId">
            <summary>
            Gets or sets the source id (for friendships/show).
            </summary>
            <value>The source id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.SourceScreenName">
            <summary>
            Gets or sets the name of the source screen (for friendships/show).
            </summary>
            <value>The name of the source screen.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.TargetScreenName">
            <summary>
            Gets or sets the name of the target screen (for friendships/show).
            </summary>
            <value>The name of the target screen.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ListSlug">
            <summary>
            Gets or sets the list slug.
            </summary>
            <value>The list slug.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ListId">
            <summary>
            Gets or sets the list id.
            </summary>
            <value>The list id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ListMode">
            <summary>
            Gets or sets the list mode.
            </summary>
            <value>The list mode.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ListName">
            <summary>
            Gets or sets the name of the list (for creating lists).
            </summary>
            <value>The name of the list.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ListMemberId">
            <summary>
            Gets or sets the list member id.
            </summary>
            <value>The list member id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ListDescription">
            <summary>
            Gets or sets the list description.
            </summary>
            <value>The list description.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.UserSearch">
            <summary>
            Gets or sets the user search query.
            </summary>
            <value>The user search query.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.CopyTo">
            <summary>
            Gets or sets external services to which a status update will be copied
            </summary>
            <value>Bitfield enumeration of desired external services.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters">
            <summary>
            Parameters for a streaming request
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.Count">
            <summary>
            gets or sets the number of results to wait for before ending the stream
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.Length">
            <summary>
            Gets or sets the delimiter length
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.UserIds">
            <summary>
            Gets or sets user ids used to filter the stream
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.Keywords">
            <summary>
            Gets or sets keywords used to filter the stream
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.Locations">
            <summary>
            Gets or sets locations used to filter the stream
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.Duration">
            <summary>
            Gets or sets the amount of time to listen to the stream for
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.Callback">
            <summary>
            gets or sets the Callback method to call when the stream hits specified thresholds
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.ResultsPerCallback">
            <summary>
            gets or sets the number of results to receive between callback invocations
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesNew">
            <summary>
            Fluent twitter node for the new direct messages endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterReportSpam">
            <summary>
            Fluent twitter node for the spam reporting endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions">
            <summary>
            Fluent interface notification endpoint methods
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterNotifications,System.Int32)">
            <summary>
            Adds a user to the set of notification-enabled users for the authenticated account
            </summary>
            <param name="instance"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterNotifications,System.Int64)">
            <summary>
            Adds a user to the set of notification-enabled users for the authenticated account
            </summary>
            <param name="instance"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterNotifications,System.String)">
            <summary>
            Adds a user to the set of notification-enabled users for the authenticated account
            </summary>
            <param name="instance"></param>
            <param name="screenName"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions.Leave(TweetSharp.Twitter.Fluent.ITwitterNotifications,System.Int32)">
            <summary>
            Removes a user from the set of notification-enabled users for the authenticated account
            </summary>
            <param name="instance"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions.Leave(TweetSharp.Twitter.Fluent.ITwitterNotifications,System.Int64)">
            <summary>
            Removes a user from the set of notification-enabled users for the authenticated account
            </summary>
            <param name="instance"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions.Leave(TweetSharp.Twitter.Fluent.ITwitterNotifications,System.String)">
            <summary>
            Removes a user from the set of notification-enabled users for the authenticated account
            </summary>
            <param name="instance"></param>
            <param name="screenName"></param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsMembersCreate">
            <summary>
            Fluent twitter node for the add to list endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsMembersCreate.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsMembers"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsExtensions">
            <summary>
            Methods for the Twitter Lists API
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetListsBy(TweetSharp.Twitter.Fluent.ITwitterLists,System.String)">
            <summary>
            Gets lists belonging to the specified owner.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetListBy(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String)">
            <summary>
            Gets a single list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetListBy(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Gets a single list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetListBy(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32)">
            <summary>
            Gets a single list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.DeleteList(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Deletes a list.
            The authenticating user must be the owner of the list to delete it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.DeleteList(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String)">
            <summary>
            Deletes a list.
            The authenticating user must be the owner of the list to delete it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.DeleteList(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Deletes a list.
            The authenticating user must be the owner of the list to delete it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.CreatePublicList(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.String)">
            <summary>
            Creates a public list.
            The authenticating user must be the owner of the list to create it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listName">Name of the list.</param>
            <param name="listDescription">The list description.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.CreatePublicList(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Creates a public list.
            The authenticating user must be the owner of the list to create it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.CreatePrivateList(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.String)">
            <summary>
            Creates a private list.
            The authenticating user must be the owner of the list to create it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listName">The name of the list.</param>
            <param name="listDescription">The list description.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.CreatePrivateList(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Creates a private list.
            The authenticating user must be the owner of the list to create it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.UpdateList(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Updates the given list. 
            The authenticating user must be the owner of the list to update it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetStatuses(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32)">
            <summary>
            Gets the status timeline of a specified list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetStatuses(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Gets the status timeline of a specified list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetStatuses(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String)">
            <summary>
            Gets the status timeline of a specified list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetMemberships(TweetSharp.Twitter.Fluent.ITwitterLists,System.String)">
            <summary>
            Gets the lists the list owner is listed on.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetSubscriptions(TweetSharp.Twitter.Fluent.ITwitterLists,System.String)">
            <summary>
            Gets the lists the list owner follows.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetMembersOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32)">
            <summary>
            Gets the users that are members of a given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetMembersOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String)">
            <summary>
            Gets the users that are members of a given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetMembersOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Gets the users that are members of a given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetMembersOf(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Gets the users that are members of a given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetSubscribersOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Gets the followers of a list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.GetSubscribersOf(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Gets the followers of a list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.IsUserMemberOf(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Determines whether a list contains a user.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.IsUserMemberOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32,System.Int32)">
            <summary>
            Determines whether a list contains a user.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The ID of the list to test for membership.</param>
            <param name="userId">The ID of the user to check for within the list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.IsUserMemberOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64,System.Int64)">
            <summary>
            Determines whether a list contains a user.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The ID of the list to test for membership.</param>
            <param name="userId">The ID of the user to check for within the list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.IsUserFollowerOf(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Determines whether a user follows a list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.IsUserFollowerOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32,System.Int32)">
            <summary>
            Determines whether a user follows a list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The ID of the list to test for a subscription.</param>
            <param name="userId">The ID of the user to check against  the list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.IsUserFollowerOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64,System.Int64)">
            <summary>
            Determines whether the given user is a subscriber of the the specified list
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The ID of the list to test for a subscription.</param>
            <param name="userId">The ID of the user to check against the list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.AddMemberTo(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Adds a new list member.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.AddMemberTo(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64,System.Int64)">
            <summary>
            Adds a new list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.AddMemberTo(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.Int64)">
            <summary>
            Adds a new list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.AddMemberTo(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.Int32)">
            <summary>
            Adds a new list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.AddMemberTo(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32,System.Int32)">
            <summary>
            Adds a new list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.RemoveMemberFrom(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Removes a list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.RemoveMemberFrom(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64,System.Int64)">
            <summary>
            Removes a list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.RemoveMemberFrom(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.Int64)">
            <summary>
            Removes a list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.RemoveMemberFrom(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.Int32)">
            <summary>
            Removes a list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.RemoveMemberFrom(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32,System.Int32)">
            <summary>
            Removes a list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Adds a list to the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32)">
            <summary>
            Adds a list to the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String)">
            <summary>
            Adds a list to the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Adds a list to the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.Unfollow(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Removes a list from the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.Unfollow(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32)">
            <summary>
            Removes a list from the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.Unfollow(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String)">
            <summary>
            Removes a list from the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterListsExtensions.Unfollow(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Removes a list from the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent">
            <summary>
            Fluent twitter node for the sent direct messages endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesDestroy">
            <summary>
            Fluent twitter node for the destroy direct messages endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterLocalTrend">
            <summary>
            Describes a local trend
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterLocalTrend.Query">
            <summary>
            Gets or sets the search compatible query used to search for stauses with this trending topic
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterLocalTrend.Name">
            <summary>
            Gets or sets the display name for the trend
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterLocalTrend.Url">
            <summary>
            Gets or sets the twitter search site url for querying this trend in a browser
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.TwitterWebCallback">
            <summary>
            Represents a callback from an API call.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterTrends">
            <summary>
            Fluent twitter node for the trending topics endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSocialGraphExtensions">
            <summary>
            Extension methods for querying the SocialGraph
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSocialGraphExtensions.Ids(TweetSharp.Twitter.Fluent.ITwitterSocialGraph)">
            <summary>
            Gets user IDs
            </summary>
            <param name="instance">The instance.</param>
            <returns>the instance</returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsSubscribersDelete">
            <summary>
            Fluent twitter node for the list subscriber deletion endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsIsSubscriber.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsIsMember"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsOutgoing">
            <summary>
            Node in the fluent expression tree for accessing the APIs to show pending friend requests
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterProfile">
            <summary>
            Interface representing a user profile
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileUrl">
            <summary>
            Gets or sets the profile URL.
            </summary>
            <value>The profile URL.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileLocation">
            <summary>
            Gets or sets the user location.
            </summary>
            <value>The user location.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileDescription">
            <summary>
            Gets or sets the user description.
            </summary>
            <value>The user description.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileDeliveryDevice">
            <summary>
            Gets or sets the profile delivery device.
            </summary>
            <value>The profile delivery device.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileBackgroundColor">
            <summary>
            Gets or sets the color of the profile background.
            </summary>
            <value>The color of the profile background.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileTextColor">
            <summary>
            Gets or sets the color of the profile text.
            </summary>
            <value>The color of the profile text.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileLinkColor">
            <summary>
            Gets or sets the color of the profile link.
            </summary>
            <value>The color of the profile link.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileSidebarFillColor">
            <summary>
            Gets or sets the color of the profile sidebar fill.
            </summary>
            <value>The color of the profile sidebar fill.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileSidebarBorderColor">
            <summary>
            Gets or sets the color of the profile sidebar border.
            </summary>
            <value>The color of the profile sidebar border.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileImagePath">
            <summary>
            Gets or sets the profile image path.
            </summary>
            <value>The profile image path.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileBackgroundImagePath">
            <summary>
            Gets or sets the profile background image path.
            </summary>
            <value>The profile background image path.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocksList">
            <summary>
            Fluent twitter node for the block listing endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions">
            <summary>
            Fluent interface methods for the Block endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Block(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.Int32)">
            <summary>
            Blocks a user from following the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="id">id of the user to block</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Block(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.Int64)">
            <summary>
            Blocks a user from following the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="id">id of the user to block</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Block(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.String)">
            <summary>
            Blocks a user from following the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="screenName">screen name of the user to block</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Block(TweetSharp.Twitter.Fluent.ITwitterBlocks,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Blocks a user from following the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="user"><see cref="T:TweetSharp.Twitter.Model.TwitterUser"/> representing the user to block</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Unblock(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.Int32)">
            <summary>
            Unblocks a user, allowing them to follow the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="id">id of the user to unblock</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Unblock(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.Int64)">
            <summary>
            Unblocks a user, allowing them to follow the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="id">id of the user to unblock</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Unblock(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.String)">
            <summary>
            Unblocks a user, allowing them to follow the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="screenName">screen name of the user to unblock</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Unblock(TweetSharp.Twitter.Fluent.ITwitterBlocks,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Unblocks a user, allowing them to follow the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="user"><see cref="T:TweetSharp.Twitter.Model.TwitterUser"/>representing the user to unblock</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Exists(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.Int64)">
            <summary>
            Checks if the authenticating user is blocking the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">id of the user whose block status to check</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Exists(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.Int32)">
            <summary>
            Checks if the authenticating user is blocking the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">id of the user whose block status to check</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Exists(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.String)">
            <summary>
            Checks if the authenticating user is blocking the specified user
            </summary>
            <param name="instance"></param>
            <param name="screenName">screen name of the user whose block status to check</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Exists(TweetSharp.Twitter.Fluent.ITwitterBlocks,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Checks if the authenticating user is blocking the specified user
            </summary>
            <param name="instance"></param>
            <param name="user"><see cref="T:TweetSharp.Twitter.Model.TwitterUser"/> object representing the user whose block status to check</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.ListUsers(TweetSharp.Twitter.Fluent.ITwitterBlocks)">
            <summary>
            Lists all users blocked by the authenticating user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.ListIds(TweetSharp.Twitter.Fluent.ITwitterBlocks)">
            <summary>
            Lists all ids of users blocked by the authenticating user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDateTime.#ctor(System.DateTime,TweetSharp.Twitter.Model.TwitterDateFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Model.TwitterDateTime"/> class.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDateTime.ConvertFromDateTime(System.DateTime,TweetSharp.Twitter.Model.TwitterDateFormat)">
            <summary>
            Converts from date time.
            </summary>
            <param name="input">The input.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDateTime.ConvertToDateTime(System.String)">
            <summary>
            Converts to date time.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDateTime.ConvertToTwitterDateTime(System.String)">
            <summary>
            Converts to twitter date time.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDateTime.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterSearchStatus">
            <summary>
            This data class represents a <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> originating from a Search API result. 
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSearchStatus.op_Implicit(TweetSharp.Twitter.Model.TwitterSearchStatus)~TweetSharp.Twitter.Model.TwitterStatus">
            <summary>
             This implicit conversion supports treating a search status as if it were a 
             regular <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/>. This is useful if you need to combine search
             results and regular results in the same UI context.
            </summary>
            <param name="searchStatus"></param>
            <returns></returns>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Id">
            <summary>
            The unique identifier for this status.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.TextHtml">
            <summary>
            Calculates the HTML value of the <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/>
            by parsing URLs, mentions, and hashtags into anchors.
            </summary>
            <value>The HTML text.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.TextLinks">
            <summary>
            Returns the URLs embedded in the <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/> value.
            </summary>
            <value>The <see cref="T:System.Uri"/> values embedded in <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.TextMentions">
            <summary>
            Returns the <see cref="P:TweetSharp.Twitter.Model.TwitterUser.ScreenName"/> values mentioned in the <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/> value.
            </summary>
            <value>The <see cref="P:TweetSharp.Twitter.Model.TwitterUser.ScreenName"/> values mentioned in <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.TextHashtags">
            <summary>
            Returns the hashtag values used in the <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/> value.
            </summary>
            <value>The hashtag values used in <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.CreatedDate">
            <summary>
            The date the status was created.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.ToUserId">
            <summary>
            This represents the internal ID for the user who received a status in a search
            result. Keep in mind that this ID is currently meaningless to the Twitter API
            as it is not the same ID as the user's ID. It will eventually provide the
            correct ID for the target user.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.FromUserId">
            <summary>
            This represents the internal ID for the user who wrote a status in a search
            result. Keep in mind that this ID is currently meaningless to the Twitter API
            as it is not the same ID as the user's ID. It will eventually provide the
            correct ID for the originating user.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.Converters.TwitterWonkyBooleanConverter">
            <summary>
            Sometimes Twitter returns "0" for "true", instead of true, and we've even seen
            "13" for true. For those, and possibly future issues, this converter exists.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListTimeline.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListTimeline"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSearchTrends">
            <summary>
            Node in the fluent expression tree for accessing Twitter Search Trends APIs
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterPhotos">
            <summary>
            Node in the fluent expression tree for accessing photo posting services
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsSubscribersDelete.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsSubscribers"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsMembersDelete">
            <summary>
            Fluent twitter node for the delete list members endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsMembersDelete.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsMembers"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFavoritesCreate">
            <summary>
            Interface for nodes that create favorites. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfile">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs to update user profile data
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.TextHtml">
            <summary>
            Calculates the HTML value of the <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/>
            by parsing URLs, mentions, and hashtags into anchors.
            </summary>
            <value>The HTML text.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.TextLinks">
            <summary>
            Returns the URLs embedded in the <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/> value.
            </summary>
            <value>The <see cref="T:System.Uri"/> values embedded in <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.TextMentions">
            <summary>
            Returns the <see cref="P:TweetSharp.Twitter.Model.TwitterUser.ScreenName"/> values mentioned in the <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/> value.
            </summary>
            <value>The <see cref="P:TweetSharp.Twitter.Model.TwitterUser.ScreenName"/> values mentioned in <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.TextHashtags">
            <summary>
            Returns the hashtag values used in the <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/> value.
            </summary>
            <value>The hashtag values used in <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/>.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStreamingRetweet">
            <summary>
            
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStatusShow">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs to feth a specific status
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.SendPhotoServiceProvider">
            <summary>
            Enumeration of the available photo posting services 
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.SendPhotoServiceProvider.TwitPic">
            <summary>
            http://twitpic.com
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.SendPhotoServiceProvider.YFrog">
            <summary>
            http://yfrog.com
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.SendPhotoServiceProvider.TwitGoo">
            <summary>
            http://twitgoo.com
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesShow">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs to list saved searches
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters">
            <summary>
             Parameters for queries against the Twitter search api
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchPhrase">
            <summary>
            Gets or sets the phrase to search for
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchWithoutPhrase">
            <summary>
            Gets or set a phrase that search results should not contain
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchResultType">
            <summary>
            Gets or sets the result type expected in search results.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchFromUser">
            <summary>
            Gets or sets the user name to search for statuses from
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchToUser">
            <summary>
            Gets or sets the user name to search for statuses to
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchHashTag">
            <summary>
            Gets or sets the hash tag to search for
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchReferences">
            <summary>
            Gets or sets the username that search results should reference
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchNear">
            <summary>
            gets or sets the location name to search for statuses near
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchMiles">
            <summary>
            gets or sets the radius to use for location-based searches
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchSince">
            <summary>
            Gets or sets the baseline time to search for statuses after
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchSinceUntil">
            <summary>
            Gets or sets the time to search for statuses before
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchDate">
            <summary>
            Gets or sets the date to search for statuses posted on
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchNegativity">
            <summary>
            Gets or sets a value indicating whether or not to limit search results 
            to those expressing a negative sentiment
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchPositivity">
            <summary>
            Gets or sets a value indicating whether or not to limit search results 
            to those expressing a positive sentiment
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchContainingLinks">
            <summary>
            Gets or sets a value indicating whether or not to limit search results 
            to those containing links
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchCurrentTrends">
            <summary>
            Gets or sets a value indicating whether or not to limit search results 
            to those referencing current trend
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchExcludesHashtags">
            <summary>
            Gets or sets a value indicating whether or not to exclude 
            trends containing hashtags
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchDailyTrends">
            <summary>
            Gets or sets a value indicating whether or not to fetch 
            daily trends
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchWeeklyTrends">
            <summary>
            Gets or sets a value indicating whether or not to fetch 
            weekly trends
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchShowUser">
            <summary>
            Gets or sets a value indicating whether or not to prepend "&lt;user&gt;:" to search results 
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchLanguage">
            <summary>
            Gets or sets the desired language for search results
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchLocale">
            <summary>
            gets or sets the originating language of the query
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchGeoLatitude">
            <summary>
            Gets or sets the latitude to use as the center of the search
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchGeoLongitude">
            <summary>
            Gets or sets the longitude to use as the center of the search
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchQuestion">
            <summary>
            Gets or sets a value indicating whether or not to limit search results to 
            statuses containing a question
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFavoritesGet">
            <summary>
            Interface for nodes that get twitter favorites
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterDirectExtensions">
            <summary>
            Fluent interface methods for setting the http method to use for with direct queries
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterDirectExtensions.Get(TweetSharp.Twitter.Fluent.IFluentTwitterDirect)">
            <summary>
            Performs the direct query as an Http GET 
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterDirectExtensions.Post(TweetSharp.Twitter.Fluent.IFluentTwitterDirect)">
            <summary>
            Performs the direct query as an Http POST
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterDateFormat">
            <summary>
            Represents the possible known date formats that Twitter reports.
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.RestApi">
            <summary>
            RestApi
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.SearchApi">
            <summary>
            SearchApi
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.Atom">
            <summary>
            Atom
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.XmlHashesAndRss">
            <summary>
            XmlHashesAndRss
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.TrendsCurrent">
            <summary>
            TrendsCurrent
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.TrendsDaily">
            <summary>
            TrendsDaily
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.TrendsWeekly">
            <summary>
            TrendsWeekly
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSearchExtensions">
            <summary>
            Fluent interface methods for the search api
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSearchExtensions.Query(TweetSharp.Twitter.Fluent.ITwitterSearch)">
            <summary>
            Perform a query via the search api
            </summary>
            <param name="instance">the instance</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSearchExtensions.Trends(TweetSharp.Twitter.Fluent.ITwitterSearch)">
            <summary>
            Request the current or historical trending topics 
            </summary>
            <param name="instance">the instance</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSavedSearches">
            <summary>
            Fluent twitter node for the saved searches endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterSavedSearches.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterSavedSearches"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLists">
            <summary>
            Fluent twitter node for the lists endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterLists.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterLists"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsSubscriptions">
            <summary>
            Fluent twitter node for the list subscriptions endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsSubscriptions.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsSubscriptions"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsGet.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsGet"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsCreate">
            <summary>
            Node in the fluent expression tree for accessing Twitter APIs to create lists
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsCreate.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsCreate"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions">
            <summary>
            Fluent interface methods for accessing the Twitter Favorites endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.GetFavorites(TweetSharp.Twitter.Fluent.ITwitterFavorites)">
            <summary>
            Gets the tweets marked as favorites by the authenticating user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.GetFavoritesFor(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.String)">
            <summary>
            Gets the tweets marked as favorites for the specified user
            </summary>
            <param name="instance"></param>
            <param name="screenName">The screen name of the user for whom to get the list of favorites</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.GetFavoritesFor(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.Int32)">
            <summary>
            Gets the tweets marked as favorites for the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">The id of the user for whom to get the list of favorites</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.GetFavoritesFor(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.Int64)">
            <summary>
            Gets the tweets marked as favorites for the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">The id of the user for whom to get the list of favorites</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.Favorite(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.Int32)">
            <summary>
            Marks a tweet as one of the authenticating user's favorites
            </summary>
            <param name="instance"></param>
            <param name="id">Id of the <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> to mark as a favorite</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.Favorite(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.Int64)">
            <summary>
            Marks a tweet as one of the authenticating user's favorites
            </summary>
            <param name="instance"></param>
            <param name="id">Id of the <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> to mark as a favorite</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.Favorite(TweetSharp.Twitter.Fluent.ITwitterFavorites,TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Marks a tweet as one of the authenticating user's favorites
            </summary>
            <param name="instance"></param>
            <param name="id">The <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> to mark as a favorite</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.Unfavorite(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.Int32)">
            <summary>
            Unmarks a tweet as one of the authenticating user's favorites
            </summary>
            <param name="instance"></param>
            <param name="id">The id of the <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> to unmark as a favorite</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.Unfavorite(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.Int64)">
            <summary>
            Unmarks a tweet as one of the authenticating user's favorites
            </summary>
            <param name="instance"></param>
            <param name="id">The id of the <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> to unmark as a favorite</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.Unfavorite(TweetSharp.Twitter.Fluent.ITwitterFavorites,TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Unmarks a tweet as one of the authenticating user's favorites
            </summary>
            <param name="instance"></param>
            <param name="id">The <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> to unmark as a favorite</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.SearchResultType">
            <summary>
            The type of search result requested in query.
            <seealso cref="!:http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.SearchResultType.Mixed">
            <summary>
            Include both popular and real time results in the response.
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.SearchResultType.Recent">
            <summary>
            The current default value. Return only the most recent results in the response.
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.SearchResultType.Popular">
            <summary>
            Return only the most popular results in the response.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterGeoLocation">
            <summary>
             Represents a geospatial location, for APIs that support it.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/> struct.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/> struct.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.Equals(TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="instance">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.op_Equality(TweetSharp.Twitter.Model.TwitterGeoLocation,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.op_Inequality(TweetSharp.Twitter.Model.TwitterGeoLocation,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterGeoLocation.Latitude">
            <summary>
            Gets the latitude.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterGeoLocation.Longitude">
            <summary>
            Gets the longitude.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates.op_Explicit(TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates)~System.Double[]">
            <summary>
            Performs an explicit conversion from <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates"/> to array of <see cref="T:System.Double"/>.
            </summary>
            <param name="location">The location.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates.op_Implicit(System.Collections.Generic.List{System.Double})~TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates"/>.
            </summary>
            <param name="values">The values.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates.op_Implicit(System.Double[])~TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates">
            <summary>
            Performs an implicit conversion from array of <see cref="T:System.Double"/> to <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates"/>.
            </summary>
            <param name="values">The values.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates.FromEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Froms the enumerable.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSearchQuery">
            <summary>
            Node in the fluent expression tree for accessing the Search API to perform a query
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsIsMember.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsIsMember"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterHelpExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterHelpExtensions.TestService(TweetSharp.Twitter.Fluent.ITwitterHelp)">
            <summary>
            Tests the Twitter service for availability
            </summary>
            <param name="instance">the instance</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterHelpExtensions.GetDowntimeSchedule(TweetSharp.Twitter.Fluent.ITwitterHelp)">
            <summary>
            Requests the planned downtime schedule from Twitter
            </summary>
            <param name="instance">the instance</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterUser">
            <summary>
            This data class provides more information than the basic data provided by
            <see cref="T:TweetSharp.Twitter.Model.TwitterUser"/> returned in other calls for friends and followers.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterUser.op_Equality(TweetSharp.Twitter.Model.TwitterUser,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterUser.op_Inequality(TweetSharp.Twitter.Model.TwitterUser,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterResult">
            <summary>
            Represents a result returning from the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterResult.#ctor(Hammock.Web.WebQueryResult,System.Net.WebException)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Model.TwitterResult"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="exception">The WebException that was caught during the query</param>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Model.TwitterResult"/> class.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.IsTwitterError">
            <summary>
            Gets a value indicating whether this result returned a Twitter error.
            </summary>
            <value><c>true</c> if this result is in error; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.IsFailWhale">
            <summary>
            Gets a value indicating whether this instance is a fail whale.
            </summary>
            <value>
            	<c>true</c> if this instance is a fail whale; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.IsFromStream">
            <summary>
            Gets a value indicating whether this result was served from a continuous stream.
            </summary>
            <value>
            	<c>true</c> if this result is from a stream; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.StreamedResponses">
            <summary>
            Gets or sets the streamed responses requested from the streaming API.
            </summary>
            <value>The streamed responses.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.RateLimitStatus">
            <summary>
            Gets or sets the rate limit status, if it was available at the time of the response.
            </summary>
            <value>The rate limit status.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.SkippedDueToRateLimiting">
            <summary>
            Gets or sets a flag indicating if the request was skipped for rate limiting rules. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions">
            <summary>
            Fluent interface methods for SavedSearch endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.List(TweetSharp.Twitter.Fluent.ITwitterSavedSearches)">
            <summary>
            Lists the saved searches for the authenticating user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.Create(TweetSharp.Twitter.Fluent.ITwitterSavedSearches,System.String)">
            <summary>
            Creates a new saved search for the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="query">the search query to save</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.Create(TweetSharp.Twitter.Fluent.ITwitterSavedSearches,TweetSharp.Twitter.Fluent.ITwitterSearchQuery)">
            <summary>
            Creates a new saved search for the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="query">the search query to save</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.Delete(TweetSharp.Twitter.Fluent.ITwitterSavedSearches,System.Int32)">
            <summary>
            Deletes a saved search for the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="id">id of the saved search to delete</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.Delete(TweetSharp.Twitter.Fluent.ITwitterSavedSearches,System.Int64)">
            <summary>
            Deletes a saved search for the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="id">id of the saved search to delete</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterSavedSearches,System.Int32)">
            <summary>
            Gets the details about a saved search belonging to the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="id">id of the saved search to query</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterSavedSearches,System.Int64)">
            <summary>
            Gets the details about a saved search belonging to the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="id">id of the saved search to query</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileColors">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs to change user profile color settings
            </summary>
        </member>
    </members>
</doc>
