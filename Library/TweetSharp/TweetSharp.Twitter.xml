<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TweetSharp.Twitter</name>
    </assembly>
    <members>
        <member name="T:TweetSharp.Twitter.Core.Extensions">
            <summary>
             Core extensions shared between friendly assemblies.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Core.Extensions.ToJson(TweetSharp.Model.IModel)">
            <summary>
            Converts an <see cref="T:TweetSharp.Model.IModel"/> into a JSON string.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Core.Extensions.ToJson(System.Collections.Generic.IEnumerable{TweetSharp.Model.IModel})">
            <summary>
            Converts an <see cref="T:TweetSharp.Model.IModel"/> collection into a JSON string.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Core.Extensions.ToJson(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            Converts a <see cref="T:TweetSharp.Twitter.Model.TwitterResult"/> into a JSON string.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Extensions.TwitterExtensions">
            <summary>
             Extensions for Twitter model instances.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.Since(System.Collections.Generic.IEnumerable{TweetSharp.Twitter.Model.TwitterUser},System.DateTime)">
            <summary>
            Filters overall query results created after a specified time.
            Replaces the deprecated Twitter API "since_date" feature.
            </summary>
            <param name="users">The users.</param>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.Before(System.Collections.Generic.IEnumerable{TweetSharp.Twitter.Model.TwitterUser},System.DateTime)">
            <summary>
            Filters overall query results created before a specified time.
            Replaces the deprecated Twitter API "since_date" feature.
            </summary>
            <param name="users">The users.</param>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.Since(System.Collections.Generic.IEnumerable{TweetSharp.Twitter.Model.TwitterStatus},System.DateTime)">
            <summary>
            Filters overall query results created after a specified time.
            Replaces the deprecated Twitter API "since_date" feature.
            </summary>
            <param name="users">The users.</param>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.Before(System.Collections.Generic.IEnumerable{TweetSharp.Twitter.Model.TwitterStatus},System.DateTime)">
            <summary>
            Filters overall query results created before a specified time.
            Replaces the deprecated Twitter API "since_date" feature.
            </summary>
            <param name="users">The users.</param>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.Since(System.Collections.Generic.IEnumerable{TweetSharp.Twitter.Model.TwitterDirectMessage},System.DateTime)">
            <summary>
            Filters overall query results created after a specified time.
            Replaces the deprecated Twitter API "since_date" feature.
            </summary>
            <param name="users">The users.</param>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.Before(System.Collections.Generic.IEnumerable{TweetSharp.Twitter.Model.TwitterDirectMessage},System.DateTime)">
            <summary>
            Filters overall query results created before a specified time.
            Replaces the deprecated Twitter API "since_date" feature.
            </summary>
            <param name="users">The users.</param>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.IsWithin(TweetSharp.Twitter.Model.TwitterGeoLocation,System.Double,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Determines whether the specified source is within range of another.
            </summary>
            <param name="source">The source.</param>
            <param name="miles">The miles.</param>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if the specified source is within; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.KilometresFrom(TweetSharp.Twitter.Model.TwitterGeoLocation,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Imposes a kilometres distance constraint between two <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/> elements.
            </summary>
            <param name="origin">The origin.</param>
            <param name="destination">The destination.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.KilometersFrom(TweetSharp.Twitter.Model.TwitterGeoLocation,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Imposes a kilometers distance constraint between two <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/> elements.
            </summary>
            <param name="origin">The origin.</param>
            <param name="destination">The destination.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.YardsFrom(TweetSharp.Twitter.Model.TwitterGeoLocation,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Imposes a yards distance constraint between two <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/> elements.
            </summary>
            <param name="origin">The origin.</param>
            <param name="destination">The destination.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.MilesFrom(TweetSharp.Twitter.Model.TwitterGeoLocation,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Imposes a miles distance constraint between two <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/> elements.
            </summary>
            <param name="origin">The origin.</param>
            <param name="destination">The destination.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsUsers(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterUser"/> 
            collection instance. 
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsUser(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterUser"/>
            instance.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsList(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterList"/>
            instance.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns>A user instance, or null if the input cannot cast to a list</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsLists(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterList"/> collection
            instance. 
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsStatuses(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> collection
            instance. 
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns>A status collection instance, or null if the input cannot cast to a status collection</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsWhereOnEarthLocations(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            Casts the result into a collection of Where On Earth (WOE) locations.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsStatus(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            Casts the result as a single <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/>.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsSavedSearch(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            Casts the result as a single <see cref="T:TweetSharp.Twitter.Model.TwitterSavedSearch"/>.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsSavedSearches(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterSavedSearch"/> collection
            instance.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsFriendship(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            Casts the result as a single <see cref="T:TweetSharp.Twitter.Model.TwitterFriendship"/>.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsDirectMessages(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            Casts the result as a collection of <see cref="T:TweetSharp.Twitter.Model.TwitterDirectMessage"/> instances.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsDirectMessage(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            Casts the result as a single <see cref="T:TweetSharp.Twitter.Model.TwitterDirectMessage"/>.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsRateLimitStatus(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            Casts the result as a single <see cref="T:TweetSharp.Twitter.Model.TwitterRateLimitStatus"/>.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsError(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterError"/>
            instance. If this method is not successful, null is returned.
            
            Twitter is now returning two inconsistent schemas for errors.
            One is a collection. In this case, only the first element is returned,
            because we have only seen single entry collections to date.
            
            At some point, we assume the API will change across the board, and we
            will change this deserialization method to follow suit.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsSearchResult(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterSearchResult"/>
            instance. If this method is not successful, null is returned.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsSearchTrends(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast JSON string into a <see cref="T:TweetSharp.Twitter.Model.TwitterSearchTrends"/> instance. 
            </summary>
            <param name="result">The JSON input to convert</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsLocalTrends(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            Casts the result as a single <see cref="T:TweetSharp.Twitter.Model.TwitterLocalTrends"/>.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsIds(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into a list of IDs.
            If this method is not successful, an empty list is returned.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.As``1(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast an XML or JSON string into an arbitrary class instance.
            </summary>
            <param name="result">The XML or JSON input to convert</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsToken(TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            This method attempts to cast a string response into an <see cref="T:TweetSharp.Model.OAuthToken"/>.
            </summary>
            <param name="result">The XML or JSON result to convert</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsNextCursor(TweetSharp.Twitter.Model.TwitterResult)">
            This method attempts to cast an XML or JSON string into an <see cref="T:System.Int64"/> to be used with the paging of friend/follower ids. 
            If this method is not successful, 0 is returned.
            <param name="result">The XML or JSON input to convert</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Extensions.TwitterExtensions.AsPreviousCursor(TweetSharp.Twitter.Model.TwitterResult)">
            This method attempts to cast an XML or JSON string into an <see cref="T:System.Int64"/> to be used with the paging of friend/follower ids. 
            If this method is not successful, 0 is returned.
            <param name="result">The XML or JSON input to convert</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountEndSession">
            <summary>
            Node in the fluent expression tree for ending the session
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeXmlJson">
            <summary>
            Represents a node that returns its results as XML or JSON
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeXml">
            <summary>
            Interface for nodes that can return results as XML
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNode">
            <summary>
            The interface describing a Twitter leaf node in the fluent expression tree.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterNode">
            <summary>
            The interface describing a Twitter node in the fluent expression tree.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNode.Expect(System.Collections.Generic.IEnumerable{TweetSharp.Model.IModel})">
            <summary>
            Initiates a mocking query call.
            </summary>
            <param name="graph">The graph.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNode.Expect(TweetSharp.Model.IModel[])">
            <summary>
            Initiates a mocking query call.
            </summary>
            <param name="graph">The graph.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNode.Expect(System.Int32)">
            <summary>
            Initiates a mocking query call.
            </summary>
            <param name="statusCode">The status code.</param>
            <returns></returns>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.ITwitterNode.Root">
            <summary>
            Gets or sets the query root.
            </summary>
            <value>The query root.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.ITwitterNode.Configuration">
            <summary>
            Gets the query configuration.
            </summary>
            <value>The query configuration.</value>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNode.AsUrl">
            <summary>
            Converts the query into a URL representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNode.AuthenticateAs(System.String,System.String)">
            <summary>
            Authenticates as a user using real credentials.
            This is facilitated by HTTP Basic Authorization, that
            URL-encodes a username and password in the Authorization request header.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNode.AuthenticateWith(System.String,System.String)">
            <summary>
            Authenticates as a user using delegated token-based credentials.
            This is facilitated by OAuth v1.0a, that passes encrypted
            variables in the Authorization request header.
            </summary>
            <param name="token">The token.</param>
            <param name="tokenSecret">The token secret.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNode.CallbackTo(TweetSharp.Twitter.Fluent.TwitterWebCallback)">
            <summary>
            Calling this method will establish the asynchronous callback used when the request receives a response.
            </summary>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNode.RepeatEvery(System.TimeSpan)">
            <summary>
            Repeats an asynchronous query for the allotted time span.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNode.RepeatAfter(System.TimeSpan,System.Int32)">
            <summary>
            Repeats an asynchronous query for the allotted time span,
            Up to the number of times specified.
            </summary>
            <param name="timeSpan">The time span.</param>
            <param name="times">The times.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNodeXml.AsXml">
            <summary>
            Gets the results formatted as XML
            </summary>
            <returns>the xml formatted results</returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeJson">
            <summary>
            Interface for nodes that return results formatted as JSON
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNodeJson.AsJson">
            <summary>
            Gets the results formatted as JSON
            </summary>
            <returns>the JSON formatted results </returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.TwitterNodeBase">
            <summary>
            A base fluent query node that coordinates lower level calls.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterNodeBase.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterNodeBase"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterNodeBase.Expect(System.Collections.Generic.IEnumerable{TweetSharp.Model.IModel})">
            <summary>
            Initiates a mocking query call.
            </summary>
            <param name="graph">The graph.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterNodeBase.Expect(TweetSharp.Model.IModel[])">
            <summary>
            Initiates a mocking query call.
            </summary>
            <param name="graph">The graph.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterNodeBase.Expect(System.Int32)">
            <summary>
            Initiates a mocking query call.
            </summary>
            <param name="statusCode">The status code.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterNodeBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.TwitterNodeBase.Root">
            <summary>
            Gets or sets the query root.
            </summary>
            <value>The query root.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.TwitterNodeBase.Configuration">
            <summary>
            Gets the query configuration.
            </summary>
            <value>The query configuration.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccount">
            <summary>
            Fluent twitter node for the account endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions">
            <summary>
            Fluent interface methods for the Account endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.VerifyCredentials(TweetSharp.Twitter.Fluent.ITwitterAccount)">
            <summary>
            Verifies that the provided credentials are valid
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.EndSession(TweetSharp.Twitter.Fluent.ITwitterAccount)">
            <summary>
            Causes Twitter to return a null cookie. Generally not needed for clients. 
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.UpdateDeliveryDeviceTo(TweetSharp.Twitter.Fluent.ITwitterAccount,TweetSharp.Twitter.Model.TwitterDeliveryDevice)">
            <summary>
            Changes the notification delivery device settings for the authenticating user
            </summary>
            <param name="instance"></param>
            <param name="device">A <see cref="T:TweetSharp.Twitter.Model.TwitterDeliveryDevice"/> describing the device</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.UpdateProfileColors(TweetSharp.Twitter.Fluent.ITwitterAccount)">
            <summary>
            Updates the website profile colors for the authenticating user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.UpdateProfileImage(TweetSharp.Twitter.Fluent.ITwitterAccount,System.String)">
            <summary>
            Changes the profile image (avatar) for the authenticating uer
            </summary>
            <param name="instance"></param>
            <param name="path">Path to the new avatar image</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.UpdateProfileBackgroundImage(TweetSharp.Twitter.Fluent.ITwitterAccount,System.String)">
            <summary>
            Changes the website background image for the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="path">Path to the new background image file</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.GetRateLimitStatus(TweetSharp.Twitter.Fluent.ITwitterAccount)">
            <summary>
            Gets the current rate limiting details for the authenticating user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterAccountExtensions.UpdateProfile(TweetSharp.Twitter.Fluent.ITwitterAccount)">
            <summary>
            Update profile data for the authenticating user. 
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountRateLimitStatus">
            <summary>
            Interface for nodes that query the rate limit status
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountUpdateDeliveryDevice">
            <summary>
            Fluent twitter node for the (account) update notification delivery device endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountUpdateLocation">
            <summary>
            Fluent twitter node for the (account) update location endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileBackgroundImage">
            <summary>
            Fluent twitter node for the (account) update profile background image endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.Extensions">
            <summary>
            Extension methods for Authentication
            </summary>
            <summary>
            Extension methods for search parameters.
            </summary>
            <summary>
            Extention Methods for Messages
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateProfileBackgroundColor(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileColors,System.Drawing.Color)">
            <summary>
            Updates the color of the profile background.
            </summary>
            <param name="instance">The instance.</param>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateProfileTextColor(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileColors,System.Drawing.Color)">
            <summary>
            Updates the color of the profile text.
            </summary>
            <param name="instance">The instance.</param>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateProfileLinkColor(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileColors,System.Drawing.Color)">
            <summary>
            Updates the color of the profile link.
            </summary>
            <param name="instance">The instance.</param>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateProfileSidebarFillColor(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileColors,System.Drawing.Color)">
            <summary>
            Updates the color of the profile sidebar fill.
            </summary>
            <param name="instance">The instance.</param>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateProfileSidebarBorderColor(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileColors,System.Drawing.Color)">
            <summary>
            Updates the color of the profile sidebar border.
            </summary>
            <param name="instance">The instance.</param>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateProfileBackgroundColor(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileColors,System.String)">
            <summary>
            Updates the color of the profile background.
            </summary>
            <param name="instance">The instance.</param>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateProfileTextColor(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileColors,System.String)">
            <summary>
            Updates the color of the profile text.
            </summary>
            <param name="instance">The instance.</param>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateProfileLinkColor(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileColors,System.String)">
            <summary>
            Updates the color of the profile link.
            </summary>
            <param name="instance">The instance.</param>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateProfileSidebarFillColor(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileColors,System.String)">
            <summary>
            Updates the color of the profile sidebar fill.
            </summary>
            <param name="instance">The instance.</param>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateProfileSidebarBorderColor(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileColors,System.String)">
            <summary>
            Updates the color of the profile sidebar border.
            </summary>
            <param name="instance">The instance.</param>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateName(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfile,System.String)">
            <summary>
            Updates the user profile name.
            </summary>
            <param name="instance">The instance.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateEmail(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfile,System.Net.Mail.MailAddress)">
            <summary>
            Updates the user profile email.
            </summary>
            <param name="instance">The instance.</param>
            <param name="email">The email.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateEmail(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfile,System.String)">
            <summary>
            Updates the user profile email.
            </summary>
            <param name="instance">The instance.</param>
            <param name="email">The email.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateUrl(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfile,System.String)">
            <summary>
            Updates the user profile URL.
            </summary>
            <param name="instance">The instance.</param>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateUrl(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfile,System.Uri)">
            <summary>
            Updates the user profile URL.
            </summary>
            <param name="instance">The instance.</param>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateLocation(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfile,System.String)">
            <summary>
            Updates the user profile location. This is self-described and does not contain geolocation data.
            </summary>
            <param name="instance">The instance.</param>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UpdateDescription(TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfile,System.String)">
            <summary>
            Updates the user profile description / bio.
            </summary>
            <param name="instance">The instance.</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetRequestToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String)">
            <summary>
            Gets the request token.
            </summary>
            <param name="instance">The instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="callbackUrl">The callback URL, which overrides the URL set via Twitter.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetRequestToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String)">
            <summary>
            Gets the request token.
            </summary>
            <param name="instance">The instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetRequestToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication)">
            <summary>
            Gets the request token.
            </summary>
            <param name="instance">The fluent twitter instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthorizeDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The fluent twitter instance.</param>
            <param name="token">The token.</param>
            <returns>The fluent twitter instance.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthorizeDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String)">
            <summary>
            Performs the step of authorizing a desktop application. Launches the default browser which will prompt the user
            to authorize your app on the provider's site. 
            </summary>
            <param name="instance"></param>
            <param name="token">the request token</param>
            <param name="callback">the url to redirect the user's browser to once authorization is complete</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthorizeDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The fluent twitter instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="token">The token.</param>
            <returns>The fluent twitter instance.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthorizeDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="token">The token.</param>
            <param name="callback">The callback url.</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthenticateDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The token.</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthenticateDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The token.</param>
            <param name="callback">the callback url</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthenticateDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The token.</param>
            <param name="consumerKey">your application's consumer key</param>
            <param name="consumerSecret">the secret associated with the <code>consumerKey</code></param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.AuthenticateDesktop(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String,System.String)">
            <summary>
            Authorizes the desktop by shelling out to the browser
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The token.</param>
            <param name="consumerKey">your application's consumer key</param>
            <param name="consumerSecret">the secret associated with the <code>consumerKey</code></param>
            <param name="callback">the callback url</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAccessToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String)">
            <summary>
            Requests the access token.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="token">The request token.</param>
            <returns>The FluentTwitter instance.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAccessToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String,System.String)">
            <summary>
            Requests the access token.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="token">The request token.</param>
            <param name="verifier">The PIN.</param>
            <returns>The FluentTwitter instance.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAccessToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String)">
            <summary>
            Gets the access token.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The request token.</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAccessToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String)">
            <summary>
            Gets the access token.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The request token.</param>
            <param name="verifier">The verifier (PIN).</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetClientAuthAccessToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String,System.String,System.String)">
            <summary>
            Requests the access token using client authentication, which does not require
            a browser.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>The FluentTwitter instance.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetClientAuthAccessToken(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String)">
            <summary>
            Requests the access token using client authentication, which does not require
            a browser.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>The FluentTwitter instance.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAuthorizationUrl(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String)">
            <summary>
            Gets the authorization URL used in the OAuth process.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The request token.</param>
            <returns>The authorization url</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAuthorizationUrl(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String)">
            <summary>
            Gets the authorization URL used in the OAuth process.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The request token.</param>
            <param name="callback">The callback.</param>
            <returns>The authorization url</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAuthenticationUrl(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String)">
            <summary>
            Gets the authorization URL used in the OAuth process.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The request token.</param>
            <returns>the authorization url</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetAuthenticationUrl(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String,System.String)">
            <summary>
            Gets the authorization URL used in the OAuth process.
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="token">The request token.</param>
            <param name="callback">The callback.</param>
            <returns>The authorization url</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.SetVerifier(TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication,System.String)">
            <summary>
            Sets the OAuth verifier (PIN) provided by the service to the user to enter manually.
            This method is used during desktop authentication, to set the verifier after the fact,
            since it cannot be guessed and is never provided by Twitter.
            </summary>
            <param name="instance">The fluent twitter instance.</param>
            <param name="verifier">The PIN obtained from the user who authorized the application.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterBlocksList,System.Int32)">
            <summary>
            Requests a specific page of ids when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseUpdateTruncation(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration)">
            <summary>
            When this configuration option is called, any status updates that are longer than the
            140 character option are truncated prior to sending. By default, updates longer than
            140 characters will throw a <see cref="T:TweetSharp.TweetSharpException"/>
            </summary>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CacheWith(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,Hammock.Caching.ICache)">
            <summary>
            When this configuration option is called, the specified cache provider is used for any subsequent
            caching on the request. The default caching strategy is this method is not used, is <see cref="T:Hammock.Caching.AspNetCache"/>.
            </summary>
            <param name="cache">The caching strategy to use</param>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CacheUntil(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.DateTime)">
            <summary>
            When this configuration option is called, any request made inside the specified absolute expiration date,
            is served from the client cache rather than from a request made to Twitter.
            </summary>
            <param name="absoluteExpiration">The specified local time that the cache for the request as defined will expire</param>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CacheForInactivityOf(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.TimeSpan)">
            <summary>
            When this configuration option is called, any request made inside the specified sliding expiratino date,
            is served from the client cache rather than from a request made to Twitter. Sliding expiration countdown begins
            from the last time a request for the same URL was executed.
            </summary>
            <param name="slidingExpiration">The specified amount of inactivity that may elapse before expiring the cache</param>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseRateLimiting(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.Predicate{Hammock.Tasks.IRateLimitStatus},System.Func{Hammock.Tasks.IRateLimitStatus})">
            <summary>
            Throttles recurring task using a calculation, using the return value from the predicate to determine if the task should run
            </summary>
            <param name="instance">The instance.</param>
            <param name="predicate">Predicate - will not run query if false is returned.</param>
            <param name="getRateLimitFunction">User provided function to get the RateLimit status</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseRateLimiting(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.Double)">
            <summary>
            Throttles recurring task using a calculation, limiting it to a percentage of the periodic total rate limit
            </summary>
            <param name="instance">The instance.</param>
            <param name="percentOfTotalLimit">Percentage of the user's total rate limit to allocate for this recurring request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseRateLimiting(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.Double,System.Func{Hammock.Tasks.IRateLimitStatus})">
            <summary>
            Throttles recurring task using a calculation, limiting it to a percentage of the periodic total rate limit
            </summary>
            <param name="instance">The instance.</param>
            <param name="percentOfTotalLimit">Percentage of the user's total rate limit to allocate for this recurring request</param>
            <param name="getRateLimitFunction">User provided function to get the rate limit status</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseProxy(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.String)">
            <summary>
            When this configuration option is called, the query request is sent via the specified proxy URL,
            rather than directly to Twitter.
            <remarks>
            Currently, the .NET default of using the Internet Explorer defined proxy as a default for all
            outgoing requests is in place, but may change before the version 1.0 release.
            </remarks>
            </summary>
            <param name="url">The URL of a proxy to use</param>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseTransparentProxy(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.String)">
            <summary>
            Uses the transparent proxy instead of calling twitter directly
            </summary>
            <param name="instance">The FluentTwitter instance.</param>
            <param name="url">The transparent proxy URL.</param>
            <returns>The FluentTwitter instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseGzipCompression(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration)">
            <summary>
            When this configuration option is called, the query request is sent as GZIP encoded content,
            and automatically decompressed when received. This is useful for requests that retrieve a large
            number of results, but will increase bandwidth on smaller requests.
            </summary>
            <param name="instance">The current position in the fluent expression</param>
            <returns>The current position in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseAutomaticRetries(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,TweetSharp.Twitter.Fluent.RetryOn,System.Int32)">
            <summary>
            Sets up automatic retries for the error conditions indicated in 'retryPolicies'
            </summary>
            <param name="instance">The intance</param>
            <param name="retryOn">The error condition(s) that trigger a retry</param>
            <param name="maximumRetries">Max number of times to retry.  If exhausted, the last error will be returned</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.TimeoutAfter(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.TimeSpan)">
            <summary>
            Configures the query to timeout at a specified time.
            This timeout applies to the length of time needed to process an HTTP request.
            </summary>
            <param name="instance">The instance.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UseHttps(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration)">
            <summary>
            Configures TweetSharp to use https endpoints when connecting to twitter. Has no effect 
            if the <see cref="M:TweetSharp.Twitter.Fluent.Extensions.UseTransparentProxy(TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration,System.String)">UseTransparentProxy</see> sets a proxy server to
            use instead of calling the twitter endpoints directly. 
            </summary>
            <param name="instance">The intance</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpPost(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesDestroy)">
            <summary>
            Uses the HTTP POST verb to perform the action
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpDelete(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesDestroy)">
            <summary>
            Uses the HTTP DELETE verb to perform the action
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterFavoritesGet,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterFavoritesGet,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithNotifications(TweetSharp.Twitter.Fluent.ITwitterFriendshipsCreate)">
            <summary>
            Newly followed user should be added to the notifications list as well
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithoutNotifications(TweetSharp.Twitter.Fluent.ITwitterFriendshipsCreate)">
            <summary>
            Newly followed user should not be added to the notifications list as well
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpPost(TweetSharp.Twitter.Fluent.ITwitterFriendshipsDestroy)">
            <summary>
            Use the POST verb to perform this action
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpDelete(TweetSharp.Twitter.Fluent.ITwitterFriendshipsDestroy)">
            <summary>
            Use the DELETE verb to perform this action
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.IsFriendsWith(TweetSharp.Twitter.Fluent.ITwitterFriendshipsExists,System.Int32)">
            <summary>
            Requests verification that the authenticated user follows the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">the ID of the user whose followee status is being queried</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.IsFriendsWith(TweetSharp.Twitter.Fluent.ITwitterFriendshipsExists,System.Int64)">
            <summary>
            Requests verification that the authenticated user follows the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">the ID of the user whose followee status is being queried</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.IsFriendsWith(TweetSharp.Twitter.Fluent.ITwitterFriendshipsExists,System.String)">
            <summary>
            Requests verification that the authenticated user follows the specified user
            </summary>
            <param name="instance"></param>
            <param name="screenName">the screen name of the user whose followee status is being queried</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterFriendshipsIncoming)">
            <summary>
            Gets the default cursor used to return the first page of pending follower ids
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterFriendshipsIncoming,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of pending follower ids
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of pending follower ids to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterFriendshipsOutgoing)">
            <summary>
            Gets the default cursor used to return the first page of pending friend ids
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterFriendshipsOutgoing,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of pending friend ids
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of pending friend ids to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterListsGet)">
            <summary>
            Gets the default cursor used to return the first page of user lists.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterListsGet,System.Int64)">
            <summary>
            Gets the cursor used to return the corresponding page of user lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of friend/follower ids to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterListsMemberships)">
            <summary>
            Gets the default cursor used to return the first page of results
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterListsMemberships,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of results
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of results to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterListsMembers)">
            <summary>
            Gets the default cursor used to return the first page of results
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterListsMembers,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of results
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of results to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterListsStatuses,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterListsStatuses,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterListsStatuses,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterListsStatuses,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterListsStatuses,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterListsStatuses,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterListsSubscribers)">
            <summary>
            Gets the default cursor used to return the first page of results
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterListsSubscribers,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of results
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of results to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterListsSubscriptions)">
            <summary>
            Gets the default cursor used to return the first page of results
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterListsSubscriptions,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of results
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of results to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpPost(TweetSharp.Twitter.Fluent.ITwitterSavedSearchesDestroy)">
            <summary>
            Uses the HTTP POST verb to perform the action
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpDelete(TweetSharp.Twitter.Fluent.ITwitterSavedSearchesDestroy)">
            <summary>
            Uses the HTTP DELETE verb to perform the action
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Containing(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets containing the given phrase.
            </summary>
            <param name="instance"></param>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.NotContaining(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets that do not contain the given phrase.
            </summary>
            <param name="instance"></param>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.FromUser(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets from the given user.
            </summary>
            <param name="instance"></param>
            <param name="screenName"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ToUser(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets to the given user.
            </summary>
            <param name="instance"></param>
            <param name="screenName"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ContainingHashTag(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets containing the given hashtag.
            </summary>
            <param name="instance"></param>
            <param name="hashTag"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ReferencingUser(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets in reference to the given user.
            </summary>
            <param name="instance"></param>
            <param name="screenName"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithNegativity(TweetSharp.Twitter.Fluent.ITwitterSearchQuery)">
            <summary>
            Searches for tweets with negative wording.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithPositivity(TweetSharp.Twitter.Fluent.ITwitterSearchQuery)">
            <summary>
            Searches for tweets with positive wording.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithNeutrality(TweetSharp.Twitter.Fluent.ITwitterSearchQuery)">
            <summary>
            Searches for tweets with neutral wording. Used as a way to
            reset previous sentiment selections on an existing query.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithQuestion(TweetSharp.Twitter.Fluent.ITwitterSearchQuery)">
            <summary>
            Searches for tweets containing a question
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ContainingLinks(TweetSharp.Twitter.Fluent.ITwitterSearchQuery)">
            <summary>
            Searches for tweets that contain embedded links.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InLanguage(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets in a given language.
            Uses the two-letter ISO code, i.e. "en" to represent the language.
            </summary>
            <param name="instance"></param>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InLanguage(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Globalization.CultureInfo)">
            <summary>
            Searches for tweets in a given language. 
            Uses the two-letter ISO code, i.e. "en" to represent the language.
            Uses the given CultureInfo to locate a two-letter ISO code for the language.
            </summary>
            <param name="instance"></param>
            <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"/> from which to derive a two-letter ISO code</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InLocale(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.String)">
            <summary>
            Searches for tweets from a given language. For client searches.
            Uses the two-letter ISO code, i.e. "en" to represent the language.
            Currently only "ja" is effective.
            </summary>
            <param name="instance"></param>
            <param name="languageCode">The two-letter ISO code representing the language</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InLocale(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Globalization.CultureInfo)">
            <summary>
            Indicates the search query phrase itself is in a given language.
            Uses the two-letter ISO code, i.e. "en" to represent the language.
            Currently only "ja" is effective.
            </summary>
            <param name="instance"></param>
            <param name="cultureInfo">The two-letter ISO code representing the language</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Int32)">
            <summary>
            Specifies the number of tweets to return per page result.
            </summary>
            <param name="instance"></param>
            <param name="tweetsPerPage"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Int32)">
            <summary>
            Specifies the page of tweets to return. Omitting this expression is equivalent to
            requesting the first page. The number of tweets per page is either a Twitter default,
            or the value provided using <seealso cref="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Int32)"/>.
            </summary>
            <param name="instance"></param>
            <param name="page">The requested page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Int64)">
            <summary>
            Returns only tweets before the given status ID.
            </summary>
            <param name="instance"></param>
            <param name="id">The status ID</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Int32)">
            <summary>
            Returns only tweets before the given status ID.
            </summary>
            <param name="instance"></param>
            <param name="id">The status ID</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Int32)">
            <summary>
            Returns only tweets since the last status ID.
            </summary>
            <param name="instance"></param>
            <param name="id">The status ID</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Int64)">
            <summary>
            Returns only tweets since the last status ID.
            </summary>
            <param name="instance"></param>
            <param name="id">The status ID</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Within(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Double)">
            <summary>
            Searches tweets within a given mile radius. This method must be used with the
            <seealso cref="M:TweetSharp.Twitter.Fluent.Extensions.Of(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Double,System.Double)"/> expression to provide a complete
            command. This will likely change with evolution of the Twitter API.
            </summary>
            <param name="instance"></param>
            <param name="miles"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.DateTime)">
            <summary>
            Returns only tweets that fall on or after the given date. Use the convenient
            extension methods provided for spanning time, i.e.
            <example>
                .Since(10.Days().Ago())
            </example>
            </summary>
            <param name="instance"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.SinceUntil(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.DateTime)">
            <summary>
            Returns only tweets that fall on or before a given date. Use the convenient
            extension methods provided for spanning time, i.e.
            <example>
                .SinceUntil(30.Minutes().Ago())
            </example>
            </summary>
            <param name="instance"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Of(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,System.Double,System.Double)">
            <summary>
            Use this method combined with <code>Within(double miles)</code> to search areas around geo locations
            </summary>
            <param name="instance"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Of(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Use this method combined with <code>Within(double miles)</code> to search areas around geo locations
            </summary>
            <param name="instance"></param>
            <param name="location">The <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/> to constrain the search with</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithResultType(TweetSharp.Twitter.Fluent.ITwitterSearchQuery,TweetSharp.Twitter.Fluent.SearchResultType)">
            <summary>
            Use this method to designate what type of search results are desired with a query.
            </summary>
            <param name="instance"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Current(TweetSharp.Twitter.Fluent.ITwitterSearchTrends)">
            <summary>
            Gets current trending topics.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Daily(TweetSharp.Twitter.Fluent.ITwitterSearchTrends)">
            <summary>
            Gets daily trending topics.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Weekly(TweetSharp.Twitter.Fluent.ITwitterSearchTrends)">
            <summary>
            Gets weekly trending topics.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ExcludeHashtags(TweetSharp.Twitter.Fluent.ITwitterSearchTrends)">
            <summary>
            In this query, exclude results with hashtags.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.On(TweetSharp.Twitter.Fluent.ITwitterSearchTrends,System.DateTime)">
            <summary>
            In this query, restrict results to the given start date.
            </summary>
            <param name="instance">The instance.</param>
            <param name="startDate">The start date.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterSearchTrends,System.DateTime)">
            <summary>
            In this query, restrict results to the given start date.
            </summary>
            <param name="instance">The instance.</param>
            <param name="startDate">The start date.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFriends(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds)">
            <summary>
            Gets IDs of the friends of the authenticated user.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFriendsOf(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.Int32)">
            <summary>
            Gets IDs of the friends of the specified user.
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The ID of the user to get the friends of.</param>
            <returns>The Instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFriendsOf(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.Int64)">
            <summary>
            Gets IDs of the friends of the specified user.
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The ID of the user to get the friends of.</param>
            <returns>The Instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFriendsOf(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.String)">
            <summary>
            Gets IDs of the friends of the specified user.
            </summary>
            <param name="instance">The instance.</param>
            <param name="screenName">Screen name of user to get the friends of.</param>
            <returns>the Instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFollowers(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds)">
            <summary>
            Gets the IDs of the followers of the authenticated user.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The Instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFollowersOf(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.Int32)">
            <summary>
            Gets the IDs of the followers of the specified user.
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The ID of the user whos followers to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFollowersOf(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.Int64)">
            <summary>
            Gets the IDs of the followers of the specified user.
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The ID of the user whos followers to get.</param>
            <returns>the instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.ForFollowersOf(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.String)">
            <summary>
            Gets the IDs of the followers of the specified user.
            </summary>
            <param name="instance">The instance.</param>
            <param name="screenName">The screen name of the user whos followers to get</param>
            <returns>the instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds)">
            <summary>
            Gets the default cursor used to return the first page of friend or follower ids
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of friend or follower ids
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of friend/follower ids to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpPost(TweetSharp.Twitter.Fluent.ITwitterStatusDestroy)">
            <summary>
            Specifies that the expression query should be sent as an HTTP POST.
            </summary>
            <param name="instance">The current expression node</param>
            <returns>The current expression node</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.UsingHttpDelete(TweetSharp.Twitter.Fluent.ITwitterStatusDestroy)">
            <summary>
            Specifies that the expression query should be sent as an HTTP DELETE.
            </summary>
            <param name="instance">The current expression node</param>
            <returns>The current expression node</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterHomeTimeline,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterHomeTimeline,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterHomeTimeline,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterHomeTimeline,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterHomeTimeline,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterHomeTimeline,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterListTimeline,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterListTimeline,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterListTimeline,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterListTimeline,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterListTimeline,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterListTimeline,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterStatusMentions,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterStatusMentions,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterStatusMentions,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterStatusMentions,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterStatusMentions,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterStatusMentions,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweets,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterRetweets,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweets,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterRetweets,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the high-water mark for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterRetweets,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterRetweets,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="count">the number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InReplyToStatus(TweetSharp.Twitter.Fluent.ITwitterStatusUpdate,System.Int32)">
            <summary>
            Sets the ID of the tweet that this status is in reply to
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The ID of the tweet that this status is in reply to.</param>
            <returns>the instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InReplyToStatus(TweetSharp.Twitter.Fluent.ITwitterStatusUpdate,System.Int64)">
            <summary>
            Sets the ID of the tweet that this status is in reply to
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The ID of the tweet that this status is in reply to.</param>
            <returns>the instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.InReplyToStatus(TweetSharp.Twitter.Fluent.ITwitterStatusUpdate,TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Sets the ID of the tweet that this status is in reply to.
            </summary>
            <param name="instance">The instance.</param>
            <param name="status">The tweet that this status is in reply to.</param>
            <returns>the instance</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.From(TweetSharp.Twitter.Fluent.ITwitterStatusUpdate,System.Double,System.Double)">
            <summary>
            Specifies geolocation info to associate with the tweet.
            </summary>
            <param name="instance">The instance.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.From(TweetSharp.Twitter.Fluent.ITwitterStatusUpdate,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Specifies geolocation info to associate with the tweet.
            </summary>
            <param name="instance">The instance.</param>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.Int32)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Since(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.Int64)">
            <summary>
            Requests only statuses posted after the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the lower limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.Int32)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Before(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.Int64)">
            <summary>
            Requests only statuses posted before the status with a specific id
            </summary>
            <param name="instance"></param>
            <param name="id">ID of a status that is the upper limit for requested statuses</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="page">The expected page</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.Int32)">
            <summary>
            Requests a specific number of statuses per page.
            Restricted by Twitter API pagination limits.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits" />
            <remarks>
            </remarks>
            <param name="instance"></param>
            <param name="count">The number of expected results</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.String)">
            <summary>
            This query pertains to the given user.
            </summary>
            <param name="instance">The instance.</param>
            <param name="screenName">The user screen name.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserTimeline,System.Int32)">
            <summary>
            This query pertains to the given user.
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The user ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,System.TimeSpan)">
            <summary>
            Sets the amount of time to listen to the filter stream for
            </summary>
            <param name="instance"></param>
            <param name="duration">The duration of the streaming operation</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,System.Int32)">
            <summary>
            Sets the number of statuses to wait for from the stream before invoking the callback method
            </summary>
            <param name="instance"></param>
            <param name="resultsPerCallback">The number of results to acquire from the stream between callback invocations</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithBacklog(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,System.Int32)">
            <summary>
            Requests a backlog of tweets before streaming live.
            Use a value between -150,000 and 150,000.
            If a negative value is passed, the stream will close after the backlog is sent.
            <remarks>
            You must have elevated access (greater than "default") to use this parameter.
            </remarks>
            </summary>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation" />
            <param name="instance">The query chain.</param>
            <param name="count">The number of previous statuses to backlog.</param>
            <returns>The query chain.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.DelimitedBy(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,System.Int32)">
            <summary>
            Defines the number of spaces between streaming results.
            Generally, you do not need to set this.
            </summary>
            <param name="instance">The instance.</param>
            <param name="length">The length.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation" />
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Following(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,System.Collections.Generic.IEnumerable{TweetSharp.Twitter.Model.TwitterUser})">
            <summary>
            Specifies a user filter for streaming.
            </summary>
            <param name="instance">The instance.</param>
            <param name="users">The users.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation" />
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Following(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Specifies a user filter for streaming.
            </summary>
            <param name="instance">The instance.</param>
            <param name="userIds">The user IDs.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation" />
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Following(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,TweetSharp.Twitter.Model.TwitterUser[])">
            <summary>
            Specifies a user filter for streaming.
            </summary>
            <param name="instance">The instance.</param>
            <param name="users">The users.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation" />
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Following(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,System.Int32[])">
            <summary>
            Specifies a user filter for streaming.
            </summary>
            <param name="instance">The instance.</param>
            <param name="userIds">The user IDs.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation" />
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Tracking(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Specifies keywords to filter the stream.
            </summary>
            <param name="instance">The instance.</param>
            <param name="keywords">The keywords.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation" />
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Tracking(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,System.String[])">
            <summary>
            Specifies keywords to filter the stream.
            </summary>
            <param name="instance">The instance.</param>
            <param name="keywords">The keywords.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation" />
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Within(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,System.Collections.Generic.IEnumerable{TweetSharp.Twitter.Model.TwitterGeoLocation})">
            <summary>
            Specifies a range of geo-locations to filter the stream.
            </summary>
            <param name="instance">The instance.</param>
            <param name="locations">The locations.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation" />
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Within(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,TweetSharp.Twitter.Model.TwitterGeoLocation,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Specifies a range of geo-locations to filter the stream.
            Uses bounding boxes.
            </summary>
            <param name="instance">The instance.</param>
            <param name="southWest">The south west bounding box.</param>
            <param name="northEast">The north east bounding box.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation" />
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Within(TweetSharp.Twitter.Fluent.ITwitterStreamingFilter,TweetSharp.Twitter.Model.TwitterGeoLocation[])">
            <summary>
            Specifies a range of geo-locations to filter the stream.
            Uses bounding boxes.
            </summary>
            <param name="instance">The instance.</param>
            <param name="locations">The bounding box locations.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation" />
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterStreamingFirehose,System.TimeSpan)">
            <summary>
            Sets the amount of time to listen to the firehose stream for
            </summary>
            <param name="instance"></param>
            <param name="duration">The duration of the streaming operation</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterStreamingFirehose,System.Int32)">
            <summary>
            Sets the number of statuses to wait for from the stream before invoking the callback method
            </summary>
            <param name="instance"></param>
            <param name="resultsPerCallback">The number of results to acquire from the stream between callback invocations</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.WithBacklog(TweetSharp.Twitter.Fluent.ITwitterStreamingFirehose,System.Int32)">
            <summary>
            Requests a backlog of tweets before streaming live.
            Use a value between -150,000 and 150,000.
            If a negative value is passed, the stream will close after the backlog is sent. 
            </summary>
            <remarks>
            You must have elevated access (greater than "default") to use this parameter.
            </remarks>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation#count" />
            <param name="instance">The query chain.</param>
            <param name="count">The number of previous statuses to backlog.</param>
            <returns>The query chain.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.DelimitedBy(TweetSharp.Twitter.Fluent.ITwitterStreamingFirehose,System.Int32)">
            <summary>
            Indicates that statuses should be delimited in the stream.
            Statuses are represented by a length in bytes, a newline, and the status text that is exactly 'length' bytes.
            </summary>
            <param name="instance">The instance.</param>
            <param name="length">length in bytes</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterStreamingRetweet,System.TimeSpan)">
            <summary>
            Sets the amount of time to listen to the retweet stream for
            </summary>
            <param name="instance"></param>
            <param name="duration">The duration of the streaming operation</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterStreamingRetweet,System.Int32)">
            <summary>
            Sets the number of statuses to wait for from the stream before invoking the callback method
            </summary>
            <param name="instance"></param>
            <param name="resultsPerCallback">The number of results to acquire from the stream between callback invocations</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.DelimitedBy(TweetSharp.Twitter.Fluent.ITwitterStreamingRetweet,System.Int32)">
            <summary>
            Indicates that statuses should be delimited in the stream. 
            Statuses are represented by a length in bytes, a newline, and the status text that is exactly 'length' bytes.
            </summary>
            <param name="instance"></param>
            <param name="length">length in bytes</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterStreamingSample,System.TimeSpan)">
            <summary>
            Sets the amount of time to listen to the sampling stream for
            </summary>
            <param name="instance"></param>
            <param name="duration">The duration of the streaming operation</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterStreamingSample,System.Int32)">
            <summary>
            Sets the number of statuses to wait for from the stream before invoking the callback method
            </summary>
            <param name="instance"></param>
            <param name="resultsPerCallback">The number of results to acquire from the stream between callback invocations</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.DelimitedBy(TweetSharp.Twitter.Fluent.ITwitterStreamingSample,System.Int32)">
            <summary>
            Indicates that statuses should be delimited in the stream. 
            Statuses are represented by a length in bytes, a newline, and the status text that is exactly 'length' bytes.
            </summary>
            <param name="instance"></param>
            <param name="length">length in bytes</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.OrderBy(TweetSharp.Twitter.Fluent.ITwitterTrendsAvailable,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Sets the order location for the query
            </summary>
            <param name="instance"></param>
            <param name="location">the location to use</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterUserFollowers)">
            <summary>
            Gets the default cursor used to return the first page of followers
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterUserFollowers,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of followers 
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of friend/follower ids to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserFollowers,System.String)">
            <summary>
            Gets the followers for the specified user 
            </summary>
            <param name="instance"></param>
            <param name="screenName">Screen name of the user for whom to get followers</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserFollowers,System.Int32)">
            <summary>
            Gets the followers for the specified user 
            </summary>
            <param name="instance"></param>
            <param name="id">Id of the user for whom to get followers</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserFollowers,System.Int64)">
            <summary>
            Gets the followers for the specified user 
            </summary>
            <param name="instance"></param>
            <param name="id">Id of the user for whom to get followers</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserFriends,System.String)">
            <summary>
            Gets the friends of the specified user
            </summary>
            <param name="instance"></param>
            <param name="screenName">Screen name of the user for whom to get the list of friends</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserFriends,System.Int32)">
            <summary>
            Gets the friends of the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">Id name of the user for whom to get the list of friends</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.For(TweetSharp.Twitter.Fluent.ITwitterUserFriends,System.Int64)">
            <summary>
            Gets the friends of the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">Id name of the user for whom to get the list of friends</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.CreateCursor(TweetSharp.Twitter.Fluent.ITwitterUserFriends)">
            <summary>
            Gets the default cursor used to return the first page of friends
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.GetCursor(TweetSharp.Twitter.Fluent.ITwitterUserFriends,System.Int64)">
            <summary>
            Gets the cursor used to return corresponding the page of friends 
            </summary>
            <param name="instance">The instance.</param>
            <param name="cursor">The cursor of the page of friend/follower ids to get.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Skip(TweetSharp.Twitter.Fluent.ITwitterUsersSearch,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="pageNumber">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Page(TweetSharp.Twitter.Fluent.ITwitterUsersSearch,System.Int32)">
            <summary>
            Requests a specific page of statuses when paging
            </summary>
            <param name="instance"></param>
            <param name="pageNumber">1-based page number</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Take(TweetSharp.Twitter.Fluent.ITwitterUsersSearch,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="pageCount">Number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.Extensions.Count(TweetSharp.Twitter.Fluent.ITwitterUsersSearch,System.Int32)">
            <summary>
            Requests a specific number of statuses per page 
            </summary>
            <remarks>
             See http://apiwiki.twitter.com/Things-Every-Developer-Should-Know#6Therearepaginationlimits the twitter api documentation for pagination limits
            </remarks>
            <param name="instance"></param>
            <param name="pageCount">the number of statuses per page to request</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileColors">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs to change user profile color settings
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfileImage">
            <summary>
            Fluent twitter node for the update profile image endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountUpdateProfile">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs to update user profile data
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterAccountVerifyCredentials">
            <summary>
            Fluent twitter node for the verify credentials endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication">
            <summary>
            Twitter authentication details interface
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterAuthentication.Root">
            <summary>
            Gets the query root.
            </summary>
            <value>The query root.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocksCreate">
            <summary>
            Node in the fluent expression tree for accessing the Twitter API to block other users
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocksDestroy">
            <summary>
            Fluent twitter node for the block deletion endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocksExists">
            <summary>
            Fluent twitter node for the block existence checking endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocks">
            <summary>
            Node in the fluent expression tree for accessing Twitter APIs to block and unblock other users
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions">
            <summary>
            Fluent interface methods for the Block endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Block(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.Int32)">
            <summary>
            Blocks a user from following the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="id">ID of the user to block</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Block(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.Int64)">
            <summary>
            Blocks a user from following the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="id">ID of the user to block</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Block(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.String)">
            <summary>
            Blocks a user from following the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="screenName">screen name of the user to block</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Block(TweetSharp.Twitter.Fluent.ITwitterBlocks,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Blocks a user from following the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="user"><see cref="T:TweetSharp.Twitter.Model.TwitterUser"/> representing the user to block</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Unblock(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.Int32)">
            <summary>
            Unblocks a user, allowing them to follow the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="id">ID of the user to unblock</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Unblock(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.Int64)">
            <summary>
            Unblocks a user, allowing them to follow the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="id">ID of the user to unblock</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Unblock(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.String)">
            <summary>
            Unblocks a user, allowing them to follow the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="screenName">screen name of the user to unblock</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Unblock(TweetSharp.Twitter.Fluent.ITwitterBlocks,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Unblocks a user, allowing them to follow the authenticated user
            </summary>
            <param name="instance"></param>
            <param name="user"><see cref="T:TweetSharp.Twitter.Model.TwitterUser"/>representing the user to unblock</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Exists(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.Int64)">
            <summary>
            Checks if the authenticating user is blocking the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">ID of the user whose block status to check</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Exists(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.Int32)">
            <summary>
            Checks if the authenticating user is blocking the specified user
            </summary>
            <param name="instance"></param>
            <param name="id">ID of the user whose block status to check</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Exists(TweetSharp.Twitter.Fluent.ITwitterBlocks,System.String)">
            <summary>
            Checks if the authenticating user is blocking the specified user
            </summary>
            <param name="instance"></param>
            <param name="screenName">screen name of the user whose block status to check</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.Exists(TweetSharp.Twitter.Fluent.ITwitterBlocks,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Checks if the authenticating user is blocking the specified user
            </summary>
            <param name="instance"></param>
            <param name="user"><see cref="T:TweetSharp.Twitter.Model.TwitterUser"/> object representing the user whose block status to check</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.ListUsers(TweetSharp.Twitter.Fluent.ITwitterBlocks)">
            <summary>
            Lists all users blocked by the authenticating user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterBlocksExtensions.ListIds(TweetSharp.Twitter.Fluent.ITwitterBlocks)">
            <summary>
            Lists all ids of users blocked by the authenticating user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocksList">
            <summary>
            Fluent twitter node for the block listing endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterBlocksListIds">
            <summary>
            Fluent twitter node for the list blocked user ids endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration">
            <summary>
            A contract defining elements for Twitter API configuration.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration.Root">
            <summary>
            Gets the query root.
            </summary>
            <value>The query root.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration.TruncateUpdates">
            <summary>
            Gets or sets a value determining if tweets longer than 140 characters
            are truncated before being sent.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration.LimitRate">
            <summary>
            Gets or sets a value determing if client-side rate limiting rules are enforced.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterConfiguration.UseHttps">
            <summary>
            Gets or sets a value determing if HTTPS communication is enforced.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.RetryOn">
            <summary>
             Conditions that will cause the query to be retried. Can be combined
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.Never">
            <summary>
            The query should not be retried
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.FailWhale">
            <summary>
            The query should be retried when twitter responsds with the FailWhale page
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.ServiceError">
            <summary>
            The query should be retried with the service responds with a non-success status
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.Timeout">
            <summary>
            The query should be retried when it times out
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.Network">
            <summary>
            The query should be retired when it times out or another network error occurs
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.FailWhaleOrNetwork">
            <summary>
            The query should be retried when it times out, returns a failwhale, or another network error occurs
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetryOn.ConnectionClosed">
            <summary>
            The query should be retried when the connection is forcibly closed by the server
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesDestroy">
            <summary>
            Fluent twitter node for the destroy direct messages endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterDirectMessages">
            <summary>
            Fluent twitter node for the direct messages endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions">
            <summary>
            Fluent interface methods for accessing direct message endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Received(TweetSharp.Twitter.Fluent.ITwitterDirectMessages)">
            <summary>
            Gets direct messages receieved by the authenticated user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Sent(TweetSharp.Twitter.Fluent.ITwitterDirectMessages)">
            <summary>
            Gets direct messages sent by the authenticated user
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Send(TweetSharp.Twitter.Fluent.ITwitterDirectMessages,System.Int32,System.String)">
            <summary>
            Sends a direct message from the authenticated user to another user
            </summary>
            <param name="instance"></param>
            <param name="id">ID of the user to whom the direct message will be sent</param>
            <param name="text">the text of the message</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Send(TweetSharp.Twitter.Fluent.ITwitterDirectMessages,System.Int64,System.String)">
            <summary>
            Sends a direct message from the authenticated user to another user
            </summary>
            <param name="instance"></param>
            <param name="id">ID of the user to whom the direct message will be sent</param>
            <param name="text">the text of the message</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Send(TweetSharp.Twitter.Fluent.ITwitterDirectMessages,System.String,System.String)">
            <summary>
            Sends a direct message from the authenticated user to another user
            </summary>
            <param name="instance"></param>
            <param name="screenName">screen name of the user to whom the direct message will be sent</param>
            <param name="text">the text of the message</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Destroy(TweetSharp.Twitter.Fluent.ITwitterDirectMessages,System.Int32)">
            <summary>
            Deletes a direct message
            </summary>
            <param name="instance"></param>
            <param name="id">Id of the message to delete</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesExtensions.Destroy(TweetSharp.Twitter.Fluent.ITwitterDirectMessages,System.Int64)">
            <summary>
            Deletes a direct message
            </summary>
            <param name="instance"></param>
            <param name="id">Id of the message to delete</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesNew">
            <summary>
            Fluent twitter node for the new direct messages endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesReceived">
            <summary>
            Node in the fluent expression tree for accessing the Twitter received direct messages APIs
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeAll">
            <summary>
            Inteface for nodes that can return all supported formats
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeSyndicates">
            <summary>
            Interface for nodes that can return either RSS or Atom
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeRss">
            <summary>
            Interface for nodes that return results as RSS
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNodeRss.AsRss">
            <summary>
            Gets the results formatted as RSS
            </summary>
            <returns>the RSS formatted results</returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeAtom">
            <summary>
            Abstract leaf node that can return results as Atom
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterLeafNodeAtom.AsAtom">
            <summary>
            Formats the results as Atom
            </summary>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterDirectMessagesSent">
            <summary>
            Fluent twitter node for the sent direct messages endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterDirect">
            <summary>
            Node in the fluent expression tree for using user-provided endpoints to access the twitter API. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterDirectExtensions">
            <summary>
            Fluent interface methods for setting the http method to use for with direct queries
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterDirectExtensions.Get(TweetSharp.Twitter.Fluent.IFluentTwitterDirect)">
            <summary>
            Performs the direct query as an Http GET 
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitterDirectExtensions.Post(TweetSharp.Twitter.Fluent.IFluentTwitterDirect)">
            <summary>
            Performs the direct query as an Http POST
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.FluentTwitterExtensions">
            <summary>
            Extension methods for the IFluentTwitter Interface
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Statuses(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Statuses" (aka. tweets) subset of the Twitter REST API.
            </summary>
            <param name="instance">The instance.</param>
            <returns>An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterStatuses"/> instance with methods for dealing with statuses.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Users(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Users" subset of the Twitter REST API.
            </summary>
            <param name="instance">The instance.</param>
            <returns>An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterUsers"/> instance with methods for dealing with users</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.ReportSpam(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Spam" subset of the Twitter REST API.
            </summary>
            <param name="instance">The instance.</param>
            <returns>An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterReportSpam"/> instance with methods for dealing with spam</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.DirectMessages(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Direct Messages" subset of theTwitter REST API.
            </summary>
            <param name="instance">The instance.</param>
            <returns>An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterDirectMessages"/> instance with methods for dealing with direct messages</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Friendships(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Friendships" subset of the Twitter REST API.
            </summary>
            <param name="instance">The instance.</param>
            <returns>An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterFriendships"/> instance with methods for dealing with friendships</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.SocialGraph(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Social Graph" subset of the Twitter REST API.
            </summary>
            <param name="instance">The instance.</param>
            <returns>An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterSocialGraph"/> instance with methods for dealing with the social graph</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Account(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Account" subset of the Twitter REST API.
            </summary>
            <param name="instance">The instance.</param>
            <returns>An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterAccount"/> instance with methods for dealing with Accounts</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Favorites(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Favorites" subset of the Twitter REST API.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterFavorites"/> instance with methods for dealing with favorites.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Notifications(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Notifications" subset of the REST API.
            </summary>
            <param name="instance">The instance.</param>
            <returns>An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterNotifications"/> instance with methods for dealing with notifications.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Blocking(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Blocking" subset of the Twitter REST API.
            </summary>
            <param name="instance">The instance.</param>
            <returns>An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterBlocks"/> instance with methods for adding/removing blocks.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.SavedSearches(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Saved Searches" subset of the Twitter REST API.
            </summary>
            <param name="instance">The instance.</param>
            <returns>An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterSavedSearches"/> instance with methods for querying the Twitter service status.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Help(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the "Help" subset of the Twitter REST API.
            </summary>
            <param name="instance">The instance.</param>
            <returns>An ITwitterHelp instance with methods for querying the twitter service status.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Search(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the Twitter Search API.
            </summary>
            <param name="instance">The instance.</param>
            <returns>A ITwitterSearch instance with methods for performing searches.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Direct(TweetSharp.Twitter.Fluent.IFluentTwitter,System.String)">
            <summary>
            Accesses the raw URL path provided, rather than using a fluent interface.
            This method is meant as a safety mechanism when the Twitter API changes, but
            TweetSharp doesn't currently reflect the change.
            </summary>
            <param name="instance">The instance.</param>
            <param name="urlPath">The raw URL path, i.e. "/users/show/bob.xml"</param>
            <returns>A IFluentTwitterDirect instance with methods for performing searches.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Lists(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the Twitter Lists features
            </summary>
            <param name="instance">The instance.</param>
            <returns>An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterLists"/> instance with methods for performing list handling.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Stream(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the Twitter Streaming API features
            </summary>
            <param name="instance">The instance.</param>
            <returns>An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterStream"/> instance with methods for performing streaming.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Trends(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Accesses the Twitter Trends features
            </summary>
            <param name="instance">The instance.</param>
            <returns>An <see cref="T:TweetSharp.Twitter.Fluent.ITwitterTrends"/> instance with methods for performing trending</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.AuthenticateAs(TweetSharp.Twitter.Fluent.IFluentTwitter,System.String,System.String)">
            <summary>
            Authenticates as a user using real credentials.
            This is facilitated by HTTP Basic Authorization, that
            URL-encodes a username and password in the Authorization request header.
            </summary>
            <param name="instance">The instance.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.AuthenticateWith(TweetSharp.Twitter.Fluent.IFluentTwitter,System.String,System.String,System.String,System.String)">
            <summary>
            Authenticates as a user using delegated token-based credentials.
            This is facilitated by OAuth v1.0a, that passes encrypted
            variables in the Authorization request header.
            </summary>
            <param name="instance">The instance.</param>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="token">The token.</param>
            <param name="tokenSecret">The token secret.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.AuthenticateWith(TweetSharp.Twitter.Fluent.IFluentTwitter,System.String,System.String)">
            <summary>
            Authenticates as a user using delegated token-based credentials.
            This is facilitated by OAuth v1.0a, that passes encrypted
            variables in the Authorization request header.
            This method assumes that OAuth consumer info is set in <see cref="T:TweetSharp.TwitterClientInfo"/>.
            </summary>
            <param name="instance">The instance.</param>
            <param name="token">The token.</param>
            <param name="tokenSecret">The token secret.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.CallbackTo(TweetSharp.Twitter.Fluent.IFluentTwitter,TweetSharp.Twitter.Fluent.TwitterWebCallback)">
            <summary>
            Calling this method will establish the asynchronous callback used when the request receives a response.
            </summary>
            <param name="instance">The instance.</param>
            <param name="callback">The callback executed when a request completes in the background</param>
            <returns>The current location in the fluent expression</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.RepeatEvery(TweetSharp.Twitter.Fluent.IFluentTwitter,System.TimeSpan)">
            <summary>
            Repeats an asynchronous query for the allotted time span.
            </summary>
            <param name="instance">The instance.</param>
            <param name="timeSpan">The time span.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.RepeatAfter(TweetSharp.Twitter.Fluent.IFluentTwitter,System.TimeSpan,System.Int32)">
            <summary>
            Repeats an asynchronous query for the allotted time span,
            Up to the number of times specified.
            </summary>
            <param name="instance">The instance.</param>
            <param name="timeSpan">The time span.</param>
            <param name="times">The times.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Expect(TweetSharp.Twitter.Fluent.IFluentTwitter,System.Collections.Generic.IEnumerable{TweetSharp.Model.IModel})">
            <summary>
            Calling this method will enable mocking support, and return the Twitter object graph
            specified when the request is executed. 
            </summary>
            <param name="graph">A graph of objects expected in the response</param>
            <returns>The current location in the fluent expression</returns>
            <param name="instance">The current location in the fluent expression</param>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitterExtensions.Expect(TweetSharp.Twitter.Fluent.IFluentTwitter,System.Int32)">
            <summary>
            Calling this method will enable mocking support, and return the HTTP status code
            specified when the request is executed.
            </summary>
            <param name="instance">The instance.</param>
            <param name="statusCode">The status code.</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFavoritesCreate">
            <summary>
            Interface for nodes that create favorites. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFavoritesDestroy">
            <summary>
            Fluent twitter node for the destroy favorites endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFavoritesGet">
            <summary>
            Interface for nodes that get twitter favorites
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFavorites">
            <summary>
            Fluent twitter node for the favorites endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions">
            <summary>
            Fluent interface methods for accessing the Twitter Favorites endpoints.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.GetFavorites(TweetSharp.Twitter.Fluent.ITwitterFavorites)">
            <summary>
            Gets the tweets marked as favorites by the authenticating user.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.GetFavoritesFor(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.String)">
            <summary>
            Gets the tweets marked as favorites for the specified user.
            </summary>
            <param name="instance"></param>
            <param name="screenName">The screen name of the user for whom to get the list of favorites</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.GetFavoritesFor(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.Int32)">
            <summary>
            Gets the tweets marked as favorites for the specified user.
            </summary>
            <param name="instance"></param>
            <param name="id">The ID of the user for whom to get the list of favorites</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.GetFavoritesFor(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.Int64)">
            <summary>
            Gets the tweets marked as favorites for the specified user.
            </summary>
            <param name="instance"></param>
            <param name="id">The ID of the user for whom to get the list of favorites</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.Favorite(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.Int32)">
            <summary>
            Marks a tweet as one of the authenticating user's favorites.
            </summary>
            <param name="instance"></param>
            <param name="id">Id of the <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> to mark as a favorite</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.Favorite(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.Int64)">
            <summary>
            Marks a tweet as one of the authenticating user's favorites.
            </summary>
            <param name="instance"></param>
            <param name="id">Id of the <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> to mark as a favorite</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.Favorite(TweetSharp.Twitter.Fluent.ITwitterFavorites,TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Marks a tweet as one of the authenticating user's favorites.
            </summary>
            <param name="instance"></param>
            <param name="id">The <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> to mark as a favorite</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.Unfavorite(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.Int32)">
            <summary>
            Unmarks a tweet as one of the authenticating user's favorites.
            </summary>
            <param name="instance"></param>
            <param name="id">The ID of the <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> to unmark as a favorite</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.Unfavorite(TweetSharp.Twitter.Fluent.ITwitterFavorites,System.Int64)">
            <summary>
            Unmarks a tweet as one of the authenticating user's favorites.
            </summary>
            <param name="instance"></param>
            <param name="id">The ID of the <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> to unmark as a favorite</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFavoritesExtensions.Unfavorite(TweetSharp.Twitter.Fluent.ITwitterFavorites,TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Unmarks a tweet as one of the authenticating user's favorites.
            </summary>
            <param name="instance"></param>
            <param name="id">The <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> to unmark as a favorite</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.FluentTwitter">
            <summary>
            This is the main fluent class for building expressions
            bound for the Twitter API.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitter">
            <summary>
            The base fluent query instance for the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitter.Cancel">
            <summary>
            Cancels any recurring or streaming tasks on this query node.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.IFluentTwitter.AsUrl">
            <summary>
            Converts this query node into an API URL representation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.ClientInfo">
            <summary>
            Gets or sets the client info.
            This is used to set OAuth consumer information
            and other metadata on a per-request basis.
            </summary>
            <value>The client info.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.Method">
            <summary>
            Gets or sets the HTTP method used for this query.
            </summary>
            <value>The HTTP method.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.Format">
            <summary>
            Gets or sets the web content format expected in the query response.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.Callback">
            <summary>
            Gets or sets the method callback to invoke after a query response.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.Authentication">
            <summary>
            Gets or sets the authentication info for the query.
            </summary>
            <value>The authentication.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.ExternalAuthentication">
            <summary>
            Gets or sets the external authentication info used for third-party requests.
            </summary>
            <value>The external authentication.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.Profile">
            <summary>
            Gets or sets the user profile query branch.
            </summary>
            <value>The profile.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.Configuration">
            <summary>
            Gets the query configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.SearchParameters">
            <summary>
            Gets the search parameters branch.
            </summary>
            <value>The search parameters.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.StreamingParameters">
            <summary>
            Gets the streaming parameters branch.
            </summary>
            <value>The streaming parameters.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.TrendsParameters">
            <summary>
            Gets the trends parameters branch.
            </summary>
            <value>The trends parameters.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.Parameters">
            <summary>
            Gets the query parameters branch.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.RecurringTask">
            <summary>
            Gets the currently defined periodic task for this query.
            </summary>
            <value>The recurring task.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.RateLimitingRule">
            <summary>
            Gets or sets the current rate limiting rule imposed by this query.
            </summary>
            <value>The rate limiting rule.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.RepeatInterval">
            <summary>
            Gets or sets the repeat interval of a recurring task, if any.
            </summary>
            <value>The repeat interval.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitter.RepeatTimes">
            <summary>
            Gets or sets the repeat count of a recurring task, if any.
            </summary>
            <value>The repeat times.</value>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.Request">
            <summary>
            Makes a sequential call to Twitter to get the results of this query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.BeginRequest">
            <summary>
            Starts the request asynchronously.
            </summary>
            <returns>The <see cref="T:System.IAsyncResult"/> handle for the request</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.BeginRequest(System.Object)">
            <summary>
            Starts the request asynchronously.
            </summary>
            <returns>The <see cref="T:System.IAsyncResult"/> handle for the request</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.EndRequest(System.IAsyncResult)">
            <summary>
            Completes the asynchronous request.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/>handle returned from <see cref="M:TweetSharp.Fluent.FluentBase`1.BeginRequest"/></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.CreateRequest(TweetSharp.TwitterClientInfo)">
            <summary>
            Creates a new composable query, using a specified client and a default platform.
            </summary>
            <param name="clientInfo">The client making the request</param>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.CreateRequest">
            <summary>
            Creates a new composable query, using the default client and platform.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.ValidateUpdateText">
            <summary>
            Validates the update text.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.BuildResult(Hammock.RestResponseBase)">
            <summary>
            Builds a <see cref="T:TweetSharp.Twitter.Model.TwitterResult"/> from a REST response from Hammock.
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.ToString">
            <summary>
            Returns the human-readable query to Twitter representing the current expression.
            If you are storing URLs for sending later, you can use <code>AsUrl()</code> to return
            a URL-encoded string instead.
            </summary>
            <returns>A URL-decoded string representing this expression's query to Twitter</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.AsUrl(System.Boolean)">
            <summary>
            Gets the URL that was/will be used to perform the current query
            </summary>
            <param name="ignoreTransparentProxy">if true, the underlying service API URL is returned, otherwise the transparent proxy is returned.</param>
            <returns>The URL for the query</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.AsUrl">
            <summary>
            Builds a URL from the specified fluent expression instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.FluentTwitter.BuildQuery(System.Boolean,System.String,System.String,System.String)">
            <summary>
            Builds the query.
            </summary>
            <param name="hasAction">if set to <c>true</c> the query uses a URL-based action.</param>
            <param name="format">The format.</param>
            <param name="activity">The activity.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.UrlOAuthAuthority">
            <summary>
            Gets the URL for the OAuth authority.
            </summary>
            <value>The URL O auth authority.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.AuthenticationPair">
            <summary>
            Gets the authentication pair used to authenticate to twitter.
            </summary>
            <value>The authentication pair, typically a username and password or a oauth token and tokensecret.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.SecondaryAuthenticationPair">
            <summary>
            Gets the authentication pair used to authenticate to 3rd party services such as image hosts
            </summary>
            <value>The authentication pair, typically a username and password or a oauth token and tokensecret.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.ExternalAuthentication">
            <summary>
            Gets or sets the external authentication info used for third-party requests.
            </summary>
            <value>The external authentication.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.Profile">
            <summary>
            Gets or sets the user profile query branch.
            </summary>
            <value>The profile.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.SearchParameters">
            <summary>
            Gets the search parameters branch.
            </summary>
            <value>The search parameters.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.Parameters">
            <summary>
            Gets the query parameters branch.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.StreamingParameters">
            <summary>
            Gets the streaming parameters branch.
            </summary>
            <value>The streaming parameters.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.TrendsParameters">
            <summary>
            Gets the trends parameters branch.
            </summary>
            <value>The trends parameters.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.TweetSharp#Twitter#Fluent#IFluentTwitter#RateLimitingRule">
            <summary>
            Gets or sets the current rate limiting rule imposed by this query.
            </summary>
            <value>The rate limiting rule.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.InternalCallback">
            <summary>
            Gets the internal callback.
            </summary>
            <value>The internal callback.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.TweetSharp#Twitter#Fluent#IFluentTwitter#ClientInfo">
            <summary>
            Gets or sets the client info.
            </summary>
            <value>The client info.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitter.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterParameters">
            <summary>
            Paramters used in Twitter queries
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Activity">
            <summary>
            Gets or sets the activity.
            </summary>
            <value>The activity.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.SinceDate">
            <summary>
            Gets or sets the since date.
            </summary>
            <value>The since date.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.SinceId">
            <summary>
            Gets or sets the since id.
            </summary>
            <value>The since id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.MaxId">
            <summary>
            Gets or sets the max id.
            </summary>
            <value>The max id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Count">
            <summary>
            Gets or sets the count of objects to return.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Page">
            <summary>
            Gets or sets the page of objects to request.
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ReturnPerPage">
            <summary>
            Gets or sets the number if items per page to return
            </summary>
            <value>The return per page.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Id">
            <summary>
            Gets or sets the requested id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ScreenName">
            <summary>
            Gets or sets the requested screenname
            </summary>
            <value>The screenname</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.InReplyToStatusId">
            <summary>
            Gets or sets the "in reply to status id" parameter
            </summary>
            <value>The in reply to status id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Email">
            <summary>
            Gets or sets the email address parameter.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.UserScreenName">
            <summary>
            Gets or sets the user screen name parameter
            </summary>
            <value>The user screen name parameter.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.UserId">
            <summary>
            Gets or sets the user id parameter.
            </summary>
            <value>The user id parameter.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Follow">
            <summary>
            Gets or sets the follow parameter.
            </summary>
            <value>The follow parameter.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.VerifyId">
            <summary>
            Gets or sets the verify id parameter.
            </summary>
            <value>The verify id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.VerifyScreenName">
            <summary>
            Gets or sets the verify screen name parameter.
            </summary>
            <value>The verify screen name parameter.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.PostImagePath">
            <summary>
            Gets or sets the post image path.
            </summary>
            <value>The post image path.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.DirectPath">
            <summary>
            Gets or sets a direct URL path to use in place of a fluent query.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.GeoLocation">
            <summary>
            Gets or sets the geospatial location of the query, if applicable.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.Cursor">
            <summary>
            Gets or sets the Cursor ID for the query
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.TargetId">
            <summary>
            Gets or sets the target id (for friendships/show).
            </summary>
            <value>The target id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.SourceId">
            <summary>
            Gets or sets the source id (for friendships/show).
            </summary>
            <value>The source id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.SourceScreenName">
            <summary>
            Gets or sets the name of the source screen (for friendships/show).
            </summary>
            <value>The name of the source screen.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.TargetScreenName">
            <summary>
            Gets or sets the name of the target screen (for friendships/show).
            </summary>
            <value>The name of the target screen.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ListSlug">
            <summary>
            Gets or sets the list slug.
            </summary>
            <value>The list slug.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ListId">
            <summary>
            Gets or sets the list id.
            </summary>
            <value>The list id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ListMode">
            <summary>
            Gets or sets the list mode.
            </summary>
            <value>The list mode.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ListName">
            <summary>
            Gets or sets the name of the list (for creating lists).
            </summary>
            <value>The name of the list.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ListMemberId">
            <summary>
            Gets or sets the list member id.
            </summary>
            <value>The list member id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.ListDescription">
            <summary>
            Gets or sets the list description.
            </summary>
            <value>The list description.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.UserSearch">
            <summary>
            Gets or sets the user search query.
            </summary>
            <value>The user search query.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.CopyTo">
            <summary>
            Gets or sets external services to which a status update will be copied
            </summary>
            <value>Bitfield enumeration of desired external services.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.LookupUserIds">
            <summary>
            Gets or sets the users IDs used in a lookup query.
            </summary>
            <value>The lookup user ids.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterParameters.LookupScreenNames">
            <summary>
            Gets or sets the screen names used in a lookup query.
            </summary>
            <value>The lookup screen names.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterProfile">
            <summary>
             A contract for a node that manages user profile values.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileUrl">
            <summary>
            Gets or sets the profile URL.
            </summary>
            <value>The profile URL.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileLocation">
            <summary>
            Gets or sets the user location.
            </summary>
            <value>The user location.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileDescription">
            <summary>
            Gets or sets the user description.
            </summary>
            <value>The user description.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileDeliveryDevice">
            <summary>
            Gets or sets the profile delivery device.
            </summary>
            <value>The profile delivery device.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileBackgroundColor">
            <summary>
            Gets or sets the color of the profile background.
            </summary>
            <value>The color of the profile background.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileTextColor">
            <summary>
            Gets or sets the color of the profile text.
            </summary>
            <value>The color of the profile text.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileLinkColor">
            <summary>
            Gets or sets the color of the profile link.
            </summary>
            <value>The color of the profile link.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileSidebarFillColor">
            <summary>
            Gets or sets the color of the profile sidebar fill.
            </summary>
            <value>The color of the profile sidebar fill.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileSidebarBorderColor">
            <summary>
            Gets or sets the color of the profile sidebar border.
            </summary>
            <value>The color of the profile sidebar border.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileImagePath">
            <summary>
            Gets or sets the profile image path.
            </summary>
            <value>The profile image path.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterProfile.ProfileBackgroundImagePath">
            <summary>
            Gets or sets the profile background image path.
            </summary>
            <value>The profile background image path.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters">
            <summary>
             Parameters for queries against the Twitter search api
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters">
            <summary>
            Parameters for the Twitter Search Api
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchPhrase">
            <summary>
            Gets or sets the phrase to search for
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchFromUser">
            <summary>
            Gets or sets the screenname of a user whose tweets you want to search
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchToUser">
            <summary>
            Gets or sets the screenname of a user to whom search results are in reply to
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchHashTag">
            <summary>
            Gets or sets the hash tag to search for
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchReferences">
            <summary>
            Gets or sets the screenname of a user who is mentioned in the search results
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchNear">
            <summary>
            Gets or sets a place name from near where the search results should originate
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchMiles">
            <summary>
            Gets or sets the number of miles to use as a search radius
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchSince">
            <summary>
            Gets or sets a begin-date from which to limit search results
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchSinceUntil">
            <summary>
            Gets or sets an end-date to which to limit search results
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchDate">
            <summary>
            Gets or sets a specific date to which to limit search results 
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchNegativity">
            <summary>
            Gets or sets a value indicating whether or not to limit search results to those that are negative in tone
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchPositivity">
            <summary>
            Gets or sets a value indicating whether or not to limit search results to those that are positive in tone
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchContainingLinks">
            <summary>
            Gets or sets a value indicating whether or not to limit search results to those that contain links
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchShowUser">
            <summary>
            Gets or sets a value indicating whether or not to prepend &lt;user&gt;: to the search results
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchQuestion">
            <summary>
            Gets or sets a value indicating whether or not to limit search results to those containing a question
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchCurrentTrends">
            <summary>
            Gets or sets a value indicating whether or not to fetch current trends
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchExcludesHashtags">
            <summary>
            Gets or sets a value indicating whether or not to exclude hash-tag trends from the requested trends 
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchDailyTrends">
            <summary>
            Gets or sets a value indicating whether or not to get trends for a specific day
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchWeeklyTrends">
            <summary>
            Gets or sets a value indicating whether or not to get trends for a specific week
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchLanguage">
            <summary>
            Gets or sets a the desired language to which to limit search results
            Uses the two-letter ISO code, i.e. "en" to represent the language.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchLocale">
            <summary>
            Gets or sets the language code indicating what language the search query itself is in. 
            Currently only "ja" is effective.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchGeoLatitude">
            <summary>
            Gets or sets the latitude for location-based searches
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchGeoLongitude">
            <summary>
            Gets or sets the longitude for location-based searches
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchWithoutPhrase">
            <summary>
            Gets or sets a phrase which should not be included in search results. 
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterSearchParameters.SearchResultType">
            <summary>
            Gets or sets the result type expected in search results.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchPhrase">
            <summary>
            Gets or sets the phrase to search for
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchWithoutPhrase">
            <summary>
            Gets or set a phrase that search results should not contain
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchResultType">
            <summary>
            Gets or sets the result type expected in search results.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchFromUser">
            <summary>
            Gets or sets the user name to search for statuses from
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchToUser">
            <summary>
            Gets or sets the user name to search for statuses to
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchHashTag">
            <summary>
            Gets or sets the hash tag to search for
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchReferences">
            <summary>
            Gets or sets the username that search results should reference
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchNear">
            <summary>
            gets or sets the location name to search for statuses near
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchMiles">
            <summary>
            gets or sets the radius to use for location-based searches
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchSince">
            <summary>
            Gets or sets the baseline time to search for statuses after
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchSinceUntil">
            <summary>
            Gets or sets the time to search for statuses before
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchDate">
            <summary>
            Gets or sets the date to search for statuses posted on
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchNegativity">
            <summary>
            Gets or sets a value indicating whether or not to limit search results 
            to those expressing a negative sentiment
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchPositivity">
            <summary>
            Gets or sets a value indicating whether or not to limit search results 
            to those expressing a positive sentiment
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchContainingLinks">
            <summary>
            Gets or sets a value indicating whether or not to limit search results 
            to those containing links
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchCurrentTrends">
            <summary>
            Gets or sets a value indicating whether or not to limit search results 
            to those referencing current trend
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchExcludesHashtags">
            <summary>
            Gets or sets a value indicating whether or not to exclude 
            trends containing hashtags
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchDailyTrends">
            <summary>
            Gets or sets a value indicating whether or not to fetch 
            daily trends
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchWeeklyTrends">
            <summary>
            Gets or sets a value indicating whether or not to fetch 
            weekly trends
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchShowUser">
            <summary>
            Gets or sets a value indicating whether or not to prepend "&lt;user&gt;:" to search results 
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchLanguage">
            <summary>
            Gets or sets the desired language for search results
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchLocale">
            <summary>
            gets or sets the originating language of the query
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchGeoLatitude">
            <summary>
            Gets or sets the latitude to use as the center of the search
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchGeoLongitude">
            <summary>
            Gets or sets the longitude to use as the center of the search
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.FluentTwitterSearchParameters.SearchQuestion">
            <summary>
            Gets or sets a value indicating whether or not to limit search results to 
            statuses containing a question
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters">
            <summary>
            Parameters for a streaming query request.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.Count">
            <summary>
            Gets or sets the number of results to wait for before ending the stream.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.Length">
            <summary>
            Gets or sets the delimiter length.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.UserIds">
            <summary>
            Gets or sets user IDs used to filter the stream.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.Keywords">
            <summary>
            Gets or sets the keywords used to filter the stream.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.Locations">
            <summary>
            Gets or sets the geo locations used to filter the stream.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.Duration">
            <summary>
            Gets or sets the amount of time to stream results before closing the stream.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.Callback">
            <summary>
            Gets or sets the callback to invoke when the stream reaches the configured batch size.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterStreamingParameters.ResultsPerCallback">
            <summary>
            Gets or sets the number of results to receive between callback invocations.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.IFluentTwitterTrendsParameters">
            <summary>
            Parameters for the trends endpoints
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterTrendsParameters.OrderLocation">
            <summary>
            Gets or sets the GeoLocation to use as the OrderBy value
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Fluent.IFluentTwitterTrendsParameters.WoeId">
            <summary>
            Gets or set the WhereOnEarth Id to use as the OrderBy value
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsCreate">
            <summary>
            Fluent twitter node for the create frendship endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsDestroy">
            <summary>
            Node in the fluent expression tree for unfollowing users
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExists">
            <summary>
            Node in the fluent expression tree for accessing the Twitter API to query 
            for the existence of the friend/follower relationship between users. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsIncoming">
            <summary>
            Node in the fluent expression tree for accessing the APIs to show pending follower requests
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendships">
            <summary>
            Fluent twitter node for the friendships endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions">
            <summary>
            Fluent interface methods for dealing with friendship endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Befriend(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32)">
            <summary>
            Follows another user from the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="id">The ID of the user to follow</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Befriend(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64)">
            <summary>
            Follows another user from the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="id">The ID of the user to follow</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Befriend(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String)">
            <summary>
            Follows another user from the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="screenName">The user name of the user to follow</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Destroy(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32)">
            <summary>
            Unfollows another user from the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="id">The ID of the user to unfollow</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Destroy(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64)">
            <summary>
            Unfollows another user from the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="id">The ID of the user to unfollow</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Destroy(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String)">
            <summary>
            Unfollows another user from the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="screenName">The user name of the user to unfollow</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Verify(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String)">
            <summary>
            Queries whether or not the authenticating user follows another user.
            </summary>
            <param name="instance"></param>
            <param name="screenName">The user name of the user to check for a follower relationship</param>
            <seealso cref="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String)"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Verify(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32)">
            <summary>
            Queries whether or not the authenticating user follows another user.
            </summary>
            <param name="instance"></param>
            <param name="id">The ID of the user to check for a follower relationship</param>
            <seealso cref="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32)"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Verify(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64)">
            <summary>
            Queries whether or not the authenticating user follows another user.
            </summary>
            <param name="instance"></param>
            <param name="id">The ID of the user to check for a follower relationship</param>
            <seealso cref="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64)"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64)">
            <summary>
            Gets detailed information about the relationship between the authenticated user and another user.
            </summary>
            <param name="instance"></param>
            <param name="targetId">Id of the user to get detailed relationship information about</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32)">
            <summary>
            Gets detailed information about the relationship between the authenticated user and another user.
            </summary>
            <param name="instance"></param>
            <param name="targetId">Id of the user to get detailed relationship information about</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String)">
            <summary>
            Gets detailed information about the relationship between the authenticated user and another user.
            </summary>
            <param name="instance"></param>
            <param name="targetScreenName">User name of the user to get detailed relationship information about</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String,System.String)">
            <summary>
            Gets detailed information about the relationship between two users.
            </summary>
            <param name="instance"></param>
            <param name="sourceScreenName">screen name of the subject user</param>
            <param name="targetScreenName">screen name of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32,System.String)">
            <summary>
            Gets detailed information about the relationship between two users.
            </summary>
            <param name="instance"></param>
            <param name="sourceId">ID of the subject user</param>
            <param name="targetScreenName">screen name of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64,System.String)">
            <summary>
            Gets detailed information about the relationship between two users.
            </summary>
            <param name="instance"></param>
            <param name="sourceId">ID of the subject user</param>
            <param name="targetScreenName">screen name of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int64,System.Int64)">
            <summary>
            Gets detailed information about the relationship between two users.
            </summary>
            <param name="instance"></param>
            <param name="sourceId">ID of the subject user</param>
            <param name="targetId">ID of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.Int32,System.Int32)">
            <summary>
            Gets detailed information about the relationship between two users.
            </summary>
            <param name="instance"></param>
            <param name="sourceId">ID of the subject user</param>
            <param name="targetId">ID of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String,System.Int32)">
            <summary>
            Gets detailed information about the relationship between two users.
            </summary>
            <param name="instance"></param>
            <param name="sourceScreenName">name of the subject user</param>
            <param name="targetId">ID of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterFriendships,System.String,System.Int64)">
            <summary>
            Gets detailed information about the relationship between two users.
            </summary>
            <param name="instance"></param>
            <param name="sourceScreenName">name of the subject user</param>
            <param name="targetId">ID of the user that the subject user is following</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Incoming(TweetSharp.Twitter.Fluent.ITwitterFriendships)">
            <summary>
            Gets a list of user IDs who have submitted requests to follow the protected account of the authenticating user.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterFriendshipsExtensions.Outgoing(TweetSharp.Twitter.Fluent.ITwitterFriendships)">
            <summary>
            Gets a list of user IDs to whom the authenticated user has submitted requests to follow and which are still pending.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsOutgoing">
            <summary>
            Node in the fluent expression tree for accessing the APIs to show pending friend requests
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendshipsShow">
            <summary>
            Node in the fluent expression tree for accessing the APIs to show follower relationships between users
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterHelpDowntimeSchedule">
            <summary>
            Node in the fluent expression tree for accessing the APIs that provide updates about planned Twitter Downtime
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterHelp">
            <summary>
            Node in the fluent expression tree for accessing Twitter's Help APIs
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterHelpExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterHelpExtensions.TestService(TweetSharp.Twitter.Fluent.ITwitterHelp)">
            <summary>
            Tests the Twitter service for availability
            </summary>
            <param name="instance">the instance</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterHelpExtensions.GetDowntimeSchedule(TweetSharp.Twitter.Fluent.ITwitterHelp)">
            <summary>
            Requests the planned downtime schedule from Twitter
            </summary>
            <param name="instance">the instance</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterHelpTest">
            <summary>
            Fluent twitter node for the api testing endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLeafNodeXmlJsonAtom">
            <summary>
            Represents a node that returns its results as XML, JSON, or Atom.
            These appeared in September 2009 API announcements.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsCreate">
            <summary>
            Node in the fluent expression tree for accessing Twitter APIs to create lists
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsCreate.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsCreate"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsDelete">
            <summary>
            Fluent twitter node for the list deletion endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsDelete.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsDelete"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsGet">
            <summary>
            Node in the fluent expression tree for accessing Twitter's lists API to get a user's lists. 
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsGet.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsGet"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsIsMember">
            <summary>
            Fluent twitter node for the 'is a member of list' endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsIsMember.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsIsMember"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsIsSubscriber">
            <summary>
            Node in the fluent expression tree for accessing the lists to which the current user subsribes
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsIsSubscriber.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsIsMember"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterLists">
            <summary>
            Fluent twitter node for the lists endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.TwitterListsExtensions">
            <summary>
            Methods for the Twitter Lists API
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetListsBy(TweetSharp.Twitter.Fluent.ITwitterLists,System.String)">
            <summary>
            Gets lists belonging to the specified owner.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetListBy(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String)">
            <summary>
            Gets a single list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetListBy(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Gets a single list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetListBy(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32)">
            <summary>
            Gets a single list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.DeleteList(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Deletes a list.
            The authenticating user must be the owner of the list to delete it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.DeleteList(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String)">
            <summary>
            Deletes a list.
            The authenticating user must be the owner of the list to delete it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.DeleteList(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Deletes a list.
            The authenticating user must be the owner of the list to delete it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.CreatePublicList(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.String)">
            <summary>
            Creates a public list.
            The authenticating user must be the owner of the list to create it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listName">Name of the list.</param>
            <param name="listDescription">The list description.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.CreatePublicList(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Creates a public list.
            The authenticating user must be the owner of the list to create it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.CreatePrivateList(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.String)">
            <summary>
            Creates a private list.
            The authenticating user must be the owner of the list to create it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listName">The name of the list.</param>
            <param name="listDescription">The list description.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.CreatePrivateList(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Creates a private list.
            The authenticating user must be the owner of the list to create it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.UpdateList(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Updates the given list. 
            The authenticating user must be the owner of the list to update it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetStatuses(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32)">
            <summary>
            Gets the status timeline of a specified list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetStatuses(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Gets the status timeline of a specified list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetStatuses(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String)">
            <summary>
            Gets the status timeline of a specified list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetMemberships(TweetSharp.Twitter.Fluent.ITwitterLists,System.String)">
            <summary>
            Gets the lists the list owner is listed on.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetSubscriptions(TweetSharp.Twitter.Fluent.ITwitterLists,System.String)">
            <summary>
            Gets the lists the list owner follows.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetMembersOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32)">
            <summary>
            Gets the users that are members of a given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetMembersOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String)">
            <summary>
            Gets the users that are members of a given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetMembersOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Gets the users that are members of a given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetMembersOf(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Gets the users that are members of a given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetSubscribersOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Gets the subcribers of the given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetSubscribersOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32)">
            <summary>
            Gets the subscribers of the given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetSubscribersOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String)">
            <summary>
            Gets the subscribers of the given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.GetSubscribersOf(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Gets the followers of a list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.IsUserMemberOf(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Determines whether a list contains a user.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.IsUserMemberOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32,System.Int32)">
            <summary>
            Determines whether a list contains a user.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The ID of the list to test for membership.</param>
            <param name="userId">The ID of the user to check for within the list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.IsUserMemberOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64,System.Int64)">
            <summary>
            Determines whether a user is a member of the given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="userId">The user ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.IsUserMemberOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.Int64)">
            <summary>
            Determines whether a user is a member of the given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.IsUserFollowerOf(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Determines whether a user is a follower of the given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.IsUserFollowerOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32,System.Int32)">
            <summary>
            Determines whether a user is a follower of the given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The ID of the list to test for a subscription.</param>
            <param name="userId">The ID of the user to check against  the list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.IsUserFollowerOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64,System.Int64)">
            <summary>
            Determines whether a user is a follower of the given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The ID of the list to test for a subscription.</param>
            <param name="userId">The ID of the user to check against the list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.IsUserFollowerOf(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.Int64)">
            <summary>
            Determines whether a user is a follower of the given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.AddMemberTo(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Adds a new list member.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.AddMemberTo(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64,System.Int64)">
            <summary>
            Adds a new list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.AddMemberTo(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.Int64)">
            <summary>
            Adds a new list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.AddMemberTo(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.Int32)">
            <summary>
            Adds a new list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.AddMemberTo(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32,System.Int32)">
            <summary>
            Adds a new list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.RemoveMemberFrom(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Removes a list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.RemoveMemberFrom(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64,System.Int64)">
            <summary>
            Removes a list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.RemoveMemberFrom(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.Int64)">
            <summary>
            Removes a list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.RemoveMemberFrom(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String,System.Int32)">
            <summary>
            Removes a list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.RemoveMemberFrom(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32,System.Int32)">
            <summary>
            Removes a list member.
            The authenticating user must be the owner of the list to change it.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Adds a list to the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32)">
            <summary>
            Adds a list to the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String)">
            <summary>
            Adds a list to the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Adds a list to the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.Unfollow(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int64)">
            <summary>
            Removes a list from the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.Unfollow(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.Int32)">
            <summary>
            Removes a list from the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listId">The list id.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.Unfollow(TweetSharp.Twitter.Fluent.ITwitterLists,System.String,System.String)">
            <summary>
            Removes a list from the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsExtensions.Unfollow(TweetSharp.Twitter.Fluent.ITwitterLists,TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            Removes a list from the authenticating user's followed lists.
            </summary>
            <param name="instance">The instance.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsMemberships">
            <summary>
            Fluent twitter node for the list memberships endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsMemberships.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsMemberships"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsMembersCreate">
            <summary>
            Fluent twitter node for the add to list endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsMembersCreate.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsMembers"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsMembersDelete">
            <summary>
            Fluent twitter node for the delete list members endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsMembersDelete.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsMembers"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsMembers">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs that add and remove list members
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsMembers.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsMembers"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsShow">
            <summary>
            Fluent twitter node for the list listing endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsShow.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsShow"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsStatuses">
            <summary>
            Fluent twitter node for the lists statuses endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsStatuses.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsStatuses"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsSubscribersCreate">
            <summary>
            Fluent twitter node for the lists subscriber creation endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsSubscribersCreate.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsSubscribers"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsSubscribersDelete">
            <summary>
            Fluent twitter node for the list subscriber deletion endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsSubscribersDelete.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsSubscribers"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsSubscribers">
            <summary>
            Node in the fluent expression tree for accessing Twitter APIs to show list subscribers
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsSubscribers.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsSubscribers"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsSubscriptions">
            <summary>
            Fluent twitter node for the list subscriptions endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListsSubscriptions.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListsSubscriptions"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterLists.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterLists"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListsUpdate">
            <summary>
            Fluent twitter node for the lists update endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterNotificationsFollow">
            <summary>
            Fluent twitter node for the add notifications endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterNotifications">
            <summary>
            Fluent twitter node for the notifications endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions">
            <summary>
            Fluent interface notification endpoint methods
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterNotifications,System.Int32)">
            <summary>
            Adds a user to the set of notification-enabled users for the authenticated account.
            </summary>
            <param name="instance"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterNotifications,System.Int64)">
            <summary>
            Adds a user to the set of notification-enabled users for the authenticated account.
            </summary>
            <param name="instance"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions.Follow(TweetSharp.Twitter.Fluent.ITwitterNotifications,System.String)">
            <summary>
            Adds a user to the set of notification-enabled users for the authenticated account
            </summary>
            <param name="instance"></param>
            <param name="screenName"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions.Leave(TweetSharp.Twitter.Fluent.ITwitterNotifications,System.Int32)">
            <summary>
            Removes a user from the set of notification-enabled users for the authenticated account
            </summary>
            <param name="instance"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions.Leave(TweetSharp.Twitter.Fluent.ITwitterNotifications,System.Int64)">
            <summary>
            Removes a user from the set of notification-enabled users for the authenticated account
            </summary>
            <param name="instance"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterNotificationsExtensions.Leave(TweetSharp.Twitter.Fluent.ITwitterNotifications,System.String)">
            <summary>
            Removes a user from the set of notification-enabled users for the authenticated account
            </summary>
            <param name="instance"></param>
            <param name="screenName"></param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterNotificationsLeave">
            <summary>
            Fluent twitter node for the stop notifications enpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterReportSpam">
            <summary>
            Fluent twitter node for the spam reporting endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterReportSpamExtensions">
            <summary>
            Fluent interface methods for the spam reporting endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterReportSpamExtensions.ReportSpammer(TweetSharp.Twitter.Fluent.ITwitterReportSpam,System.String)">
            <summary>
            Reports a user as a spammer and blocks them from following the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="screenName">Screen name of the spammer</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterReportSpamExtensions.ReportSpammer(TweetSharp.Twitter.Fluent.ITwitterReportSpam,System.Int32)">
            <summary>
            Reports a user as a spammer and blocks them from following the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="id">User ID of the spammer</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterReportSpamExtensions.ReportSpammer(TweetSharp.Twitter.Fluent.ITwitterReportSpam,System.Int64)">
            <summary>
            Reports a user as a spammer and blocks them from following the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="id">User ID name of the spammer</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterReportSpamExtensions.ReportSpammer(TweetSharp.Twitter.Fluent.ITwitterReportSpam,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Reports a user as a spammer and blocks them from following the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="user"><see cref="T:TweetSharp.Twitter.Model.TwitterUser"/> object representing the spammer</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterReportSpamReportSpammer">
            <summary>
            Fluent twitter node for the spam reporting endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.RetweetMode">
            <summary>
            Determines the possible ways to handle retweeting
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetweetMode.Native">
            <summary>
            Uses Twitter's Retweet API
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetweetMode.Prefix">
            <summary>
            Uses 'RT' at the beginning of an update, performed by TweetSharp
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetweetMode.SymbolPrefix">
            <summary>
            Uses a Unicode character (U2672) at the beginning of an update, performed by TweetSharp
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.RetweetMode.Suffix">
            <summary>
            Uses 'via (@screen_name)' at the end of an update, performed by TweetSharp
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesCreate">
            <summary>
            Fluent twitter node for the saved search creation endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesDestroy">
            <summary>
            Node in the fluent expression tree for deleting saved searches
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSavedSearches">
            <summary>
            Fluent twitter node for the saved searches endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions">
            <summary>
            Fluent interface methods for SavedSearch endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.List(TweetSharp.Twitter.Fluent.ITwitterSavedSearches)">
            <summary>
            Lists the saved searches for the authenticating user.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.Create(TweetSharp.Twitter.Fluent.ITwitterSavedSearches,System.String)">
            <summary>
            Creates a new saved search for the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="query">the search query to save</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.Create(TweetSharp.Twitter.Fluent.ITwitterSavedSearches,TweetSharp.Twitter.Fluent.ITwitterSearchQuery)">
            <summary>
            Creates a new saved search for the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="query">the search query to save</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.Delete(TweetSharp.Twitter.Fluent.ITwitterSavedSearches,System.Int32)">
            <summary>
            Deletes a saved search for the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="id">ID of the saved search to delete</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.Delete(TweetSharp.Twitter.Fluent.ITwitterSavedSearches,System.Int64)">
            <summary>
            Deletes a saved search for the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="id">ID of the saved search to delete</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterSavedSearches,System.Int32)">
            <summary>
            Gets the details about a saved search belonging to the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="id">ID of the saved search to query</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterSavedSearches,System.Int64)">
            <summary>
            Gets the details about a saved search belonging to the authenticating user.
            </summary>
            <param name="instance"></param>
            <param name="id">ID of the saved search to query</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesList">
            <summary>
            Fluent twitter node for the list saved searches endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSavedSearchesShow">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs to list saved searches
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterSavedSearches.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterSavedSearches"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.SearchResultType">
            <summary>
            The type of search result requested in query.
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search" />
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.SearchResultType.Mixed">
            <summary>
            Include both popular and real time results in the response.
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.SearchResultType.Recent">
            <summary>
            The current default value. Return only the most recent results in the response.
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Fluent.SearchResultType.Popular">
            <summary>
            Return only the most popular results in the response.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSearch">
            <summary>
            Fluent twitter node for the search endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSearchExtensions">
            <summary>
            Fluent interface methods for the search api
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSearchExtensions.Query(TweetSharp.Twitter.Fluent.ITwitterSearch)">
            <summary>
            Perform a query via the search api
            </summary>
            <param name="instance">the instance</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSearchExtensions.Trends(TweetSharp.Twitter.Fluent.ITwitterSearch)">
            <summary>
            Request the current or historical trending topics 
            </summary>
            <param name="instance">the instance</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSearchQuery">
            <summary>
            Node in the fluent expression tree for accessing the Search API to perform a query
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSearchTrends">
            <summary>
            Node in the fluent expression tree for accessing Twitter Search Trends APIs
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.SocialGraph.Extensions">
            <summary>
            Extension methods for the SocialGraph APIs
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSocialGraphIds">
            <summary>
            interface for nodes that deal with social graph ids
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSocialGraph">
            <summary>
            Inteface for nodes that query the social graph
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterSocialGraphExtensions">
            <summary>
            Extension methods for querying the SocialGraph
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterSocialGraphExtensions.Ids(TweetSharp.Twitter.Fluent.ITwitterSocialGraph)">
            <summary>
            Gets user IDs
            </summary>
            <param name="instance">The instance.</param>
            <returns>the instance</returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStatusDestroy">
            <summary>
            Fluent twitter node for the status deletion endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterFriendsTimeline">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs to fetch the Friends timeline
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterHomeTimeline">
            <summary>
            Node in the fluent expression tree for accessing the home timeline
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStatuses">
            <summary>
            Fluent twitter node for the statuses endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions">
            <summary>
            Query expressions for the Twitter API statuses resource.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.OnPublicTimeline(TweetSharp.Twitter.Fluent.ITwitterStatuses)">
            <summary>
            Retrieves a selection of the most recent 20 public tweets.
            This query is cached by Twitter for 60 seconds.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.OnFriendsTimeline(TweetSharp.Twitter.Fluent.ITwitterStatuses)">
            <summary>
            Retrieves the authenticating user's friends' timelines.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.OnUserTimeline(TweetSharp.Twitter.Fluent.ITwitterStatuses)">
            <summary>
            Retrieves the authenticating user's own user timeline.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.OnHomeTimeline(TweetSharp.Twitter.Fluent.ITwitterStatuses)">
            <summary>
            Retrieves the authenticating user's home timeline.
            The home timeline includes friends' timelines as well as retweets.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.OnListTimeline(TweetSharp.Twitter.Fluent.ITwitterStatuses,System.String,System.String)">
            <summary>
            Retrieves the timeline of a given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.OnListTimeline(TweetSharp.Twitter.Fluent.ITwitterStatuses,System.String,System.Int32)">
            <summary>
            Retrieves the timeline of a given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.OnListTimeline(TweetSharp.Twitter.Fluent.ITwitterStatuses,System.String,System.Int64)">
            <summary>
            Retrieves the timeline of a given list.
            </summary>
            <param name="instance">The instance.</param>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.Show(TweetSharp.Twitter.Fluent.ITwitterStatuses,System.Int64)">
            <summary>
            Gets a specific <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/>.
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The status ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.Update(TweetSharp.Twitter.Fluent.ITwitterStatuses,System.String)">
            <summary>
            Posts a new <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> update.
            </summary>
            <param name="instance">The instance.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.Update(TweetSharp.Twitter.Fluent.ITwitterStatuses,System.String,System.Double,System.Double)">
            <summary>
            Posts a new <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> update with geo-tagged information.
            </summary>
            <param name="instance">The instance.</param>
            <param name="text">The text.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.Update(TweetSharp.Twitter.Fluent.ITwitterStatuses,System.String,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Posts a new <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> update with geo-tagged information.
            </summary>
            <param name="instance">The instance.</param>
            <param name="text">The text.</param>
            <param name="location">The geo location.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.Retweet(TweetSharp.Twitter.Fluent.ITwitterStatuses,TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Retweets a <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> update.
            </summary>
            <param name="instance">The instance.</param>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.Retweet(TweetSharp.Twitter.Fluent.ITwitterStatuses,System.Int64)">
            <summary>
            Retweets a <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> update.
            </summary>
            <param name="instance">The instance.</param>
            <param name="statusId">The status ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.Retweet(TweetSharp.Twitter.Fluent.ITwitterStatuses,System.Int64,TweetSharp.Twitter.Fluent.RetweetMode)">
            <summary>
            Retweets a <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> update.
            Uses a <see cref="T:TweetSharp.Twitter.Fluent.RetweetMode"/> to define the style of retweet used.
            </summary>
            <param name="instance">The instance.</param>
            <param name="statusId">The status ID.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.Retweet(TweetSharp.Twitter.Fluent.ITwitterStatuses,TweetSharp.Twitter.Model.TwitterStatus,TweetSharp.Twitter.Fluent.RetweetMode)">
            <summary>
            Retweets a <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> update.
            Uses a <see cref="T:TweetSharp.Twitter.Fluent.RetweetMode"/> to define the style of retweet used.
            </summary>
            <param name="instance">The instance.</param>
            <param name="status">The status.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.RetweetsOf(TweetSharp.Twitter.Fluent.ITwitterStatuses,System.Int64)">
            <summary>
            Retrieves the retweets of a given status ID.
            </summary>
            <param name="instance">The instance.</param>
            <param name="statusId">The status ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.RetweetsOf(TweetSharp.Twitter.Fluent.ITwitterStatuses,TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Retrieves the retweets of a given <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/>.
            </summary>
            <param name="instance">The instance.</param>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.Mentions(TweetSharp.Twitter.Fluent.ITwitterStatuses)">
            <summary>
            Retrieves the mentions of the authenticating user.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.Destroy(TweetSharp.Twitter.Fluent.ITwitterStatuses,System.Int64)">
            <summary>
            Deletes a <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/>.
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The status ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.RetweetedByMe(TweetSharp.Twitter.Fluent.ITwitterStatuses)">
            <summary>
            Retrieves tweets retweeted by the authenticating user.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.RetweetedToMe(TweetSharp.Twitter.Fluent.ITwitterStatuses)">
            <summary>
            Retrieves tweets retweeted to the authenticating user.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterStatusesExtensions.RetweetsOfMe(TweetSharp.Twitter.Fluent.ITwitterStatuses)">
            <summary>
            Retrieves tweets by the authenticated user, and retweeted by others.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterListTimeline">
            <summary>
            Fluent twitter node for the list timeline endpoint
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterListTimeline.#ctor(TweetSharp.Twitter.Fluent.IFluentTwitter)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Fluent.TwitterListTimeline"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStatusMentions">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs that return statuses that mention the current user
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterPublicTimeline">
            <summary>
            Fluent twitter node for the public timeline endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterRetweetedByMe">
            <summary>
            Node in the fluent expression tree for accessing Twitter APIs to fetch statuses that were retweeted
            by the current user. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterRetweetedToMe">
            <summary>
            Fluent twitter node for the retweeted to me endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterRetweetsOfMe">
            <summary>
            Fluent twitter node for the retweets of me endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterRetweets">
            <summary>
            Fluent twitter node for the retweets endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStatusShow">
            <summary>
            Node in the fluent expression tree for accessing the Twitter APIs to feth a specific status
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStatusUpdate">
            <summary>
            Fluent Twitter node for the status update endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUserTimeline">
            <summary>
            Node in the fluent expression tree for accessing another user's timeline
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStreamingFilter">
            <summary>
            Fluent twitter node for the streaming filter endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStreamingFirehose">
            <summary>
            Fluent twitter node for the streaming api firehose endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStream">
            <summary>
            Fluent twitter node for the streaming api endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStreamExtensions">
            <summary>
            Fluent interface methods for accessing the Streaming API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterStreamExtensions.FromSample(TweetSharp.Twitter.Fluent.ITwitterStream)">
            <summary>
            Creates a stream from of a random sample of public statuses.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterStreamExtensions.FromFilter(TweetSharp.Twitter.Fluent.ITwitterStream)">
            <summary>
            Creates a stream based on a search filter.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterStreamExtensions.FromFirehose(TweetSharp.Twitter.Fluent.ITwitterStream)">
            <summary>
            Creates a stream from all public statuses.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterStreamExtensions.FromRetweet(TweetSharp.Twitter.Fluent.ITwitterStream)">
            <summary>
            Creates a stream from all public retweets of other statuses.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStreamingRetweet">
            <summary>
            
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterStreamingSample">
            <summary>
            Node in the fluent expression tree for accessing the sampling version of the Twitter Streaming API
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterTrendsAvailable">
            <summary>
            Fluent twitter node for the available trends endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterTrends">
            <summary>
            Fluent twitter node for the trending topics endpoints
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterTrendsLocation">
            <summary>
            Node in the fluent expression tree for accessing Twitter Search location-based trends APIs
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.TwitterTrendsExtensions">
            <summary>
            Fluent interface methods for the trends endpoints
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterTrendsExtensions.GetAvailable(TweetSharp.Twitter.Fluent.ITwitterTrends)">
            <summary>
            Request the availabe trending topics
            </summary>
            <param name="instance">the instance</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.TwitterTrendsExtensions.ByLocation(TweetSharp.Twitter.Fluent.ITwitterTrends,System.Int64)">
            <summary>
            Request the trending topics for a specific location
            </summary>
            <param name="instance">the instance</param>
            <param name="woeId">The Yahoo WhereOnEarth id corresponding to the location to request trends for</param>
            <seealso>http://developer.yahoo.com/geo/geoplanet/"</seealso>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.TestTwitterClientInfo">
            <summary>
            Client info class for the test runner.
            </summary>
        </member>
        <member name="T:TweetSharp.TwitterClientInfo">
            <summary>
             This class provides meta-data for your specific Twitter application, that is
             used to identify your client to Twitter, store OAuth credentials for all future
             request, and in some cases define a transparent proxy to redirect API calls to.
            </summary>
        </member>
        <member name="P:TweetSharp.TwitterClientInfo.ClientName">
            <summary>
            This is the name of your client application. It is used to
            identify your client when a user updates their status, or when
            your application makes a Twitter Search API request.
            </summary>
        </member>
        <member name="P:TweetSharp.TwitterClientInfo.ClientVersion">
            <summary>
            This is the version of your application. This is meta-data only,
            and not used by Twitter for client processing.
            </summary>
        </member>
        <member name="P:TweetSharp.TwitterClientInfo.ClientUrl">
            <summary>
            This is the URL of your application. This is meta-data only,
            and not used by Twitter for client processing. Your application's URL
            is stored by Twitter when you apply for a 'Source' attribute or register
            your application for OAuth.
            </summary>
        </member>
        <member name="P:TweetSharp.TwitterClientInfo.ConsumerKey">
            <summary>
            If your client is using OAuth authentication, this value should be set
            to the value of your consumer key. This avoids having to provide the key
            in every query.
            </summary>
        </member>
        <member name="P:TweetSharp.TwitterClientInfo.ConsumerSecret">
            <summary>
            If your client is using OAuth authentication, this value should be set
            to the value of your consumer secret. This avoids having to provide the secret
            in every query.
            </summary>
        </member>
        <member name="P:TweetSharp.TwitterClientInfo.TransparentProxy">
            <summary>
            Since you are communicating from the client-side, this value should point to a 
            proxy that is configured to work transparently (API methods are identical other
            than the domain), allow cross-domain access, and understand TweetSharp custom 
            headers.
            </summary>
        </member>
        <member name="P:TweetSharp.TestTwitterClientInfo.TwitterAccepts">
            <summary>
            Gets the meta header for acceptable Twitter content types returned by the API.
            This is used mainly to guarantee that tests work with URL-encoded values,
            though this should be vestigial by now as Twitter has promised to return
            this value for all real Accepts responses.
            </summary>
            <value>The twitter accepts.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.TwitterWebCallback">
            <summary>
            Represents a callback from an API call.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUserFollowers">
            <summary>
            Fluent twitter node for the followers endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUserFriends">
            <summary>
            Fluent twitter node for the user's friends endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUsers">
            <summary>
            Node in the fluent expression tree for accessing Twitter's user related APIs
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUsersExtensions">
            <summary>
            Query expressions for the Twitter API users resource.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterUsersExtensions.GetFriends(TweetSharp.Twitter.Fluent.ITwitterUsers)">
            <summary>
            Gets the friends of the authenticated user.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterUsersExtensions.GetFollowers(TweetSharp.Twitter.Fluent.ITwitterUsers)">
            <summary>
            Gets the followers of the authenticated user.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterUsersExtensions.ShowProfileFor(TweetSharp.Twitter.Fluent.ITwitterUsers,System.Int32)">
            <summary>
            Shows the profile for the specified user by ID.
            </summary>
            <param name="instance">The instance.</param>
            <param name="id">The user ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterUsersExtensions.ShowProfileFor(TweetSharp.Twitter.Fluent.ITwitterUsers,System.String)">
            <summary>
            Shows the profile for the specified user by screen name.
            </summary>
            <param name="instance">The instance.</param>
            <param name="screenName">The user screen name.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterUsersExtensions.SearchFor(TweetSharp.Twitter.Fluent.ITwitterUsers,System.String)">
            <summary>
            Performs a user search given a query.
            This mimics Twitter's "People Search" web feature.
            </summary>
            <param name="instance">The instance.</param>
            <param name="query">The user search query.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterUsersExtensions.ShowProfileFor(TweetSharp.Twitter.Fluent.ITwitterUsers,System.Net.Mail.MailAddress)">
            <summary>
            Shows the profile for a specified user.
            </summary>
            <param name="instance">The instance.</param>
            <param name="email">The user's email.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterUsersExtensions.Lookup(TweetSharp.Twitter.Fluent.ITwitterUsers,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Searches for a specific user given a set of screen names.
            </summary>
            <param name="instance">The instance.</param>
            <param name="screenNames">The screen names to search for.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterUsersExtensions.Lookup(TweetSharp.Twitter.Fluent.ITwitterUsers,System.String[])">
            <summary>
            Searches for a specific user given a set of screen names.
            </summary>
            <param name="instance">The instance.</param>
            <param name="screenNames">The screen names.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterUsersExtensions.Lookup(TweetSharp.Twitter.Fluent.ITwitterUsers,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Searches for a specific user given a set of screen names, and user IDs.
            </summary>
            <param name="instance">The instance.</param>
            <param name="screenNames">The screen names.</param>
            <param name="userIds">The user IDs.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterUsersExtensions.Lookup(TweetSharp.Twitter.Fluent.ITwitterUsers,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Searches for a specific user given a set of user IDs.
            </summary>
            <param name="instance">The instance.</param>
            <param name="userIds">The user IDs.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Fluent.ITwitterUsersExtensions.Lookup(TweetSharp.Twitter.Fluent.ITwitterUsers,System.Int32[])">
            <summary>
            Searches for a specific user given a set of user IDs.
            </summary>
            <param name="instance">The instance.</param>
            <param name="userIds">The user ids.</param>
            <returns></returns>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUsersLookup">
            <summary>
            Fluent twitter node for the user lookup endpoint
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUsersSearch">
            <summary>
            Node in the fluent expression tree for accessing the Twitter search APIs to find other users. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Fluent.ITwitterUsersShow">
            <summary>
            Node in the fluent expression tree for accessing Twitter's APIs to fetch user data. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.Converters.TwitterDateTimeConverter">
            <summary>
            A converter for parsing multiple Twitter API date formats.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterDateTimeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TweetSharp.Twitter.Model.Converters.TwitterGeoConverter">
            <summary>
            This converter exists to convert geo-spatial coordinates.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterGeoConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterGeoConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterGeoConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TweetSharp.Twitter.Model.Converters.TwitterWonkyBooleanConverter">
            <summary>
            Sometimes Twitter returns "0" for "true", instead of true, and we've even seen
            "13" for true. For those, and possibly future issues, this converter exists.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterWonkyBooleanConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterWonkyBooleanConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.Converters.TwitterWonkyBooleanConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TweetSharp.Twitter.Model.ITwitterEntity">
            <summary>
            Interface for a twitter object that contans an ID and CreatedDate
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.ITwitterModel">
            <summary>
            Inteface for classes that are part of the twitter data model
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.ITwitterEntity.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.ITwitterEntity.CreatedDate">
            <summary>
            Gets the created date.
            </summary>
            <value>The created date.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterDateFormat">
            <summary>
            Represents the possible known date formats that Twitter reports.
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.RestApi">
            <summary>
            RestApi
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.SearchApi">
            <summary>
            SearchApi
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.Atom">
            <summary>
            Atom
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.XmlHashesAndRss">
            <summary>
            XmlHashesAndRss
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.TrendsCurrent">
            <summary>
            TrendsCurrent
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.TrendsDaily">
            <summary>
            TrendsDaily
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDateFormat.TrendsWeekly">
            <summary>
            TrendsWeekly
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterDateTime">
            <summary>
            Represents a normalized date from the Twitter API. 
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDateTime.#ctor(System.DateTime,TweetSharp.Twitter.Model.TwitterDateFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Model.TwitterDateTime"/> class.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDateTime.ConvertFromDateTime(System.DateTime,TweetSharp.Twitter.Model.TwitterDateFormat)">
            <summary>
            Converts from date time.
            </summary>
            <param name="input">The input.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDateTime.ConvertToDateTime(System.String)">
            <summary>
            Converts to date time.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDateTime.ConvertToTwitterDateTime(System.String)">
            <summary>
            Converts to twitter date time.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDateTime.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDateTime.Format">
            <summary>
            Gets or sets the Twitter-based date format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDateTime.DateTime">
            <summary>
            Gets or sets the actual date time.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDateTime.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterDeliveryDevice">
            <summary>
            Represents a delivery device for receiving updates from Twitter.
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDeliveryDevice.None">
            <summary>
            No delivery device is used.
            </summary>
        </member>
        <member name="F:TweetSharp.Twitter.Model.TwitterDeliveryDevice.Sms">
            <summary>
            An SMS-capable delivery device is used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterDirectMessage">
            <summary>
            Represents a private <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> between two users.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDirectMessage.CompareTo(TweetSharp.Twitter.Model.TwitterDirectMessage)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDirectMessage.Equals(TweetSharp.Twitter.Model.TwitterDirectMessage)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="obj"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDirectMessage.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDirectMessage.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDirectMessage.op_Equality(TweetSharp.Twitter.Model.TwitterDirectMessage,TweetSharp.Twitter.Model.TwitterDirectMessage)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterDirectMessage.op_Inequality(TweetSharp.Twitter.Model.TwitterDirectMessage,TweetSharp.Twitter.Model.TwitterDirectMessage)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Id">
            <summary>
            Gets or sets the direct message's ID.
            </summary>
            <value>The direct message ID.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.RecipientId">
            <summary>
            Gets or sets the ID of the receiving user.
            </summary>
            <value>The receiving user's ID.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.RecipientScreenName">
            <summary>
            Gets or sets the screen name of the receiving user.
            </summary>
            <value>The receiving user's screen name.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Recipient">
            <summary>
            Gets or sets the recipient.
            </summary>
            <value>The recipient.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.SenderId">
            <summary>
            Gets or sets the ID of the sending user.
            </summary>
            <value>The sender ID.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Sender">
            <summary>
            Gets or sets the message sender.
            </summary>
            <value>The sender.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.SenderScreenName">
            <summary>
            Gets or sets the screen name of the sending user.
            </summary>
            <value>The sending user's screen name.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text">
            <summary>
            Gets the text of the update.
            </summary>
            <value></value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.TextHtml">
            <summary>
            Calculates the HTML value of the <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/>
            by parsing URLs, mentions, and hashtags into anchors.
            </summary>
            <value>The HTML text.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.TextLinks">
            <summary>
            Returns the URLs embedded in the <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/> value.
            </summary>
            <value>The <see cref="T:System.Uri"/> values embedded in <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.TextMentions">
            <summary>
            Returns the <see cref="P:TweetSharp.Twitter.Model.TwitterUser.ScreenName"/> values mentioned in the <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/> value.
            </summary>
            <value>The <see cref="P:TweetSharp.Twitter.Model.TwitterUser.ScreenName"/> values mentioned in <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.TextHashtags">
            <summary>
            Returns the hashtag values used in the <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/> value.
            </summary>
            <value>The hashtag values used in <see cref="P:TweetSharp.Twitter.Model.TwitterDirectMessage.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.CreatedDate">
            <summary>
            Gets the created date.
            </summary>
            <value>The created date.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterDirectMessage.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterError">
            <summary>
            Represents an error received from the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterError.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterError.Request">
            <summary>
            Gets or sets the request hash.
            This is typically the URL slug for the API method
            that issued the error.
            </summary>
            <value>The request.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterError.Code">
            <summary>
            Gets or sets the error code. 
            This appears when errors appear as a collection.
            It is part of the 'new' errors schema.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterError.Message">
            <summary>
            Gets or sets the error message. 
            This appears when errors appear as a collection.
            It is part of the 'new' errors schema.
            It is functionally the same as the previous "error" element.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterError.Error">
            <summary>
            Gets or sets the error message returned from Twitter.
            It is part of the 'old' errors schema.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterError.ErrorMessage">
            <summary>
            Gets the value of either the Error element or the
            Message element, depending on the schema of the original 
            error that was received by Twitter.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterError.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterFriend">
            <summary>
            Represents a relative relationship between two users on Twitter,
            including basic information from which to locate more info for each user.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterFriend.Id">
            <summary>
            Gets or sets the ID of the friendship recipient.
            </summary>
            <value>The friendship recipient's ID.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterFriend.ScreenName">
            <summary>
            Gets or sets the screen name of the friendship recipient.
            </summary>
            <value>The friendship recipient's screen name.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterFriend.Following">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:TweetSharp.Twitter.Model.TwitterFriend"/> is following
            the other <see cref="T:TweetSharp.Twitter.Model.TwitterFriend"/> defined in a <see cref="T:TweetSharp.Twitter.Model.TwitterRelationship"/>.
            </summary>
            <value><c>true</c> if following; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterFriend.FollowedBy">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:TweetSharp.Twitter.Model.TwitterFriend"/> is followed by
            the other <see cref="T:TweetSharp.Twitter.Model.TwitterFriend"/> defined in a <see cref="T:TweetSharp.Twitter.Model.TwitterRelationship"/>.
            </summary>
            <value><c>true</c> if followed by; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterFriend.NotificationsEnabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:TweetSharp.Twitter.Model.TwitterFriend"/> is receiving
            notifications for the other <see cref="T:TweetSharp.Twitter.Model.TwitterFriend"/> defined in a <see cref="T:TweetSharp.Twitter.Model.TwitterRelationship"/>.
            </summary>
            <value><c>true</c> if receiving notifications; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterFriend.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterFriendship">
            <summary>
            A master node that wraps the contents of a <see cref="T:TweetSharp.Twitter.Model.TwitterRelationship"/> result.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterFriendship.Relationship">
            <summary>
            Gets or sets the relationship.
            </summary>
            <value>The relationship.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterFriendship.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterGeoLocation">
            <summary>
             Represents a geospatial location, for APIs that support it.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/> struct.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/> struct.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.Equals(TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="instance">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.op_Equality(TweetSharp.Twitter.Model.TwitterGeoLocation,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.op_Inequality(TweetSharp.Twitter.Model.TwitterGeoLocation,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterGeoLocation.Coordinates">
            <summary>
            Gets or sets the inner spatial coordinates.
            </summary>
            <value>The coordinates.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterGeoLocation.Type">
            <summary>
            Gets or sets the type of location.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterGeoLocation.Latitude">
            <summary>
            Gets the latitude.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterGeoLocation.Longitude">
            <summary>
            Gets the longitude.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterGeoLocation.None">
            <summary>
            Gets an instance of <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/>
            that represents nowhere.
            </summary>
            <value>The none.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates">
            <summary>
            The inner spatial coordinates for this location.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates.op_Explicit(TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates)~System.Double[]">
            <summary>
            Performs an explicit conversion from <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates"/> to array of <see cref="T:System.Double"/>.
            </summary>
            <param name="location">The location.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates.op_Implicit(System.Collections.Generic.List{System.Double})~TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates"/>.
            </summary>
            <param name="values">The values.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates.op_Implicit(System.Double[])~TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates">
            <summary>
            Performs an implicit conversion from array of <see cref="T:System.Double"/> to <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates"/>.
            </summary>
            <param name="values">The values.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates.FromEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Froms the enumerable.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterGeoLocation.GeoCoordinates.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterList">
            <summary>
            Represents a user-curated list of Twitter members, 
            that other users can subscribe to and see the aggregated 
            list of member tweets in a dedicated timeline.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterList.Id">
            <summary>
            Gets or sets the ID of the list.
            </summary>
            <value>The list ID.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterList.Name">
            <summary>
            Gets or sets the descriptive name of the list.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterList.FullName">
            <summary>
            Gets or sets the full name of the list including the list owner.
            </summary>
            <value>The full name of the list.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterList.Description">
            <summary>
            Gets or sets the user-supplied list description.
            </summary>
            <value>The list description.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterList.Slug">
            <summary>
            Gets or sets the list URL slug.
            </summary>
            <value>The list slug.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterList.SubscriberCount">
            <summary>
            Gets or sets the subscriber count.
            A subscriber follows the list's updates.
            </summary>
            <value>The subscriber count.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterList.MemberCount">
            <summary>
            Gets or sets the member count.
            A member's updates appear in the list.
            </summary>
            <value>The member count.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterList.Uri">
            <summary>
            Gets or sets the URI of the list.
            </summary>
            <value>The URI of the list.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterList.Mode">
            <summary>
            Gets or sets the mode.
            The list can be "public", visible to everyone,
            or "private", visible only to the authenticating user.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterList.User">
            <summary>
            Gets or sets the user who created the list.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterList.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterLocalTrend">
            <summary>
            Describes a local trend
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterLocalTrend.Query">
            <summary>
            Gets or sets the search compatible query used to search for stauses with this trending topic
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterLocalTrend.Name">
            <summary>
            Gets or sets the display name for the trend
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterLocalTrend.Url">
            <summary>
            Gets or sets the twitter search site url for querying this trend in a browser
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterLocalTrends">
            <summary>
            Represents locally relevant trending topics on Twitter.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterLocalTrends.SearchDate">
            <summary>
            Gets or sets the trend results' search date.
            </summary>
            <value>The search date.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterLocalTrends.Trends">
            <summary>
            Gets or sets the trend results for this query.
            </summary>
            <value>The trends.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterLocalTrends.Locations">
            <summary>
            Gets or sets the Where On Earth (WOE) locations these
            trend results are applicable to.
            </summary>
            <value>The locations.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterLocalTrends.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
            <value></value>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterModelSerializer">
            <summary>
            A class that manages serialization and deserialization of Twitter API entities.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterModelSerializer.Settings">
            <summary>
            Gets the JSON.NET serializer settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterRateLimitStatus">
            <summary>
            Represents the API limiting imposed on a user or unauthenticated IP address.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterRateLimitStatus.CompareTo(TweetSharp.Twitter.Model.TwitterRateLimitStatus)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterRateLimitStatus.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterRateLimitStatus.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterRateLimitStatus.Equals(TweetSharp.Twitter.Model.TwitterRateLimitStatus)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterRateLimitStatus.RemainingHits">
            <summary>
            Gets or sets the remaining API hits allowed.
            </summary>
            <value>The remaining API hits allowed.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterRateLimitStatus.HourlyLimit">
            <summary>
            Gets or sets the API hits hourly limit.
            You can compare this to <see cref="P:TweetSharp.Twitter.Model.TwitterRateLimitStatus.RemainingHits"/> to get a 
            percentage of usage remaining.
            </summary>
            <value>The hourly limit.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterRateLimitStatus.ResetTimeInSeconds">
            <summary>
            Gets or sets the UNIX time representing the time
            this rate limit will reset.
            This is not the number of seconds until the rate limit
            resets.
            </summary>
            <value>The reset time in seconds.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterRateLimitStatus.ResetTime">
            <summary>
            Gets or sets the reset time for this rate limit constraint.
            </summary>
            <value>The reset time.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterRateLimitStatus.Hammock#Tasks#IRateLimitStatus#NextReset">
            <summary>
            Gets the next reset time.
            </summary>
            <value>The next reset time.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterRateLimitStatus.Hammock#Tasks#IRateLimitStatus#RemainingUses">
            <summary>
            Gets the remaining API uses.
            </summary>
            <value>The remaining API uses.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterRateLimitStatus.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterRelationship">
            <summary>
            Represents the relationship between two users on Twitter
            as they related to each <see cref="T:TweetSharp.Twitter.Model.TwitterFriend"/> representation.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterRelationship.Source">
            <summary>
            Gets or sets the relative source of the relationship.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterRelationship.Target">
            <summary>
            Gets or sets the relative target of the relationship.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterRelationship.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterResult">
            <summary>
            Represents a result returning from the Twitter API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterResult.#ctor(Hammock.Web.WebQueryResult,System.Net.WebException)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Model.TwitterResult"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="exception">The WebException that was caught during the query</param>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Model.TwitterResult"/> class.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.IsTwitterError">
            <summary>
            Gets a value indicating whether this result returned a Twitter error.
            </summary>
            <value><c>true</c> if this result is in error; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.IsServiceError">
            <summary>
            Gets or sets a value indicating that the query failed due to an error in the target REST service.
            </summary>
            <value></value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.IsFailWhale">
            <summary>
            Gets a value indicating whether this instance is a fail whale.
            </summary>
            <value>
            	<c>true</c> if this instance is a fail whale; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.IsFromStream">
            <summary>
            Gets a value indicating whether this result was served from a continuous stream.
            </summary>
            <value>
            	<c>true</c> if this result is from a stream; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.StreamedResponses">
            <summary>
            Gets or sets the streamed responses requested from the streaming API.
            </summary>
            <value>The streamed responses.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.ConnectionClosed">
            <summary>
            Gets a value indicating whether the connection was closed before this
            result was called back. This indicates a Streaming API connection
            that was lost on the server side.
            </summary>
            <value><c>true</c> if [connection closed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.RateLimitStatus">
            <summary>
            Gets or sets the rate limit status, if it was available at the time of the response.
            </summary>
            <value>The rate limit status.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterResult.SkippedDueToRateLimiting">
            <summary>
            Gets or sets a flag indicating if the request was skipped for rate limiting rules. 
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterSavedSearch">
            <summary>
            Represents a user's saved search query, for convenient re-querying of the Search API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSavedSearch.CompareTo(TweetSharp.Twitter.Model.TwitterSavedSearch)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSavedSearch.Equals(TweetSharp.Twitter.Model.TwitterSavedSearch)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="savedSearch">The saved search.</param>
            <returns>
            true if the current object is equal to the <paramref name="savedSearch"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSavedSearch.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="status">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="status"/> parameter is null.</exception>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSavedSearch.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSavedSearch.op_Equality(TweetSharp.Twitter.Model.TwitterSavedSearch,TweetSharp.Twitter.Model.TwitterSavedSearch)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSavedSearch.op_Inequality(TweetSharp.Twitter.Model.TwitterSavedSearch,TweetSharp.Twitter.Model.TwitterSavedSearch)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSavedSearch.Id">
            <summary>
            Gets the ID of this saved search.
            </summary>
            <value>The saved search ID.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSavedSearch.Name">
            <summary>
            Gets or sets the user-provided name for this saved search.
            </summary>
            <value>The saved search name.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSavedSearch.Query">
            <summary>
            Gets or sets the Search API query used for this saved search.
            </summary>
            <value>The search query.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSavedSearch.Position">
            <summary>
            Gets or sets the saved search's position in the user's list of saved searches.
            </summary>
            <value>The saved search position.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSavedSearch.CreatedDate">
            <summary>
            Gets the created date.
            </summary>
            <value>The created date.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSavedSearch.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterSearchResult">
            <summary>
            The results of a request to the Search API.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.Statuses">
            <summary>
            Gets or sets the search statuses that comprise the actual query results.
            </summary>
            <value>The statuses.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.SinceId">
            <summary>
            Gets or sets the last ID found in the result, to be used
            with subsequent queries that want to find tweets after these results.
            </summary>
            <value>The since ID.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.MaxId">
            <summary>
            Gets or sets the first ID found in the result, to be used
            with subsequent queries that want to find tweets before these results.
            </summary>
            <value>The max ID.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.RefreshUrl">
            <summary>
            Gets or sets the refresh URL to use for web applications and widgets
            to obtain more results from the same query.
            </summary>
            <value>The refresh URL.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.ResultsPerPage">
            <summary>
            Gets or sets the number of results per page issued
            when this query was executed.
            </summary>
            <value>The results per page.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.NextPage">
            <summary>
            Gets or sets the URL path slug to use to build a subsequent query
            that returns the next page of this query's results.
            </summary>
            <value>The next page.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.PreviousPage">
            <summary>
            Gets or sets the URL path slug to use to build a subsequent query
            that returns the previous page of this query's results.
            </summary>
            <value>The previous page.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.CompletedIn">
            <summary>
            Gets or sets the server-side execution time of the query.
            </summary>
            <value>The completed in.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.Page">
            <summary>
            Gets or sets the page of results this
            query represents, from other pages with the same
            query parameters.
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.Query">
            <summary>
            Gets or sets the query used to generate this result.
            </summary>
            <value>The query.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.Warning">
            <summary>
            Gets or sets the warning message issued by Twitter for these results, if any.
            </summary>
            <value>The warning.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.Source">
            <summary>
            Gets or sets the consumer source of the issued search.
            This is typically the name and URL of the application the search originated from.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.Total">
            <summary>
            Gets or sets the total number of search results returned from this query.
            </summary>
            <value>The total number of results.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchResult.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterSearchStatus">
            <summary>
            This data class represents a <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> originating from a Search API result.
            It is largely similar, but does not derive from the REST API's <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/>.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSearchStatus.CompareTo(TweetSharp.Twitter.Model.TwitterSearchStatus)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSearchStatus.Equals(TweetSharp.Twitter.Model.TwitterSearchStatus)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="status">The status.</param>
            <returns>
            true if the current object is equal to the <paramref name="status"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSearchStatus.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="status">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSearchStatus.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSearchStatus.op_Equality(TweetSharp.Twitter.Model.TwitterSearchStatus,TweetSharp.Twitter.Model.TwitterSearchStatus)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSearchStatus.op_Inequality(TweetSharp.Twitter.Model.TwitterSearchStatus,TweetSharp.Twitter.Model.TwitterSearchStatus)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterSearchStatus.op_Implicit(TweetSharp.Twitter.Model.TwitterSearchStatus)~TweetSharp.Twitter.Model.TwitterStatus">
            <summary>
             This implicit conversion supports treating a search status as if it were a 
             regular <see cref="T:TweetSharp.Twitter.Model.TwitterStatus"/>. This is useful if you need to combine search
             results and regular results in the same UI context.
            </summary>
            <param name="searchStatus"></param>
            <returns></returns>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Id">
            <summary>
            Gets or sets the ID of this tweet. 
            As seen through the Search API.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text">
            <summary>
            Gets the text of the update.
            </summary>
            <value></value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.TextHtml">
            <summary>
            Calculates the HTML value of the <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/>
            by parsing URLs, mentions, and hashtags into anchors.
            </summary>
            <value>The HTML text.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.TextLinks">
            <summary>
            Returns the URLs embedded in the <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/> value.
            </summary>
            <value>The <see cref="T:System.Uri"/> values embedded in <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.TextMentions">
            <summary>
            Returns the <see cref="P:TweetSharp.Twitter.Model.TwitterUser.ScreenName"/> values mentioned in the <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/> value.
            </summary>
            <value>The <see cref="P:TweetSharp.Twitter.Model.TwitterUser.ScreenName"/> values mentioned in <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.TextHashtags">
            <summary>
            Returns the hashtag values used in the <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/> value.
            </summary>
            <value>The hashtag values used in <see cref="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Source">
            <summary>
            Gets or sets the source of the user's tweet.
            This is the URL and name of the Twitter client 
            the user used to publish this <seealso cref="T:TweetSharp.Twitter.Model.TwitterStatus"/>.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.CreatedDate">
            <summary>
            Gets the <see cref="T:System.DateTime"/> that the status was posted to the web
            </summary>
            <value></value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.ToUserId">
            <summary>
            Gets or sets the internal ID for the user who received a status in a search
            result. Keep in mind that this ID is currently meaningless to the Twitter API
            as it is not the same ID as the user's ID. It will eventually provide the
            correct ID for the target user.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.FromUserId">
            <summary>
            Gets or sets the internal ID for the user who wrote a status in a search
            result. Keep in mind that this ID is currently meaningless to the Twitter API
            as it is not the same ID as the user's ID. It will eventually provide the
            correct ID for the originating user.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.FromUserScreenName">
            <summary>
            Gets or sets the screen name of the authoring user.
            </summary>
            <value>The the screen name of the authoring user.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.ToUserScreenName">
            <summary>
            Gets or sets the screen name of the recipient user.
            </summary>
            <value>The the screen name of the recipient user.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.IsoLanguageCode">
            <summary>
            Gets or sets the known ISO language code for this tweet, if any.
            </summary>
            <value>The known ISO language code.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.ProfileImageUrl">
            <summary>
            Gets or sets the authoring user's profile image URL.
            </summary>
            <value>The authoring user's profile image URL.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.SinceId">
            <summary>
            Gets or sets the ID of the tweet this tweet came after.
            </summary>
            <value>The since ID.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.Location">
            <summary>
            Gets or sets the user's self-described location.
            </summary>
            <value>The user's self-described location.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.GeoLocation">
            <summary>
            Gets or sets the <seealso cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/>
            that this tweet came from, if any.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchStatus.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterSearchTrend">
            <summary>
             Describes a trend as received from the search api
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchTrend.Query">
            <summary>
             Gets or sets the search query that can be used to search for this trend
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchTrend.Name">
            <summary>
             Gets or sets the name of the trend
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchTrend.Url">
            <summary>
             gets or sets the url for searching for this trend in a browser
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchTrend.TrendingAsOf">
            <summary>
             Gets or sets the date and time that this trend began trending
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterSearchTrends">
            <summary>
             Collection of <see cref="T:TweetSharp.Twitter.Model.TwitterSearchTrend"/> objects.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchTrends.SearchDate">
            <summary>
             Gets or sets the date and time that the trend began trending
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchTrends.Trends">
            <summary>
            Gets or sets the trend results.
            </summary>
            <value>The trends.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterSearchTrends.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterStatus">
            <summary>
            The focal point of Twitter, this is the "tweet", or status update that
            a user posts to the service.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterStatus.CompareTo(TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterStatus.Equals(TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="status">The status.</param>
            <returns>
            true if the current object is equal to the <paramref name="status"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterStatus.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="status">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterStatus.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterStatus.op_Equality(TweetSharp.Twitter.Model.TwitterStatus,TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterStatus.op_Inequality(TweetSharp.Twitter.Model.TwitterStatus,TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.Id">
            <summary>
            Gets the ID of this tweet.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.InReplyToUserId">
            <summary>
            Gets or sets the user ID to whom this
            tweet was a reply, if any.
            </summary>
            <value>The user ID of the target tweet.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.InReplyToStatusId">
            <summary>
            Gets or sets the ID of the tweet to which 
            this tweet is a reply, if any.
            </summary>
            <value>The ID of the target tweet.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.InReplyToScreenName">
            <summary>
            Gets or sets the name of the screen name to whom
            this tweet is a reply, if any.
            </summary>
            <value>The name of the in reply to screen.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.IsTruncated">
            <summary>
            Gets or sets a value indicating whether this tweet was truncated to fit
            within 140 characters.
            </summary>
            <value>
            	<c>true</c> if this tweet was truncated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.IsFavorited">
            <summary>
            Gets or sets a value indicating whether this tweet is favorited.
            </summary>
            <value>
            	<c>true</c> if this tweet is favorited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.Text">
            <summary>
            Gets the text of the update.
            </summary>
            <value></value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.TextHtml">
            <summary>
            Calculates the HTML value of the <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/>
            by parsing URLs, mentions, and hashtags into anchors.
            </summary>
            <value>The HTML text.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.TextLinks">
            <summary>
            Returns the URLs embedded in the <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/> value.
            </summary>
            <value>The <see cref="T:System.Uri"/> values embedded in <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.TextMentions">
            <summary>
            Returns the <see cref="P:TweetSharp.Twitter.Model.TwitterUser.ScreenName"/> values mentioned in the <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/> value.
            </summary>
            <value>The <see cref="P:TweetSharp.Twitter.Model.TwitterUser.ScreenName"/> values mentioned in <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.TextHashtags">
            <summary>
            Returns the hashtag values used in the <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/> value.
            </summary>
            <value>The hashtag values used in <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.Text"/>.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.Source">
            <summary>
            Gets or sets the source of the user's tweet.
            This is the URL and name of the Twitter client 
            the user used to publish this <seealso cref="T:TweetSharp.Twitter.Model.TwitterStatus"/>.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.User">
            <summary>
            Gets or sets the user that authored this <seealso cref="T:TweetSharp.Twitter.Model.TwitterStatus"/>.
            </summary>
            <value>The user that authored this status.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.RetweetedStatus">
            <summary>
            Gets or sets the retweeted <seealso cref="T:TweetSharp.Twitter.Model.TwitterStatus"/> that
            this status is derived from, if any.
            </summary>
            <value>The retweeted status.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.CreatedDate">
            <summary>
            Gets the created date of this tweet.
            </summary>
            <value>The created date.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.Location">
            <summary>
            Gets or sets the <seealso cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/>
            that this tweet came from, if any.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterStatus.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Model.TwitterUser">
            <summary>
            This data class provides more information than the basic data provided by
            <see cref="T:TweetSharp.Twitter.Model.TwitterUser"/> returned in other calls for friends and followers.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterUser.CompareTo(TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="user">The user.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. 
            The return value has the following meanings: 
            Less than zero: This object is less than the <paramref name="user"/> parameter.
            Zero: This object is equal to <paramref name="user"/>. 
            Greater than zero: This object is greater than <paramref name="user"/>.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterUser.Equals(TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="user">The user.</param>
            <returns>
            true if the current object is equal to the <paramref name="user"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterUser.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="user">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterUser.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterUser.op_Equality(TweetSharp.Twitter.Model.TwitterUser,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TweetSharp.Twitter.Model.TwitterUser.op_Inequality(TweetSharp.Twitter.Model.TwitterUser,TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.Id">
            <summary>
            Gets or sets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.FollowersCount">
            <summary>
            Gets or sets the followers count.
            </summary>
            <value>The followers count.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.ProfileImageUrl">
            <summary>
            Gets or sets the profile image URL.
            </summary>
            <value>The profile image URL.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.IsProtected">
            <summary>
            Gets or sets a value indicating whether the user's timeline is protected.
            </summary>
            <value>
            	<c>true</c> if the  user's timeline is protected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.ScreenName">
            <summary>
            Gets or sets the user's screen name.
            </summary>
            <value>The user's screen name.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.Location">
            <summary>
            Gets or sets the user's self-described location. 
            </summary>
            <value>The user's self-described location.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.Status">
            <summary>
            Gets or sets the user's last <seealso cref="T:TweetSharp.Twitter.Model.TwitterStatus"/>.
            </summary>
            <value>The user's last status.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.FriendsCount">
            <summary>
            Gets or sets the friends count.
            </summary>
            <value>The friends count.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.ProfileBackgroundColor">
            <summary>
            Gets or sets the color of the user's profile background.
            </summary>
            <value>The color of the user's profile background.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.UtcOffset">
            <summary>
            Gets or sets the UTC offset.
            </summary>
            <value>The UTC offset.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.ProfileTextColor">
            <summary>
            Gets or sets the color of the profile text.
            </summary>
            <value>The color of the profile text.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.ProfileBackgroundImageUrl">
            <summary>
            Gets or sets the user's profile background image URL.
            </summary>
            <value>The user's profile background image URL.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.TimeZone">
            <summary>
            Gets or sets the time zone.
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.FavouritesCount">
            <summary>
            Gets or sets the favorites count.
            </summary>
            <remarks>
            Spelling is UK English here but not elsewhere.
            </remarks>
            <value>The favorites count.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.ProfileLinkColor">
            <summary>
            Gets or sets the color of profile links.
            </summary>
            <value>The color of profile links.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.StatusesCount">
            <summary>
            Gets or sets the statuses count.
            </summary>
            <value>The statuses count.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.ProfileSidebarFillColor">
            <summary>
            Gets or sets the color of the profile sidebar fill.
            </summary>
            <value>The color of the profile sidebar fill.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.ProfileSidebarBorderColor">
            <summary>
            Gets or sets the color of the profile sidebar border.
            </summary>
            <value>The color of the profile sidebar border.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.IsProfileBackgroundTiled">
            <summary>
            Gets or sets a value indicating whether the user's profile is background tiled.
            </summary>
            <value>
            	<c>true</c> if the user's profile is profile background tiled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.HasNotifications">
            <summary>
            Gets or sets a value indicating whether the user's profile has notifications enabled.
            </summary>
            <value>
            	<c>true</c> if the user's profile has notifications enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.IsFollowing">
            <summary>
            Gets or sets a value indicating whether the user is following the authenticated user.
            </summary>
            <value>
            	<c>true</c> if the user is following the authenticated user; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.IsVerified">
            <summary>
            Gets or sets a value indicating whether the user is verified by Twitter as authentic.
            </summary>
            <value>
            	<c>true</c> if the user is verified by Twitter as authentic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.IsGeoEnabled">
            <summary>
            Gets or sets a value indicating whether the user has enabled geo-tagging.
            </summary>
            <value>
            	<c>true</c> if the user has enabled geo-tagging.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.Language">
            <summary>
            Gets or sets the user's known language.
            </summary>
            <value>The user's known language.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.CreatedDate">
            <summary>
            Gets or sets the created date.
            </summary>
            <value>The created date.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Model.TwitterUser.RawSource">
            <summary>
            The source content used to deserialize the model entity instance.
            Can be XML or JSON, depending on the endpoint used.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Service.ITwitterService">
            <summary>
            Defines a contract for a <see cref="T:TweetSharp.Twitter.Service.TwitterService"/> implementation.
            </summary>
        </member>
        <member name="T:TweetSharp.Twitter.Service.TwitterCursorList`1">
            <summary>
            A generic collection that also contains any cursor data necessary for paging
            using Twitter's cursor feature.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterCursorList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Service.TwitterCursorList`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterCursorList`1.NextCursor">
            <summary>
            Gets or sets the next cursor.
            </summary>
            <value>The next cursor.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterCursorList`1.PreviousCursor">
            <summary>
            Gets or sets the previous cursor.
            </summary>
            <value>The previous cursor.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Service.TwitterFilterStreamOptions">
            <summary>
            Options for filtering the Twitter API Filter stream.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterFilterStreamOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Service.TwitterFilterStreamOptions"/> class.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterFilterStreamOptions.TrackingKeywords">
            <summary>
            Gets or sets the tracking keywords.
            </summary>
            <value>The tracking keywords.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterFilterStreamOptions.FollowingUserIds">
            <summary>
            Gets or sets the following user ids.
            </summary>
            <value>The following user ids.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterFilterStreamOptions.BoundingGeoLocations">
            <summary>
            Gets or sets the bounding geo locations.
            </summary>
            <value>The bounding geo locations.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterFilterStreamOptions.Backlog">
            <summary>
            Gets or sets the backlog.
            </summary>
            <value>The backlog.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Service.TwitterSearchOptions">
            <summary>
            Options for filtering the Twitter API Filter stream.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterSearchOptions.Location">
            <summary>
            Returns tweets by users located within a given radius of the given latitude/longitude.  
            The location is preferentially taking from the Geotagging API, 
            but will fall back to their Twitter profile. 
            
            You cannot use the near phrase operator via the API to geocode arbitrary locations 
            but you can use this geocode parameter to search near geocodes directly. 
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterSearchOptions.LocationRadiusMiles">
            <summary>
            Returns tweets by users located within a given radius of the given latitude/longitude.  
            The location is preferentially taking from the Geotagging API, 
            but will fall back to their Twitter profile. 
            
            You cannot use the near phrase operator via the API to geocode arbitrary locations 
            but you can use this geocode parameter to search near geocodes directly. 
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterSearchOptions.LocaleIso">
            <summary>
            Specify the language of the query you are sending (only ja is currently effective). 
            This is intended for language-specific clients and the default should work
            in the majority of cases. 
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/ISO_639-1" />
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterSearchOptions.LanguageIso">
            <summary>
            Restricts tweets to the given language, given by an ISO 639-1 code. 
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/ISO_639-1"/>
        </member>
        <member name="T:TweetSharp.Twitter.Service.TwitterService">
            <summary>
            This service provides a simple API layer for TweetSharp that hides
            serialization details and uses the most efficient API configuration.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.OnStreamResult(TweetSharp.Twitter.Service.TwitterStreamResultEventArgs)">
            <summary>
            Raises the <see cref="E:TweetSharp.Twitter.Service.TwitterService.StreamResult"/> event.
            </summary>
            <param name="args">The <see cref="T:TweetSharp.Twitter.Service.TwitterStreamResultEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.#ctor(TweetSharp.IClientInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Service.TwitterService"/> class.
            </summary>
            <param name="info">The client info.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Service.TwitterService"/> class.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.CacheWith(Hammock.Caching.ICache)">
            <summary>
            Delegates caching to the provided <see cref="T:Hammock.Caching.ICache"/> instance.
            </summary>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.CacheFor(System.TimeSpan)">
            <summary>
            Caches all following API calls using the current caching scheme
            for a specified length of time. 
            Cache keys are scoped to the authenticating user and the API URI.
            </summary>
            <param name="length">The length of time to cache individual queries for until they are invalid.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.CacheForInactivityOf(System.TimeSpan)">
            <summary>
            Caches all following API calls using the current caching scheme
            for a specified length of inactive time. Inactive time corresponds
            to the amount of time passed without attempts to access or update
            the cache key.
            Cache keys are scoped to the authenticating user and the API URI.
            </summary>
            <param name="length">The length of inactivity required to invalid individual cached queries.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.RetryOn(TweetSharp.Twitter.Fluent.RetryOn,System.Int32)">
            <summary>
            Sets the retry policy for API requests based on 
            <see cref="M:TweetSharp.Twitter.Service.TwitterService.RetryOn(TweetSharp.Twitter.Fluent.RetryOn,System.Int32)"/> condition flags and a maximum number
            of retry attempts.
            </summary>
            <param name="conditions">The conditions.</param>
            <param name="maxRetries">The max retries.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.TimeoutAfter(System.TimeSpan)">
            <summary>
            Sets a duration before timing out an API request
            or Stream API read operation.
            </summary>
            <param name="duration">The duration before timing out.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AuthenticateAs(System.String,System.String)">
            <summary>
            Authenticates the service using a username and password.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AuthenticateWith(System.String,System.String)">
            <summary>
            Authenticates the service using an OAuth token and secret.
            Assumes consumer key and secret is set via <see cref="T:TweetSharp.TwitterClientInfo"/>
            </summary>
            <param name="token">The token.</param>
            <param name="tokenSecret">The token secret.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AuthenticateWith(System.String,System.String,System.String,System.String)">
            <summary>
            Authenticates the service using an OAuth token and secret.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="token">The token.</param>
            <param name="tokenSecret">The token secret.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetAuthenticatedQuery">
            <summary>
            Gets a new TweetSharp query based on the expected authentication mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.PrepareQuery``1(TweetSharp.Twitter.Fluent.IFluentTwitter,System.Func{TweetSharp.Twitter.Fluent.IFluentTwitter,TweetSharp.Twitter.Fluent.ITwitterLeafNode})">
            <summary>
            Prepares a TweetSharp query for execution.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <param name="executor">The executor.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.HandleResponse``1(TweetSharp.Twitter.Fluent.IFluentTwitter,TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            Handles the response from a TweetSharp query before passing to the service return.
            </summary>
            <typeparam name="T">The type of expected model result.</typeparam>
            <param name="query">The query.</param>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.HandleResponse(TweetSharp.Twitter.Fluent.IFluentTwitter,TweetSharp.Twitter.Model.TwitterResult)">
            <summary>
            Handles the response from a TweetSharp query before passing to the service return.
            </summary>
            <param name="query">The query.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnPublicTimeline">
            <summary>
            Returns the latest 20 tweets from Twitter's public timeline.
            This method is cached by Twitter for 60 seconds.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-public_timeline" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnHomeTimeline">
            <summary>
            Retrieves a list of all tweets on the authenticating user's home timeline.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnHomeTimeline(System.Int32)">
            <summary>
            Retrieves a list of all tweets on the authenticating user's home timeline.
            </summary>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnHomeTimeline(System.Int32,System.Int32)">
            <summary>
            Retrieves a list of all tweets on the authenticating user's home timeline.
            </summary>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnHomeTimelineSince(System.Int64)">
            <summary>
            Retrieves a list of all tweets on the authenticating user's home timeline.
            List is limited to results since a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnHomeTimelineSince(System.Int64,System.Int32)">
            <summary>
            Retrieves a list of all tweets on the authenticating user's home timeline.
            List is limited to results since a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnHomeTimelineSince(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves a list of all tweets on the authenticating user's home timeline.
            List is limited to results since a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnHomeTimelineBefore(System.Int64)">
            <summary>
            Retrieves a list of all tweets on the authenticating user's home timeline.
            List is limited to results before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnHomeTimelineBefore(System.Int64,System.Int32)">
            <summary>
            Retrieves a list of all tweets on the authenticating user's home timeline.
            List is limited to results before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnHomeTimelineBefore(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves a list of all tweets on the authenticating user's home timeline.
            List is limited to results before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnFriendsTimeline">
            <summary>
            Retrieves the tweets on the authenticating user's friends timeline.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnFriendsTimeline(System.Int32)">
            <summary>
            Retrieves the tweets on the authenticating user's friends timeline.
            </summary>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnFriendsTimeline(System.Int32,System.Int32)">
            <summary>
            Retrieves the tweets on the authenticating user's friends timeline.
            </summary>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnFriendsTimelineSince(System.Int64)">
            <summary>
            Retrieves the tweets on the authenticating user's friends timeline.
            List is limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnFriendsTimelineSince(System.Int64,System.Int32)">
            <summary>
            Retrieves the tweets on the authenticating user's friends timeline.
            List is limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnFriendsTimelineSince(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves the tweets on the authenticating user's friends timeline.
            List is limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnFriendsTimelineBefore(System.Int64)">
            <summary>
            Retrieves the tweets on the authenticating user's friends timeline.
            List is limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnFriendsTimelineBefore(System.Int64,System.Int32)">
            <summary>
            Retrieves the tweets on the authenticating user's friends timeline.
            List is limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnFriendsTimelineBefore(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves the tweets on the authenticating user's friends timeline.
            List is limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnUserTimeline">
            <summary>
            Retrieves tweets on the authenticated user's timeline.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnUserTimeline(System.Int32)">
            <summary>
            Retrieves tweets on the authenticated user's timeline.
            </summary>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnUserTimeline(System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the authenticated user's timeline.
            </summary>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnUserTimelineSince(System.Int64)">
            <summary>
            Retrieves tweets on the authenticated user's timeline.
            List is limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnUserTimelineSince(System.Int64,System.Int32)">
            <summary>
            Retrieves tweets on the authenticated user's timeline.
            List is limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnUserTimelineSince(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the authenticated user's timeline.
            List is limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnUserTimelineBefore(System.Int64)">
            <summary>
            Retrieves tweets on the authenticated user's timeline.
            List is limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnUserTimelineBefore(System.Int64,System.Int32)">
            <summary>
            Retrieves tweets on the authenticated user's timeline.
            List is limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnUserTimelineBefore(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the authenticated user's timeline.
            List is limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimeline(System.Int32)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            </summary>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimeline(System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimeline(System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimelineSince(System.Int32,System.Int64)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            List is limited to tweets after a given ID.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimelineSince(System.Int32,System.Int64,System.Int32)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            List is limited to tweets after a given ID.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimelineSince(System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            List is limited to tweets after a given ID.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimelineBefore(System.Int32,System.Int64)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            List is limited to tweets before a given ID.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="maxId">The max ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimelineBefore(System.Int32,System.Int64,System.Int32)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            List is limited to tweets before a given ID.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimelineBefore(System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            List is limited to tweets before a given ID.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimeline(System.String)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            </summary>
            <param name="userScreenName">The user's screen name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimeline(System.String,System.Int32)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            </summary>
            <param name="userScreenName">The user's screen name.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimeline(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            </summary>
            <param name="userScreenName">The user's screen name.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimelineSince(System.String,System.Int64)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            List is limited to tweets after a given ID
            </summary>
            <param name="userScreenName">The user's screen name.</param>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimelineSince(System.String,System.Int64,System.Int32)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            List is limited to tweets after a given ID
            </summary>
            <param name="userScreenName">The user's screen name.</param>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimelineSince(System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            List is limited to tweets after a given ID
            </summary>
            <param name="userScreenName">The user's screen name.</param>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimelineBefore(System.String,System.Int64)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            List is limited to tweets before a given ID
            </summary>
            <param name="userScreenName">The user's screen name.</param>
            <param name="maxId">The max ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimelineBefore(System.String,System.Int64,System.Int32)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            List is limited to tweets before a given ID
            </summary>
            <param name="userScreenName">The user's screen name.</param>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnSpecifiedUserTimelineBefore(System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the specified user's timeline.
            List is limited to tweets before a given ID
            </summary>
            <param name="userScreenName">The user's screen name.</param>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-user_timeline"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsMentioningMe">
            <summary>
            Lists the first 20 tweets mentioning the authenticated user.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsMentioningMe(System.Int32)">
            <summary>
            Lists the first page of tweets mentioning the authenticated user.
            Each page has 20 tweets.
            </summary>
            <param name="count">The number of tweets to return, up to 200.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsMentioningMe(System.Int32,System.Int32)">
            <summary>
            Lists the specified page of tweets mentioning the authenticated user.
            Each page has the specified number of tweets, up to 200.
            </summary>
            <param name="page">The page of tweets to return, relative to the tweet count.</param>
            <param name="count">The number of tweets to return, up to 200.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsMentioningMeSince(System.Int64)">
            <summary>
            Retrieves the tweets mentioning the authenticating user.
            List is limited to mentions after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsMentioningMeSince(System.Int64,System.Int32)">
            <summary>
            Retrieves the tweets mentioning the authenticating user.
            List is limited to mentions after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsMentioningMeSince(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves the tweets mentioning the authenticating user.
            List is limited to mentions after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsMentioningMeBefore(System.Int64)">
            <summary>
            Retrieves the tweets mentioning the authenticating user.
            List is limited to mentions before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsMentioningMeBefore(System.Int64,System.Int32)">
            <summary>
            Retrieves the tweets mentioning the authenticating user.
            List is limited to mentions before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsMentioningMeBefore(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves the tweets mentioning the authenticating user.
            List is limited to mentions before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsByMe">
            <summary>
            Retrieves all retweeted tweets by the authenticating user.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsByMe(System.Int32)">
            <summary>
            Retrieves all retweeted tweets by the authenticating user.
            </summary>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsByMe(System.Int32,System.Int32)">
            <summary>
            Retrieves all retweeted tweets by the authenticating user.
            </summary>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsByMe(System.Int64)">
            <summary>
            Retrieves all retweeted tweets by the authenticating user.
            List is limited to results after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsByMeSince(System.Int64,System.Int32)">
            <summary>
            Retrieves all retweeted tweets by the authenticating user.
            List is limited to results after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsByMeSince(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves all retweeted tweets by the authenticating user.
            List is limited to results after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsByMeBefore(System.Int64)">
            <summary>
            Retrieves all retweeted tweets by the authenticating user.
            List is limited to results before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsByMeBefore(System.Int64,System.Int32)">
            <summary>
            Retrieves all retweeted tweets by the authenticating user.
            List is limited to results before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsByMeBefore(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves all retweeted tweets by the authenticating user.
            List is limited to results before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsToMe">
            <summary>
            Retrieves all retweets visible to the authenticating user.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsToMe(System.Int32)">
            <summary>
            Retrieves all retweets visible to the authenticating user.
            </summary>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsToMe(System.Int32,System.Int32)">
            <summary>
            Retrieves all retweets visible to the authenticating user.
            </summary>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsToMeSince(System.Int64)">
            <summary>
            Retrieves all retweets visible to the authenticating user.
            List is limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsToMeSince(System.Int64,System.Int32)">
            <summary>
            Retrieves all retweets visible to the authenticating user.
            List is limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsToMeSince(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves all retweets visible to the authenticating user.
            List is limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsToMeBefore(System.Int64)">
            <summary>
            Retrieves all retweets visible to the authenticating user.
            List is limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsToMeBefore(System.Int64,System.Int32)">
            <summary>
            Retrieves all retweets visible to the authenticating user.
            List is limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsToMeBefore(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves all retweets visible to the authenticating user.
            List is limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsOfMyTweets">
            <summary>
            Retrieves tweets retweeted by the authenticating user.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsOfMyTweets(System.Int32)">
            <summary>
            Retrieves tweets retweeted by the authenticating user.
            </summary>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsOfMyTweets(System.Int32,System.Int32)">
            <summary>
            Retrieves tweets retweeted by the authenticating user.
            </summary>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsOfMyTweets(System.Int64)">
            <summary>
            Retrieves tweets retweeted by the authenticating user.
            List is limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsOfMyTweetsSince(System.Int64,System.Int32)">
            <summary>
            Retrieves tweets retweeted by the authenticating user.
            List is limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsOfMyTweetsSince(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets retweeted by the authenticating user.
            List is limited to tweets before a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsOfMyTweetsSince(System.Int64)">
            <summary>
            Retrieves tweets retweeted by the authenticating user.
            List is limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsOfMyTweetsBefore(System.Int64,System.Int32)">
            <summary>
            Retrieves tweets retweeted by the authenticating user.
            List is limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsOfMyTweetsBefore(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets retweeted by the authenticating user.
            List is limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetTweet(System.Int64)">
            <summary>
            Gets the tweet with the specified ID.
            </summary>
            <param name="id">The tweet ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0show"></seealso>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetTweet(System.Int32)">
            <summary>
            Gets the tweet with the specified ID.
            </summary>
            <param name="id">The tweet ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0show"></seealso>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendTweet(System.String)">
            <summary>
            Tweets the specified text from the authenticated user.
            A tweet with text identical to the authenticating user's 
            current status will be ignored.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendTweet(System.String,System.Double,System.Double)">
            <summary>
            Tweets the specified text from the authenticated user.
            Includes provided geo-tagging data.
            A tweet with text identical to the authenticating user's 
            current status will be ignored.
            </summary>
            <param name="text">The text.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendTweet(System.String,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Tweets the specified text from the authenticated user.
            Includes the provided <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/> data.
            A tweet with text identical to the authenticating user's 
            current status will be ignored.
            </summary>
            <param name="text">The text.</param>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendTweet(System.String,System.Int64)">
            <summary>
            Tweets the specified text from the authenticated user.
            You must mention a user using @username in your message
            if you intend your tweet to include a reference to <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.InReplyToStatusId"/>.
            A tweet with text identical to the authenticating user's 
            current status will be ignored.
            </summary>
            <param name="text"></param>
            <param name="inReplyToStatusId"></param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendTweet(System.String,System.Int64,TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Tweets the specified text from the authenticated user.
            Includes the provided <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/> data.
            You must mention a user using @username in your message
            if you intend your tweet to include a reference to <see cref="P:TweetSharp.Twitter.Model.TwitterStatus.InReplyToStatusId"/>.
            A tweet with text identical to the authenticating user's
            current status will be ignored.
            </summary>
            <param name="text">The text.</param>
            <param name="inReplyToStatusId">The ID of the tweet this tweet is replying to.</param>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteTweet(TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Deletes a tweet. The tweet must be authored by the authenticated user.
            </summary>
            <param name="status">The tweet to delete.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteTweet(System.Int64)">
            <summary>
            Deletes a tweet. The tweet must be authored by the authenticated user.
            </summary>
            <param name="id">The tweet ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteTweet(System.Int32)">
            <summary>
            Deletes a tweet. The tweet must be authored by the authenticated user.
            </summary>
            <param name="id">The tweet ID.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendRetweet(System.Int64)">
            <summary>
            Posts a retweet of a given tweet.
            </summary>
            <param name="statusId">The status ID.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweet" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendRetweet(TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Posts a retweet of a given tweet.
            </summary>
            <param name="status">The status.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweet"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendRetweet(System.Int64,TweetSharp.Twitter.Fluent.RetweetMode)">
            <summary>
            Posts a retweet of a given tweet.
            </summary>
            <param name="statusId">The status ID.</param>
            <param name="mode">The <seealso cref="T:TweetSharp.Twitter.Fluent.RetweetMode"/> mode.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweet"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendRetweet(TweetSharp.Twitter.Model.TwitterStatus,TweetSharp.Twitter.Fluent.RetweetMode)">
            <summary>
            Sends the retweet.
            </summary>
            <param name="status">The status.</param>
            <param name="mode">The <seealso cref="T:TweetSharp.Twitter.Fluent.RetweetMode"/> mode.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweets(System.Int64)">
            <summary>
            Retrieves retweets of a given tweet.
            Requires authentication.
            </summary>
            <param name="statusId">The status ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-GET-statuses-id-retweeted_by"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweets(System.Int64,System.Int32)">
            <summary>
            Retrieves retweets of a given tweet.
            Requires authentication.
            </summary>
            <param name="statusId">The status ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-GET-statuses-id-retweeted_by"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweets(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves retweets of a given tweet.
            Requires authentication.
            </summary>
            <param name="statusId">The status ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-GET-statuses-id-retweeted_by"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsSince(System.Int64,System.Int64)">
            <summary>
            Retrieves retweets of a given tweet.
            Requires authentication.
            List is limited to tweets after a given ID.
            </summary>
            <param name="statusId">The status ID.</param>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-GET-statuses-id-retweeted_by"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsSince(System.Int64,System.Int64,System.Int32)">
            <summary>
            Retrieves retweets of a given tweet.
            Requires authentication.
            List is limited to tweets after a given ID.
            </summary>
            <param name="statusId">The status ID.</param>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-GET-statuses-id-retweeted_by"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsSince(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves retweets of a given tweet.
            Requires authentication.
            List is limited to tweets after a given ID.
            </summary>
            <param name="statusId">The status ID.</param>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-GET-statuses-id-retweeted_by"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsBefore(System.Int64,System.Int64)">
            <summary>
            Retrieves retweets of a given tweet.
            Requires authentication.
            List is limited to tweets before a given ID.
            </summary>
            <param name="statusId">The status ID.</param>
            <param name="maxId">The max ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-GET-statuses-id-retweeted_by"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsBefore(System.Int64,System.Int64,System.Int32)">
            <summary>
            Retrieves retweets of a given tweet.
            Requires authentication.
            List is limited to tweets before a given ID.
            </summary>
            <param name="statusId">The status ID.</param>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-GET-statuses-id-retweeted_by"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListRetweetsBefore(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves retweets of a given tweet.
            Requires authentication.
            List is limited to tweets before a given ID.
            </summary>
            <param name="statusId">The status ID.</param>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-GET-statuses-id-retweeted_by"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFriends">
            <summary>
            Gets up to the first 100 friends for the authenticating user.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFriends(System.Int64)">
            <summary>
            Lists the friends of the authenticated user by cursor value.
            This is useful for paging through large numbers of friends.
            </summary>
            <param name="cursor">The cursor.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFollowers">
            <summary>
            Gets up to the first 100 friends for the authenticating user.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFollowers(System.Int64)">
            <summary>
            Lists the friends of the authenticated user by cursor value.
            This is useful for paging through large numbers of friends.
            </summary>
            <param name="cursor">The cursor value for paging.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetUserProfile">
            <summary>
            Gets the authenticated user's profile.
            This is achieved with a call to verify credentials.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0verify_credentials"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetUserProfileFor(System.String)">
            <summary>
            Gets the specified user screen name's profile.
            </summary>
            <param name="screenName">The user's screen name.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users%C2%A0show" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetUserProfileFor(System.Int32)">
            <summary>
            Gets the specified user ID's profile.
            </summary>
            <param name="id">The user ID.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users%C2%A0show" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForUser(System.String)">
            <summary>
            Searches for a Twitter user given a query.
            This search is the same as Twitter's web-based People Search.
            This search yields a maximum of 1000 results in total.
            </summary>
            <param name="query">The search query.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users-search" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForUser(System.String,System.Int32)">
            <summary>
            Searches for a Twitter user given a query.
            This search is the same as Twitter's web-based People Search.
            This search yields a maximum of 1000 results in total.
            </summary>
            <param name="query">The search query.</param>
            <param name="page">The page of user results to get for this query.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForUser(System.String,System.Int32,System.Int32)">
            <summary>
            Searches for a Twitter user given a query.
            This search is the same as Twitter's web-based People Search.
            This search yields a maximum of 1000 results in total.
            </summary>
            <param name="query">The search query.</param>
            <param name="page">The page of user results to get for this query.</param>
            <param name="count">The number of results to return on this page.</param>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListUserProfilesFor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the user profiles of up to 20 of the specified user screen names.
            </summary>
            <param name="screenNames">The screen names to retrieve.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-users-lookup" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListUserProfilesFor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the user profiles of up to 20 of the specified user IDs.
            </summary>
            <param name="userIds">The user IDs to retrieve.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-users-lookup" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListUserProfilesFor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the user profiles of up to 20 of the specified user screen names and IDs.
            </summary>
            <param name="screenNames">The screen names to retrieve.</param>
            <param name="userIds">The user IDs to retrieve.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-users-lookup" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.CreatePublicList(System.String,System.String)">
            <summary>
            Creates a new public list for the authenticated user. Accounts are limited to 20 lists.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listName">The list name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-lists"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.CreatePublicList(System.String,System.String,System.String)">
            <summary>
            Creates a new public list for the authenticated user. Accounts are limited to 20 lists.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listName">The list name.</param>
            <param name="listDescription">The list description.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-lists"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.CreatePrivateList(System.String,System.String)">
            <summary>
            Creates a new list for the authenticated user. Accounts are limited to 20 lists.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listName">The list name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-lists"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.CreatePrivateList(System.String,System.String,System.String)">
            <summary>
            Creates a new list for the authenticated user. Accounts are limited to 20 lists.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listName">The list name.</param>
            <param name="listDescription">The list description.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-lists"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateList(TweetSharp.Twitter.Model.TwitterList)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-lists-id" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListsFor(System.String)">
            <summary>
            List the lists of the specified user. 
            Private lists are included if the authenticated users is the same as the 
            user whose lists are being returned.
            </summary>
            <param name="listOwnerScreenName">The screen name of the list owner</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-lists"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListsFor(System.String,System.Int64)">
            <summary>
            List the lists of the specified user. 
            Private lists are included if the authenticated users is the same as the 
            user whose lists are being returned.
            </summary>
            <param name="listOwnerScreenName">The screen name of the list owner</param>
            <param name="cursor">The cursor location in the master list</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-lists"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetList(System.String,System.Int64)">
            <summary>
            Gets the list identified by the given info.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-id"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetList(System.String,System.Int32)">
            <summary>
            Gets the list identified by the given info.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-id"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetList(System.String,System.String)">
            <summary>
            Gets the list identified by the given info.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-id"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteList(System.String,System.Int64)">
            <summary>
            Deletes a list identified by the given info.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-DELETE-list-id"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteList(System.String,System.Int32)">
            <summary>
            Deletes a list identified by the given info.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-DELETE-list-id"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteList(System.String,System.String)">
            <summary>
            Deletes a list identified by the given info.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-DELETE-list-id"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimeline(System.String,System.Int32)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimeline(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimeline(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimelineSince(System.String,System.Int32,System.Int64)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            List is limited to tweets after a given ID.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimelineSince(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            List is limited to tweets after a given ID.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimelineSince(System.String,System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            List is limited to tweets after a given ID.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimelineBefore(System.String,System.Int32,System.Int64)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            List is limited to tweets before a given ID.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="maxId">The max ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimelineBefore(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            List is limited to tweets before a given ID.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimelineBefore(System.String,System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            List is limited to tweets before a given ID.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimeline(System.String,System.String)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimeline(System.String,System.String,System.Int32)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimeline(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimelineSince(System.String,System.String,System.Int64)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            List is limited to tweets after a given ID.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimelineSince(System.String,System.String,System.Int64,System.Int32)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            List is limited to tweets after a given ID.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimelineSince(System.String,System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            List is limited to tweets after a given ID.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimelineBefore(System.String,System.String,System.Int64)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            List is limited to tweets before a given ID.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="maxId">The max ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimelineBefore(System.String,System.String,System.Int64,System.Int32)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            List is limited to tweets before a given ID.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListTweetsOnListTimelineBefore(System.String,System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves tweets on the list owner's list timeline.
            Requires authentication.
            List is limited to tweets before a given ID.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListMembershipsFor(System.String)">
            <summary>
            List the lists the specified user has been added to.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-memberships"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListSubscriptionsFor(System.String)">
            <summary>
            List the lists the specified user follows.
            </summary>
            <param name="listSubscriberScreenName">The list subscriber's screen name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscriptions"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListSubscriptionsFor(System.String,System.Int64)">
            <summary>
            List the lists the specified user follows.
            </summary>
            <param name="listSubscriberScreenName">The list subscriber's screen name.</param>
            <param name="cursor">The cursor.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscriptions"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListMembers(System.String,System.Int32)">
            <summary>
            Retrieves the members of the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-members"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListMembers(System.String,System.String)">
            <summary>
            Retrieves the members of the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-members"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListMembers(System.String,System.Int32,System.Int64)">
            <summary>
            Retrieves the members of the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="cursor">The cursor.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-members"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListMembers(System.String,System.String,System.Int64)">
            <summary>
            Retrieves the members of the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="cursor">The cursor.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-members"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AddMemberToList(System.String,System.Int64,System.Int32)">
            <summary>
            Add a member to a list. The authenticated user must own the list to add members to it.
            Lists are limited to 500 members.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-list-members"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AddMemberToList(System.String,System.Int32,System.Int32)">
            <summary>
            Add a member to a list. The authenticated user must own the list to add members to it.
            Lists are limited to 500 members.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-list-members"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AddMemberToList(System.String,System.String,System.Int32)">
            <summary>
            Add a member to a list. The authenticated user must own the list to add members to it.
            Lists are limited to 500 members.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-list-members"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.RemoveMemberFromList(System.String,System.Int32,System.Int32)">
            <summary>
            Removes the specified member from the list.
            The authenticated user must be the list's owner to remove members from the list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="userId">The user ID to remove.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-DELETE-list-members"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.RemoveMemberFromList(System.String,System.String,System.Int32)">
            <summary>
            Removes the specified member from the list.
            The authenticated user must be the list's owner to remove members from the list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user ID to remove.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-DELETE-list-members"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyListMember(System.String,System.Int32,System.Int32)">
            <summary>
            Verifies the given user is a member of the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscribers-id"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyListMember(System.String,System.String,System.Int32)">
            <summary>
            Verifies the given user is a member of the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscribers-id"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListFollowers(System.String,System.Int32)">
            <summary>
            Returns the subscribers of the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscribers"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListFollowers(System.String,System.String)">
            <summary>
            Returns the subscribers of the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscribers"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListFollowers(System.String,System.Int32,System.Int64)">
            <summary>
            Returns the subscribers of the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="cursor">The cursor.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscribers"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListListFollowers(System.String,System.String,System.Int64)">
            <summary>
            Returns the subscribers of the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="cursor">The cursor.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscribers"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FollowList(System.String,System.Int64)">
            <summary>
            Subscribes the authenticated user to the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-list-subscribers"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FollowList(System.String,System.String)">
            <summary>
            Subscribes the authenticated user to the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-list-subscribers"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnfollowList(System.String,System.Int64)">
            <summary>
            Unsubscribes the authenticated user from the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-DELETE-list-subscribers"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnfollowList(System.String,System.String)">
            <summary>
            Unsubscribes the authenticated user from the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-DELETE-list-subscribers"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyListFollower(System.String,System.Int32,System.Int32)">
            <summary>
            Verifies the given user is a follower (subscriber) of the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listId">The list ID.</param>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscribers-id"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyListFollower(System.String,System.String,System.Int32)">
            <summary>
            Verifies the given user is a follower (subscriber) of the specified list.
            </summary>
            <param name="listOwnerScreenName">The list owner's screen name.</param>
            <param name="listSlug">The list slug.</param>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscribers-id"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesReceived">
            <summary>
            Retrieves direct messages received by the authenticating user.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesReceived(System.Int32)">
            <summary>
            Retrieves direct messages received by the authenticating user.
            </summary>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesReceived(System.Int32,System.Int32)">
            <summary>
            Retrieves direct messages received by the authenticating user.
            </summary>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesReceivedSince(System.Int64)">
            <summary>
            Retrieves direct messages received by the authenticating user.
            List is limited to messages after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesReceivedSince(System.Int64,System.Int32)">
            <summary>
            Retrieves direct messages received by the authenticating user.
            List is limited to messages after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesReceivedSince(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves direct messages received by the authenticating user.
            List is limited to messages after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesReceivedBefore(System.Int64)">
            <summary>
            Retrieves direct messages received by the authenticating user.
            List is limited to messages before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesReceivedBefore(System.Int64,System.Int32)">
            <summary>
            Retrieves direct messages received by the authenticating user.
            List is limited to messages before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesReceivedBefore(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves direct messages received by the authenticating user.
            List is limited to messages before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesSent">
            <summary>
            Retrieves direct messages sent by the authenticating user.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesSent(System.Int32)">
            <summary>
            Retrieves direct messages sent by the authenticating user.
            </summary>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesSent(System.Int32,System.Int32)">
            <summary>
            Retrieves direct messages sent by the authenticating user.
            </summary>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesSentSince(System.Int64)">
            <summary>
            Retrieves direct messages sent by the authenticating user.
            List is limited to messages after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesSentSince(System.Int64,System.Int32)">
            <summary>
            Retrieves direct messages sent by the authenticating user.
            List is limited to messages after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesSentSince(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves direct messages sent by the authenticating user.
            List is limited to messages after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesSentBefore(System.Int64)">
            <summary>
            Retrieves direct messages sent by the authenticating user.
            List is limited to messages before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesSentBefore(System.Int64,System.Int32)">
            <summary>
            Retrieves direct messages sent by the authenticating user.
            List is limited to messages before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListDirectMessagesSentBefore(System.Int64,System.Int32,System.Int32)">
            <summary>
            Retrieves direct messages sent by the authenticating user.
            List is limited to messages before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteDirectMessage(System.Int64)">
            <summary>
            Deletes the direct message. The direct message must be authored by the authenticated user.
            </summary>
            <param name="messageId">The message ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0destroy"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteDirectMessage(System.Int32)">
            <summary>
            Deletes the direct message. The direct message must be authored by the authenticated user.
            </summary>
            <param name="messageId">The message ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0destroy"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendDirectMessage(System.Int32,System.String)">
            <summary>
            Sends a direct message from the authenticated user.
            </summary>
            <param name="recipientUserId">The recipient user ID.</param>
            <param name="text">The text.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0new"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SendDirectMessage(System.String,System.String)">
            <summary>
            Sends a direct message from the authenticated user.
            </summary>
            <param name="recipientScreenName">The recipient's screen name.</param>
            <param name="text">The text.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0new"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FollowUser(System.Int32)">
            <summary>
            Follows the specified user by ID.
            </summary>
            <param name="userId">The user's ID.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0create"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FollowUser(System.String)">
            <summary>
            Follows the specified user by screen name.
            </summary>
            <param name="screenName">The user's screen name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0create"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetIncomingFriendRequests">
            <summary>
            Gets the list of user IDs for users who have submitted follow requests which have not been acted on.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships-incoming" />
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetIncomingFriendRequests(System.Int64)">
            <summary>
            Gets a page of userids for users who have submitted follow requests which have not been acted on.
            </summary>
            <param name="cursor">The cursor.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships-incoming" />
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetOutgoingFriendRequests">
            <summary>
            Gets the list of userids to whom the authenticating user has submitted follow requests which have not been acted on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetOutgoingFriendRequests(System.Int64)">
            <summary>
            Gets a page of userids to whom the authenticating user has submitted follow requests which have not been acted on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnfollowUser(System.String)">
            <summary>
            Unfollows the specified user from the authenticated user's friends.
            </summary>
            <param name="screenName">The user screen name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0destroy"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnfollowUser(System.Int32)">
            <summary>
            Unfollows the specified user from the authenticated user's friends.
            </summary>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0destroy"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyFriendship(System.Int32)">
            <summary>
            Returns an indication whether the authenticating user follows the specified user.
            </summary>
            <param name="followedUserId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-exists"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyFriendship(System.Int32,System.Int32)">
            <summary>
            Returns an indication whether the first specified user follows the other specified user.
            </summary>
            <param name="followingUserId">The following user ID.</param>
            <param name="followedUserId">The followed user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-exists"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetFriendshipInfo(System.String,System.String)">
            <summary>
            Returns detailed information about the relationship between two users.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-show"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetFriendshipInfo(System.Int32,System.Int32)">
            <summary>
            Returns detailed information about the relationship between two users.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-show"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFriendIds">
            <summary>
            Lists the authenticating user's friends' IDs.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFriendIds(System.Int64)">
            <summary>
            Lists the authenticating user's friends' IDs.
            </summary>
            <param name="cursor">The cursor.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFriendIdsFor(System.Int32)">
            <summary>
            Lists the specified user's friends' IDs.
            </summary>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFriendIdsFor(System.Int32,System.Int64)">
            <summary>
            Lists the specified user's friends' IDs.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="cursor">The cursor.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFriendIdsFor(System.String)">
            <summary>
            Lists the specified user's friends' IDs.
            </summary>
            <param name="userScreenName">The user screen name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFriendIdsFor(System.String,System.Int64)">
            <summary>
            Lists the specified user's friends' IDs.
            </summary>
            <param name="userScreenName">The user screen name.</param>
            <param name="cursor">The cursor.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFollowerIds">
            <summary>
            Lists the authenticating user's followers' IDs.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFollowerIds(System.Int64)">
            <summary>
            Lists the authenticating user's followers' IDs.
            </summary>
            <param name="cursor">The cursor.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFollowerIdsFor(System.Int32)">
            <summary>
            Lists the specified user's followers' IDs.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFollowerIdsFor(System.String)">
            <summary>
            Lists the specified user's followers' IDs.
            </summary>
            <param name="userScreenName">The user screen name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFollowerIdsFor(System.Int32,System.Int64)">
            <summary>
            Lists the specified user's followers' IDs.
            </summary>
            <param name="userId">The user id.</param>
            <param name="cursor">The cursor.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFollowerIdsFor(System.String,System.Int64)">
            <summary>
            Lists the specified user's followers' IDs.
            </summary>
            <param name="userScreenName">The user screen name.</param>
            <param name="cursor">The cursor.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyCredentials">
            <summary>
            Verifies the credentials provided with the service call to ensure a user 
            will authenticate against the API.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0verify_credentials"></seealso>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetRateLimitStatus">
            <summary>
            Gets the <see cref="T:TweetSharp.Twitter.Model.TwitterRateLimitStatus"/> for the authenticated user.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0rate_limit_status"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.EndSession">
            <summary>
            Ends the session of the authenticating user, returning a null cookie.  
            Use this method to sign users out of client-facing applications like widgets.
            If this method returns a null <see cref="T:TweetSharp.Twitter.Model.TwitterError"/> instance, 
            the session was located and ended successfully.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0end_session"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateDeliveryDevice(TweetSharp.Twitter.Model.TwitterDeliveryDevice)">
            <summary>
            Updates the authenticated user's tweet delivery device.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_delivery_device"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateProfileColors(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Updates the authenticated user's profile colors.
            The colors are inputted as hexademical colors with or without a leading '#'.
            </summary>
            <param name="backgroundColor">Color of the background.</param>
            <param name="textColor">Color of the text.</param>
            <param name="linkColor">Color of the link.</param>
            <param name="sidebarFillColor">Color of the sidebar fill.</param>
            <param name="sidebarBorderColor">Color of the sidebar border.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_colors"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateProfileColors(System.String)">
            <summary>
            Updates the authenticated user's profile colors.
            The colors are inputted as hexademical colors with or without a leading '#'.
            </summary>
            <param name="backgroundColor">Color of the background.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_colors"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateProfileColors(System.String,System.String)">
            <summary>
            Updates the authenticated user's profile colors.
            The colors are inputted as hexademical colors with or without a leading '#'.
            </summary>
            <param name="backgroundColor">Color of the background.</param>
            <param name="textColor">Color of the text.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_colors"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateProfileColors(System.String,System.String,System.String)">
            <summary>
            Updates the authenticated user's profile colors.
            The colors are inputted as hexademical colors with or without a leading '#'.
            </summary>
            <param name="backgroundColor">Color of the background.</param>
            <param name="textColor">Color of the text.</param>
            <param name="linkColor">Color of the link.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_colors"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateProfileColors(System.String,System.String,System.String,System.String)">
            <summary>
            Updates the authenticated user's profile colors.
            The colors are inputted as hexademical colors with or without a leading '#'.
            </summary>
            <param name="backgroundColor">Color of the background.</param>
            <param name="textColor">Color of the text.</param>
            <param name="linkColor">Color of the link.</param>
            <param name="sidebarFillColor">Color of the sidebar fill.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_colors"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateProfileImage(System.String)">
            <summary>
            Updates the authenticating user's profile image.
            This method expects raw multipart data, not a URL to an image.
            Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size.
            Images with width larger than 500 pixels will be scaled down.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_image"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateProfileBackgroundImage(System.String)">
            <summary>
            Updates the authenticated user's profile background image.
            This method expects raw multipart data, not a URL to an image.
            Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size.
            Images with width larger than 2048 pixels will be scaled down.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_background_image"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UpdateProfile(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Updates the authenticated user's profile info.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="email">The email.</param>
            <param name="url">The URL.</param>
            <param name="location">The location.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFavoriteTweets">
            <summary>
            Retrieves the authenticated user's favorited tweets.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFavoriteTweets(System.Int32)">
            <summary>
            Retrieves the authenticated user's favorited tweets.
            </summary>
            <param name="page">The page expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFavoriteTweets(System.Int32,System.Int32)">
            <summary>
            Retrieves the authenticated user's favorited tweets.
            </summary>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFavoriteTweetsFor(System.Int32)">
            <summary>
            Retrieves the specified user's favorited tweets.
            This method requires authentication.
            </summary>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFavoriteTweetsFor(System.Int32,System.Int32)">
            <summary>
            Retrieves the specified user's favorited tweets.
            This method requires authentication.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="page">The page expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFavoriteTweetsFor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves the specified user's favorited tweets.
            This method requires authentication.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="page">The page expected.</param>
            <param name="count">The number of results expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFavoriteTweetsFor(System.String)">
            <summary>
            Retrieves the specified user's favorited tweets.
            This method requires authentication.
            </summary>
            <param name="userScreenName">The user screen name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFavoriteTweetsFor(System.String,System.Int32)">
            <summary>
            Retrieves the specified user's favorited tweets.
            This method requires authentication.
            </summary>
            <param name="userScreenName">The user screen name.</param>
            <param name="page">The page expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListFavoriteTweetsFor(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves the specified user's favorited tweets.
            This method requires authentication.
            </summary>
            <param name="userScreenName">The user screen name.</param>
            <param name="page">The page expected.</param>
            <param name="count">The count.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FavoriteTweet(System.Int64)">
            <summary>
            Favorites a tweet on behalf of the authenticated user.
            </summary>
            <param name="statusId">The status ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites%C2%A0create"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FavoriteTweet(TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Favorites a tweet on behalf of the authenticated user.
            </summary>
            <param name="status">The status.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites%C2%A0create"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnfavoriteTweet(System.Int64)">
            <summary>
            Unfavorites a tweet on behalf of the authenticated user.
            </summary>
            <param name="statusId">The status ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites%C2%A0destroy"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnfavoriteTweet(TweetSharp.Twitter.Model.TwitterStatus)">
            <summary>
            Unfavorites a tweet on behalf of the authenticated user.
            </summary>
            <param name="status">The status.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites%C2%A0destroy"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FollowUserNotifications(TweetSharp.Twitter.Model.TwitterUser)">
            <summary>
            Follows the specified user.
            </summary>
            <param name="user">The user.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0follow" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FollowUserNotifications(System.String)">
            <summary>
            Follows the specified user by screen name.
            </summary>
            <param name="screenName">The user's screen name.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0follow" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.FollowUserNotifications(System.Int32)">
            <summary>
            Follows the specified user by ID.
            </summary>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0follow"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnfollowUserNotifications(System.Int32)">
            <summary>
            Disables notifications for updates from the specified user to the authenticating user.
            Returns the specified user when successful.
            </summary>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0leave"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnfollowUserNotifications(System.String)">
            <summary>
            Disables notifications for updates from the specified user to the authenticating user.
            Returns the specified user when successful.
            </summary>
            <param name="userScreenName">The user screen name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0leave"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BlockUser(System.Int32)">
            <summary>
            Blocks the specified user on behalf of the authenticated user.
            </summary>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0create"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BlockUser(System.String)">
            <summary>
            Blocks the specified user on behalf of the authenticated user.
            </summary>
            <param name="userScreenName">The user screen name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0create"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnblockUser(System.Int32)">
            <summary>
            Unblocks the specified user on behalf of the authenticated user.
            </summary>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0destroy"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.UnblockUser(System.String)">
            <summary>
            Unblocks the specified user on behalf of the authenticated user.
            </summary>
            <param name="userScreenName">The user screen name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0destroy"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyBlocking(System.Int32)">
            <summary>
            Verifies whether the authenticated user is blocking the specified user.
            Returns the <seealso cref="T:TweetSharp.Twitter.Model.TwitterUser"/> of the blocked user if blocking, 
            and an error if the block is not established.
            </summary>
            <param name="userId"></param>
            <seealso href="http://apiwiki.twitter.com/Twitter+REST+API+Method%3A-blocks-exists"/> 
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.VerifyBlocking(System.String)">
            <summary>
            Verifies whether the authenticated user is blocking the specified user.
            Returns the <seealso cref="T:TweetSharp.Twitter.Model.TwitterUser"/> of the blocked user if blocking, 
            and an error if the block is not established.
            </summary>
            <param name="userScreenName">The user screen name.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter+REST+API+Method%3A-blocks-exists"/> 
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListBlockedUsers">
            <summary>
            Retrieves a list of all users blocked by the authenticated user.
            </summary>
            <seealso href="http://apiwiki.twitter.com/Twitter+REST+API+Method%3A-blocks-blocking" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListBlockedUsers(System.Int32)">
            <summary>
            Retrieves a list of all users blocked by the authenticated user.
            </summary>
            <param name="page">The page expected.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter+REST+API+Method%3A-blocks-blocking"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListBlockedUserIds">
            <summary>
            Retrieves a list of all user IDs blocked by the authenticated user.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking-ids"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ReportSpamFrom(System.String)">
            <summary>
            Reports the screen name as a spammer.
            </summary>
            <param name="userScreenName">The spammer's screen name.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-report_spam"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ReportSpamFrom(System.Int32)">
            <summary>
            Reports the user ID as a spammer.
            </summary>
            <param name="userId">The user ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-report_spam"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListSavedSearches">
            <summary>
            Lists the saved searches for the authenticating user.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetSavedSearch(System.Int32)">
            <summary>
            Gets the specified saved search.
            </summary> 
            <param name="searchId">The saved search ID.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches-show" />
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.CreateSavedSearch(System.String)">
            <summary>
            Creates a new saved search on behalf of the authenticated user.
            </summary>
            <param name="query">The saved search query.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches-create"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.DeleteSavedSearch(System.Int32)">
            <summary>
            Deletes the specified saved search on behalf of the authenticated user.
            </summary>
            <param name="searchId">The search ID.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches-destroy"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetRequestToken">
            <summary>
            Obtains an unauthorized OAuth request token for the given consumer application.
            This method assumes OAuth consumer info is part of <code>TwitterClientInfo</code>.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-request_token"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetRequestToken(System.String,System.String)">
            <summary>
            Obtains an unauthorized OAuth request token for the given consumer application.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-request_token"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetAuthorizationUrl(TweetSharp.Model.OAuthToken)">
            <summary>
            Gets the OAuth authorization URL to redirect users to to authorize the
            use of their credentials for your consumer application.
            </summary>
            <param name="requestToken">The request token.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-authorize"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetAuthorizationUrl(TweetSharp.Model.OAuthToken,System.String)">
            <summary>
            Gets the OAuth authorization URL to redirect users to to authorize the
            use of their credentials for your consumer application.
            </summary>
            <param name="requestToken">The request token.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-authorize"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AuthorizeDesktop(TweetSharp.Model.OAuthToken)">
            <summary>
            Gets the OAuth authorization URL to redirect users to to authorize the
            use of their credentials for your consumer application, and then
            calls the OS browser to navigate to that URL automatically.
            This method assumes OAuth consumer info is part of <code>TwitterClientInfo</code>.
            </summary>
            <param name="requestToken">The request token.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-authorize"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AuthorizeDesktop(System.String,System.String,TweetSharp.Model.OAuthToken)">
            <summary>
            Gets the OAuth authorization URL to redirect users to to authorize the
            use of their credentials for your consumer application, and then
            calls the OS browser to navigate to that URL automatically.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="requestToken">The request token.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-authorize"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetAuthenticationUrl(TweetSharp.Model.OAuthToken)">
            <summary>
            Gets the OAuth authorization URL to redirect users to to "Sign In With Twitter"
            through your consumer application.
            </summary>
            <param name="requestToken">The request token.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-authorize"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetAuthenticationUrl(TweetSharp.Model.OAuthToken,System.String)">
            <summary>
            Gets the OAuth authorization URL to redirect users to to "Sign In With Twitter"
            through your consumer application.
            </summary>
            <param name="requestToken">The request token.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-authorize"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AuthenticateDesktop(TweetSharp.Model.OAuthToken)">
            <summary>
            Gets the OAuth authorization URL to redirect users to to "Sign In With Twitter"
            through your consumer application, and then
            calls the OS browser to navigate to that URL automatically.
            The callback is always omitted for OOB.
            This method assumes OAuth consumer info is part of <code>TwitterClientInfo</code>.
            </summary>
            <param name="requestToken">The request token.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-authorize"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.AuthenticateDesktop(System.String,System.String,TweetSharp.Model.OAuthToken)">
            <summary>
            Gets the OAuth authorization URL to redirect users to to "Sign In With Twitter"
            through your consumer application, and then
            calls the OS browser to navigate to that URL automatically.
            The callback is always omitted for OOB.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="requestToken">The request token.</param>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-authorize"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetAccessToken(TweetSharp.Model.OAuthToken)">
            <summary>
            Exchanges an authorized OAuth request token for an authorized access token.
            The access token is used with the <code>AuthenticateWith</code> methods
            to authenticate on behalf of a user when accessing protected API methods.
            This method assumes OAuth consumer info is part of <code>TwitterClientInfo</code>.
            </summary>
            <param name="requestToken">The request token.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-access_token"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetAccessToken(System.String,System.String,TweetSharp.Model.OAuthToken)">
            <summary>
            Exchanges an authorized OAuth request token for an authorized access token.
            The access token is used with the <code>AuthenticateWith</code> methods
            to authenticate on behalf of a user when accessing protected API methods.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="requestToken">The request token.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-access_token"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetAccessToken(TweetSharp.Model.OAuthToken,System.String)">
            <summary>
            Exchanges an authorized OAuth request token for an authorized access token.
            The access token is used with the <code>AuthenticateWith</code> methods
            to authenticate on behalf of a user when accessing protected API methods.
            This method assumes OAuth consumer info is part of <code>TwitterClientInfo</code>.
            </summary>
            <param name="requestToken">The request token.</param>
            <param name="pin">The PIN verifier provided during desktop authorization.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-access_token"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.GetAccessToken(System.String,System.String,TweetSharp.Model.OAuthToken,System.String)">
            <summary>
            Exchanges an authorized OAuth request token for an authorized access token.
            The access token is used with the <code>AuthenticateWith</code> methods
            to authenticate on behalf of a user when accessing protected API methods.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="requestToken">The request token.</param>
            <param name="pin">The PIN verifier provided during desktop authorization.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-access_token"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListLocalTrendLocations">
            <summary>
            Retrieves a list of all Where On Earth (WOE) locations that support local trends.
            </summary>
            <returns></returns>
            <seealso href="http://twitterapi.pbworks.com/Twitter-REST-API-Method%3A-trends-location"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.ListLocalTrendLocations(TweetSharp.Twitter.Model.TwitterGeoLocation)">
            <summary>
            Retrieves a list of all Where On Earth (WOE) locations
            that map to the given <see cref="T:TweetSharp.Twitter.Model.TwitterGeoLocation"/>.
            </summary>
            <param name="orderByLocation">The order by location.</param>
            <returns></returns>
            <seealso href="http://twitterapi.pbworks.com/Twitter-REST-API-Method%3A-trends-location"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchLocalTrends(System.Int64)">
            <summary>
            Searches local trends for a specific Where On Earth (WOE) ID.
            </summary>
            <param name="woeId">The WOE ID.</param>
            <seealso href="http://twitterapi.pbworks.com/Twitter-REST-API-Method%3A-trends-location"/>
            <returns></returns>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.IsTwitterDown">
            <summary>
            Determines whether Twitter is currently down for maintenance or heavy load.
            </summary>
            <returns>
            	<c>true</c> if Twitter is down; otherwise, <c>false</c>.
            </returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-help%C2%A0test"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.IsTwitterUp">
            <summary>
            Determines whether Twitter is currently operational.
            </summary>
            <returns>
            	<c>true</c> if Twitter is up; otherwise, <c>false</c>.
            </returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-help%C2%A0test"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweets(System.String)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            </summary>
            <param name="phrase">The phrase.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweets(System.String,TweetSharp.Twitter.Service.TwitterSearchOptions)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Includes additional search options to narrow query results.
            </summary>
            <param name="phrase">The phrase.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweets(System.String,System.Int32)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            </summary>
            <param name="phrase">The phrase.</param>
            <param name="page">The expected page.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweets(System.String,System.Int32,TweetSharp.Twitter.Service.TwitterSearchOptions)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Includes additional search options to narrow query results.
            </summary>
            <param name="phrase">The phrase.</param>
            <param name="page">The expected page.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweets(System.String,System.Int32,System.Int32)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            </summary>
            <param name="phrase">The phrase.</param>
            <param name="page">The expected page.</param>
            <param name="count">The expected number of results.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search" />
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweets(System.String,System.Int32,System.Int32,TweetSharp.Twitter.Service.TwitterSearchOptions)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Includes additional search options to narrow query results.
            </summary>
            <param name="phrase">The phrase.</param>
            <param name="page">The expected page.</param>
            <param name="count">The expected number of results.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweetsSince(System.Int64,System.String)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="phrase">The phrase.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweetsSince(System.Int64,System.String,TweetSharp.Twitter.Service.TwitterSearchOptions)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Limited to tweets after a given ID.
            Includes additional search options to narrow query results.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="phrase">The phrase.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweetsSince(System.Int64,System.String,System.Int32)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="phrase">The phrase.</param>
            <param name="page">The expected page.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweetsSince(System.Int64,System.String,System.Int32,TweetSharp.Twitter.Service.TwitterSearchOptions)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Limited to tweets after a given ID.
            Includes additional search options to narrow query results.        
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="phrase">The phrase.</param>
            <param name="page">The expected page.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweetsSince(System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Limited to tweets after a given ID.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="phrase">The phrase.</param>
            <param name="page">The expected page.</param>
            <param name="count">The expected number of results.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweetsSince(System.Int64,System.String,System.Int32,System.Int32,TweetSharp.Twitter.Service.TwitterSearchOptions)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Limited to tweets after a given ID.
            Includes additional search options to narrow query results.
            </summary>
            <param name="sinceId">The since ID.</param>
            <param name="phrase">The phrase.</param>
            <param name="page">The expected page.</param>
            <param name="count">The expected number of results.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweetsBefore(System.Int64,System.String)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="phrase">The phrase.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweetsBefore(System.Int64,System.String,TweetSharp.Twitter.Service.TwitterSearchOptions)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Limited to tweets before a given ID.
            Includes additional search options to narrow query results.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="phrase">The phrase.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweetsBefore(System.Int64,System.String,System.Int32)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="phrase">The phrase.</param>
            <param name="page">The expected page.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweetsBefore(System.Int64,System.String,System.Int32,TweetSharp.Twitter.Service.TwitterSearchOptions)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Limited to tweets before a given ID.
            Includes additional search options to narrow query results.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="phrase">The phrase.</param>
            <param name="page">The expected page.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweetsBefore(System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Limited to tweets before a given ID.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="phrase">The phrase.</param>
            <param name="page">The expected page.</param>
            <param name="count">The expected number of results.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchForTweetsBefore(System.Int64,System.String,System.Int32,System.Int32,TweetSharp.Twitter.Service.TwitterSearchOptions)">
            <summary>
            Searches for tweets that match the Twitter search phrase provided.
            Limited to tweets before a given ID.
            Includes additional search options to narrow query results.
            </summary>
            <param name="maxId">The max ID.</param>
            <param name="phrase">The phrase.</param>
            <param name="page">The expected page.</param>
            <param name="count">The expected number of results.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchCurrentTrends">
            <summary>
            Returns the current top 10 trending topics on Twitter.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchCurrentTrendsWithoutHashtags">
            <summary>
            Returns the current top 10 trending topics on Twitter,
            filtering on trends without hashtags.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchDailyTrends">
            <summary>
            Returns the top 20 trending topics for each hour in a given day.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchDailyTrends(System.DateTime)">
            <summary>
            Returns the top 20 trending topics for each hour in a given day.
            </summary>
            <param name="startDate">The start date.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchDailyTrendsWithoutHashtags">
            <summary>
            Returns the top 20 trending topics for each hour in a given day,
            filtering on trends without hashtags.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchDailyTrendsWithoutHashtags(System.DateTime)">
            <summary>
            Returns the top 20 trending topics for each hour in a given day,
            filtering on trends without hashtags.
            </summary>
            <param name="startDate">The start date.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchWeeklyTrends">
            <summary>
            Returns the top 30 trending topics for each day in a given week.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchWeeklyTrends(System.DateTime)">
            <summary>
            Returns the top 30 trending topics for each day in a given week.
            </summary>
            <param name="startDate">The start date.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchWeeklyTrendsWithoutHashtags">
            <summary>
            Returns the top 30 trending topics for each day in a given week,
            filtering on trends with hashtags.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.SearchWeeklyTrendsWithoutHashtags(System.DateTime)">
            <summary>
            Returns the top 30 trending topics for each day in a given week,
            filtering on trends with hashtags.
            </summary>
            <param name="startDate">The start date.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamFilter">
            <summary>
            Asynchronously streams from the Twitter 'Filter' stream.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamFilter(TweetSharp.Twitter.Service.TwitterFilterStreamOptions)">
            <summary>
            Asynchronously streams from the Twitter 'Filter' stream.
            Uses filter options to refine results.
            </summary>
            <param name="options">The options.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamFilter(TweetSharp.Twitter.Service.TwitterFilterStreamOptions,System.TimeSpan)">
            <summary>
            Asynchronously streams from the Twitter 'Filter' stream.
            Uses filter options to refine results.
            </summary>
            <param name="options">The options.</param>
            <param name="duration">The duration.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamFilter(TweetSharp.Twitter.Service.TwitterFilterStreamOptions,System.Int32)">
            <summary>
            Asynchronously streams from the Twitter 'Filter' stream.
            Uses filter options to refine results.
            </summary>
            <param name="options">The options.</param>
            <param name="resultsPerCallback">The results per callback.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamFilter(TweetSharp.Twitter.Service.TwitterFilterStreamOptions,System.TimeSpan,System.Int32)">
            <summary>
            Asynchronously streams from the Twitter 'Filter' stream.
            Uses filter options to refine results.
            </summary>
            <param name="options">The options.</param>
            <param name="duration">The duration.</param>
            <param name="resultsPerCallback">The results per callback.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamFilter(System.TimeSpan)">
            <summary>
            Asynchronously streams from the Twitter 'Filter' stream.
            </summary>
            <param name="duration">The duration.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamFilter(System.TimeSpan,System.Int32)">
            <summary>
            Asynchronously streams from the Twitter 'Filter' stream.
            </summary>
            <param name="duration">The duration.</param>
            <param name="resultsPerCallback">The results per callback.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamFilter(System.Int32)">
            <summary>
            Asynchronously streams from the Twitter 'Filter' stream.
            </summary>
            <param name="resultsPerCallback">The results per callback.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamFirehose">
            <summary>
            Asynchronously streams from the Twitter 'Firehose' stream.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamFirehose(System.TimeSpan)">
            <summary>
            Asynchronously streams from the Twitter 'Firehose' stream.
            </summary>
            <param name="duration">The duration.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamFirehose(System.TimeSpan,System.Int32)">
            <summary>
            Asynchronously streams from the Twitter 'Firehose' stream.
            </summary>
            <param name="duration">The duration.</param>
            <param name="resultsPerCallback">The results per callback.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamFirehose(System.Int32)">
            <summary>
            Asynchronously streams from the Twitter 'Firehose' stream.
            </summary>
            <param name="resultsPerCallback">The results per callback.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamRetweets">
            <summary>
            Asynchronously streams from the Twitter 'Retweets' stream.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamRetweets(System.TimeSpan)">
            <summary>
            Asynchronously streams from the Twitter 'Retweets' stream.
            </summary>
            <param name="duration">The duration.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamRetweets(System.TimeSpan,System.Int32)">
            <summary>
            Asynchronously streams from the Twitter 'Retweets' stream.
            </summary>
            <param name="duration">The duration.</param>
            <param name="resultsPerCallback">The results per callback.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamRetweets(System.Int32)">
            <summary>
            Asynchronously streams from the Twitter 'Retweets' stream.
            </summary>
            <param name="resultsPerCallback">The results per callback.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamSample">
            <summary>
            Asynchronously streams from the Twitter 'Sample' stream.
            </summary>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamSample(System.TimeSpan)">
            <summary>
            Asynchronously streams from the Twitter 'Sample' stream.
            </summary>
            <param name="duration">The duration.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamSample(System.TimeSpan,System.Int32)">
            <summary>
            Asynchronously streams from the Twitter 'Sample' stream.
            </summary>
            <param name="duration">The duration.</param>
            <param name="resultsPerCallback">The results per callback.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterService.BeginStreamSample(System.Int32)">
            <summary>
            Asynchronously streams from the Twitter 'Sample' stream.
            </summary>
            <param name="resultsPerCallback">The results per callback.</param>
            <returns></returns>
            <seealso href="http://apiwiki.twitter.com/Streaming-API-Documentation"/>
        </member>
        <member name="E:TweetSharp.Twitter.Service.TwitterService.StreamResult">
            <summary>
            Occurs when a streaming API call received statuses for processing.
            </summary>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterService.RateLimitStatus">
            <summary>
            Gets the <see cref="T:TweetSharp.Twitter.Model.TwitterRateLimitStatus"/> of the last call made to the Twitter API.
            If the rate limit status was indeterminate on the last call, this is null.
            </summary>
            <value>The rate limit status based on the last successful API call.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterService.Result">
            <summary>
            Gets the <see cref="T:TweetSharp.Twitter.Model.TwitterResult"/> of the last call made to the Twitter API.
            </summary>
            <value>The result based on the last API call.</value>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterService.Error">
            <summary>
            Gets the <see cref="T:TweetSharp.Twitter.Model.TwitterError"/> returned from the last service call.
            If the last call was successful, this property is null.
            </summary>
            <value>The error.</value>
        </member>
        <member name="T:TweetSharp.Twitter.Service.TwitterStreamResultEventArgs">
            <summary>
            Returns a batch of results from a callback triggered by the Streaming API.
            </summary>
        </member>
        <member name="M:TweetSharp.Twitter.Service.TwitterStreamResultEventArgs.#ctor(System.Collections.Generic.IEnumerable{TweetSharp.Twitter.Model.TwitterStatus})">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.Twitter.Service.TwitterStreamResultEventArgs"/> class.
            </summary>
            <param name="statuses">The statuses.</param>
        </member>
        <member name="P:TweetSharp.Twitter.Service.TwitterStreamResultEventArgs.Statuses">
            <summary>
            Gets or sets the batched statuses.
            </summary>
            <value>The statuses.</value>
        </member>
        <member name="T:TweetSharp.TwitterException">
            <summary>
            An exception raised when an error is received from the Twitter API
            </summary>
        </member>
        <member name="M:TweetSharp.TwitterException.#ctor(TweetSharp.Twitter.Model.TwitterError)">
            <summary>
            Initializes a new instance of the <see cref="T:TweetSharp.TwitterException"/> class.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="P:TweetSharp.TwitterException.TwitterError">
            <summary>
            Gets or sets the Twitter error.
            </summary>
            <value>The Twitter error.</value>
        </member>
    </members>
</doc>
