<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Caliburn.DynamicProxy</name>
    </assembly>
    <members>
        <member name="T:Caliburn.DynamicProxy.Configuration.BehaviorConfigurationBase`1">
            <summary>
            A base class for <see cref="T:Caliburn.DynamicProxy.Configuration.IBehaviorConfiguration`1"/>
            </summary>
            <typeparam name="T">The behavior being configured.</typeparam>
        </member>
        <member name="T:Caliburn.DynamicProxy.Configuration.IBehaviorConfiguration`1">
            <summary>
            A strongly typed version of <see cref="T:Caliburn.DynamicProxy.Configuration.IBehaviorConfiguration"/>.
            </summary>
            <typeparam name="T">The type of the behavior to be configured.</typeparam>
        </member>
        <member name="T:Caliburn.DynamicProxy.Configuration.IBehaviorConfiguration">
            <summary>
            Used to provide interceptors for a type based on a behavior.
            </summary>
        </member>
        <member name="M:Caliburn.DynamicProxy.Configuration.IBehaviorConfiguration.GetInterceptors(System.Type,Caliburn.Core.Behaviors.IBehavior)">
            <summary>
            Gets the interceptors.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="behavior">The behavior being configured.</param>
            <returns>The interceptors.</returns>
        </member>
        <member name="M:Caliburn.DynamicProxy.Configuration.IBehaviorConfiguration`1.GetInterceptors(System.Type,`0)">
            <summary>
            Gets the interceptors.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="behavior">The behavior being configured.</param>
            <returns>The interceptors.</returns>
        </member>
        <member name="M:Caliburn.DynamicProxy.Configuration.BehaviorConfigurationBase`1.GetInterceptors(System.Type,`0)">
            <summary>
            Gets the interceptors.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="behavior">The behavior being configured.</param>
            <returns>The interceptors.</returns>
        </member>
        <member name="M:Caliburn.DynamicProxy.Configuration.BehaviorConfigurationBase`1.GetInterceptors(System.Type,Caliburn.Core.Behaviors.IBehavior)">
            <summary>
            Gets the interceptors.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="behavior">The behavior being configured.</param>
            <returns>The interceptors.</returns>
        </member>
        <member name="T:Caliburn.DynamicProxy.Configuration.NotifyPropertyChangedConfiguration">
            <summary>
            Configures the NotifyPropertyChanged behavior.
            </summary>
        </member>
        <member name="M:Caliburn.DynamicProxy.Configuration.NotifyPropertyChangedConfiguration.GetInterceptors(System.Type,Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute)">
            <summary>
            Gets the interceptors.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="behavior">The behavior being configured.</param>
            <returns>The interceptors.</returns>
        </member>
        <member name="T:Caliburn.DynamicProxy.Configuration.ScreenConfiguration">
            <summary>
            Configures the Screen behavior.
            </summary>
        </member>
        <member name="M:Caliburn.DynamicProxy.Configuration.ScreenConfiguration.GetInterceptors(System.Type,Caliburn.PresentationFramework.Behaviors.ScreenAttribute)">
            <summary>
            Gets the interceptors.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="behavior">The behavior being configured.</param>
            <returns>The interceptors.</returns>
        </member>
        <member name="T:Caliburn.DynamicProxy.Configuration.ValidateConfiguration">
            <summary>
            Configures the Validate behavior.
            </summary>
        </member>
        <member name="M:Caliburn.DynamicProxy.Configuration.ValidateConfiguration.GetInterceptors(System.Type,Caliburn.PresentationFramework.Behaviors.ValidateAttribute)">
            <summary>
            Gets the interceptors.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="behavior">The behavior being configured.</param>
            <returns>The interceptors.</returns>
        </member>
        <member name="T:Caliburn.DynamicProxy.Interceptors.DataErrorInfoInterceptor">
            <summary>
            An interceptor for <see cref="T:System.ComponentModel.IDataErrorInfo"/>.
            </summary>
        </member>
        <member name="T:Caliburn.DynamicProxy.Interceptors.InterceptorBase">
            <summary>
            A base class for interceptors.
            </summary>
        </member>
        <member name="T:Caliburn.DynamicProxy.Interceptors.IInitializableInterceptor">
            <summary>
            An custom interceptor which is made aware of its proxy once immediately following proxy creation.
            </summary>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.IInitializableInterceptor.Initialize(System.Object)">
            <summary>
            Initializes the interceptor with the specified proxy.
            </summary>
            <param name="proxy">The proxy.</param>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.InterceptorBase.Intercept(Castle.Core.Interceptor.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.InterceptorBase.Initialize(System.Object)">
            <summary>
            Initializes the interceptor with the specified proxy.
            </summary>
            <param name="proxy">The proxy.</param>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.InterceptorBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.InterceptorBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.DataErrorInfoInterceptor.#ctor(Caliburn.Core.Validation.IValidator)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.DynamicProxy.Interceptors.DataErrorInfoInterceptor"/> class.
            </summary>
            <param name="validator">The validator.</param>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.DataErrorInfoInterceptor.Intercept(Castle.Core.Interceptor.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="T:Caliburn.DynamicProxy.Interceptors.NotificationProfile">
            <summary>
            Stores information about how property change notification should work for a particular type.
            </summary>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.NotificationProfile.Get(System.Type,Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute)">
            <summary>
            Gets the specified profile for the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="behavior">The behavior.</param>
            <returns>The profile.</returns>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.NotificationProfile.HandleGetter(System.String,Castle.Core.Interceptor.IInvocation)">
            <summary>
            Handles the getter.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.NotificationProfile.ShouldNotify(System.String)">
            <summary>
            Determines whether the interceptor should notify when this property is changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.NotificationProfile.GetDependencies(System.String)">
            <summary>
            Gets the properties which depend on the specified property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The dependent property names.</returns>
        </member>
        <member name="T:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedBaseInterceptor">
            <summary>
            A base class for interceptors which handle <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedBaseInterceptor.#ctor(System.Type,Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedBaseInterceptor"/> class.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedBaseInterceptor.Intercept(Castle.Core.Interceptor.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedBaseInterceptor.ShouldProceed(Castle.Core.Interceptor.IInvocation)">
            <summary>
            Indicates whether the invocation should proceed.
            </summary>
            <param name="invocation">The invocation.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedBaseInterceptor.OnPropertyChanged(System.Object,System.String)">
            <summary>
            Called to raise a property change notification.
            </summary>
            <param name="sender">The sender.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedNoInterfaceInterceptor">
            <summary>
            Handles <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> on classes that already implement the interface.
            </summary>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedNoInterfaceInterceptor.#ctor(System.Type,Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedNoInterfaceInterceptor"/> class.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedNoInterfaceInterceptor.OnPropertyChanged(System.Object,System.String)">
            <summary>
            Called to raise a property change notification.
            </summary>
            <param name="sender">The sender.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedWithInterfaceInterceptor">
            <summary>
            Handles <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> on classes that do not implement the interface.
            </summary>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedWithInterfaceInterceptor.#ctor(System.Type,Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedWithInterfaceInterceptor"/> class.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedWithInterfaceInterceptor.ShouldProceed(Castle.Core.Interceptor.IInvocation)">
            <summary>
            Indicates whether the invocation should proceed.
            </summary>
            <param name="invocation">The invocation.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.NotifyPropertyChangedWithInterfaceInterceptor.OnPropertyChanged(System.Object,System.String)">
            <summary>
            Called to raise a property change notification.
            </summary>
            <param name="sender">The sender.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Caliburn.DynamicProxy.Interceptors.ProxyInterceptor">
            <summary>
            Implements <see cref="T:Caliburn.Core.Behaviors.IProxy"/>.
            </summary>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.ProxyInterceptor.Intercept(Castle.Core.Interceptor.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="P:Caliburn.DynamicProxy.Interceptors.ProxyInterceptor.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:Caliburn.DynamicProxy.Interceptors.ScreenInterceptor">
            <summary>
            Handles <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/> members.
            </summary>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.ScreenInterceptor.#ctor(Caliburn.PresentationFramework.Behaviors.ScreenAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.DynamicProxy.Interceptors.ScreenInterceptor"/> class.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.ScreenInterceptor.Initialize(System.Object)">
            <summary>
            Initializes the interceptor with the specified proxy.
            </summary>
            <param name="proxy">The proxy.</param>
        </member>
        <member name="M:Caliburn.DynamicProxy.Interceptors.ScreenInterceptor.Intercept(Castle.Core.Interceptor.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="T:Caliburn.DynamicProxy.DynamicProxyFactory">
            <summary>
            An implementation of <see cref="T:Caliburn.Core.Behaviors.IProxyFactory"/> using DynamicProxy2.
            </summary>
        </member>
        <member name="M:Caliburn.DynamicProxy.DynamicProxyFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.DynamicProxy.DynamicProxyFactory"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.DynamicProxy.DynamicProxyFactory.AddConfiguration``2">
            <summary>
            Adds a behavior configuration.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
        </member>
        <member name="M:Caliburn.DynamicProxy.DynamicProxyFactory.CreateProxyWithTarget(System.Type,System.Object,System.Collections.Generic.IEnumerable{Caliburn.Core.Behaviors.IBehavior})">
            <summary>
            Creates the proxy using the specified target.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="target">The target.</param>
            <param name="behaviors">The behaviors.</param>
            <returns>The proxy.</returns>
        </member>
        <member name="M:Caliburn.DynamicProxy.DynamicProxyFactory.CreateProxy(System.Type,System.Collections.Generic.IEnumerable{Caliburn.Core.Behaviors.IBehavior},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a proxy.
            </summary>
            <param name="type">The type.</param>
            <param name="behaviors">The proxy behaviors.</param>
            <param name="constructorArgs">The constructor args.</param>
            <returns>The proxy.</returns>
        </member>
    </members>
</doc>
